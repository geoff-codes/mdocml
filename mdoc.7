.\" $Id: mdoc.7,v 1.4 2009/03/14 05:21:58 kristaps Exp $
.\"
.\" Copyright (c) 2009 Kristaps Dzonsons <kristaps@kth.se>
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the
.\" above copyright notice and this permission notice appear in all
.\" copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL
.\" WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE
.\" AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL
.\" DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR
.\" PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
.\" TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
.\" PERFORMANCE OF THIS SOFTWARE.
.\" 
.Dd $Mdocdate$
.Dt mdoc 7
.Os
.\" SECTION
.Sh NAME
.Nm mdoc
.Nd mdoc macro reference
.\" SECTION
.Sh DESCRIPTION
The
.Nm mdoc
language is used to format 
.Bx 
.Ux
manuals.  An
.Nm
document follows simple rules:  lines beginning with the control
character
.Sq \.
are parsed for macros.  Other lines are interpreted within the scope of
prior macros.  This document describes the encoding, ontology and syntax
of these macros.
.\" SECTION
.Sh CHARACTER ENCODING
.Nm
documents may contain only printable alphanumeric characters, the space
character
.Sq \  ,
and, in certain circumstances, the tab character
.Sq \et .
All manuals must have
.Sq \en
line termination.
.\" SUB-SECTION
.Ss Reserved Characters
Within a macro line, the following characters are reserved:
.Bl -tag -width 12n -offset XXXX -compact
.It \&.
.Pq period
.It \&,
.Pq comma
.It \&:
.Pq colon
.It \&;
.Pq semicolon
.It \&(
.Pq left-parenthesis
.It \&)
.Pq right-parenthesis
.It \&[
.Pq left-bracket
.It \&]
.Pq right-bracket
.It \&?
.Pq question
.It \&!
.Pq exclamation 
.El
.\" PARAGRAPH
.Pp
Use of reserved characters is described in
.Sx Closure .
For general non-reserved use, characters must either be escaped with a
non-breaking space
.Pq Sq \e&
or, if applicable, an appropriate escape-sequence used.  
.\" SUB-SECTION
.Ss Special Characters
Special character sequences begin with the escape character
.Sq \\
followed by either an open-parenthesis 
.Sq \&(
for two-character sequences; an open-bracket
.Sq \&[
for n-character sequences (terminated at a close-bracket
.Sq \&] ) ;
or a single one-character sequence.
.Pp
Characters may alternatively be escaped by a slash-asterisk,
.Sq \\* ,
with the same combinations as described above.  This form is deprecated.  
.Pp
The following is a table of all available escapes.
.Pp
Grammatic:
.Bl -tag -width 12n -offset "XXXX" -compact
.It \\(em
.Pq em-dash
.It \\(en
.Pq en-dash
.It \e-
.Pq hyphen
.It \\\\
.Pq back-slash
.It \e'
.Pq apostrophe
.It \e`
.Pq back-tick
.It \\
.Pq space
.It \\.
.Pq period
.El
.\" PARAGRAPH
.Pp
Enclosures:
.Bl -tag -width 12n -offset "XXXX" -compact
.It \\(lh
.Pq left hand
.It \\(rh
.Pq right hand
.It \\(<<
.Pq left guillemot
.It \\(>>
.Pq right guillemot
.It \\(rC
.Pq right brace
.It \\(lC
.Pq left brace
.It \\(ra
.Pq right angle
.It \\(la
.Pq left angle
.It \\(rB
.Pq right bracket
.It \\(lB
.Pq left bracket
.It \\q
.Pq double-quote
.It \\(lq
.Pq left double-quote
.It \\(Lq
.Pq left double-quote, deprecated
.It \\(rq
.Pq right double-quote
.It \\(Rq
.Pq right double-quote, deprecated
.It \\(oq
.Pq left single-quote
.It \\(aq
.Pq right single-quote
.El
.\" PARAGRAPH
.Pp
Indicatives:
.Bl -tag -width 12n -offset "XXXX" -compact
.It \\(<-
.Pq left arrow
.It \\(->
.Pq right arrow
.It \\(ua
.Pq up arrow
.It \\(da
.Pq down arrow
.It \\(<>
.Pq left-right arrow
.It \\(lA
.Pq left double-arrow
.It \\(rA
.Pq right double-arrow
.It \\(uA
.Pq up double-arrow
.It \\(dA
.Pq down double-arrow
.It \\(hA
.Pq left-right double-arrow
.El
.\" PARAGRAPH
.Pp
Mathematical:
.Bl -tag -width 12n -offset "XXXX" -compact
.It \\(Gt
.Pq greater-than, deprecated
.It \\(Lt
.Pq less-than, deprecated
.It \\(<=
.Pq less-than-equal
.It \\(Le
.Pq less-than-equal, deprecated
.It \\(>=
.Pq greater-than-equal
.It \\(Ge
.Pq greater-than-equal
.It \\(==
.Pq equal
.It \\(!=
.Pq not equal
.It \\(Ne
.Pq not equal, deprecated
.It \\(if
.Pq infinity
.It \\(If
.Pq infinity, deprecated
.It \\(na
.Pq NaN , an extension
.It \\(Na
.Pq NaN, deprecated
.It \\(+-
.Pq plus-minus
.It \\(Pm
.Pq plus-minus, deprecated
.It \\(**
.Pq asterisk
.El
.\" PARAGRAPH
.Pp
Diacritics and letter combinations:
.Bl -tag -width 12n -offset "XXXX" -compact
.It \\(ga
.Pq accent grave
.It \\(aa
.Pq accent accute
.It \\(ad
.Pq accent dieresis
.It \\(a~
.Pq accent tilde
.It \\(AE
.Pq upper-case AE
.It \\(ae
.Pq lower-case AE
.It \\(OE
.Pq upper-case OE
.It \\(oe
.Pq lower-case OE
.It \\('A
.Pq upper-case acute A
.It \\('E
.Pq upper-case acute E
.It \\('I
.Pq upper-case acute I
.It \\('O
.Pq upper-case acute O
.It \\('U
.Pq upper-case acute U
.It \\('a
.Pq lower-case acute a
.It \\('e
.Pq lower-case acute e
.It \\('i
.Pq lower-case acute i
.It \\('o
.Pq lower-case acute o
.It \\('u
.Pq lower-case acute u
.It \\(`A
.Pq upper-case grave A
.It \\(`E
.Pq upper-case grave E
.It \\(`I
.Pq upper-case grave I
.It \\(`O
.Pq upper-case grave O
.It \\(`U
.Pq upper-case grave U
.It \\(`a
.Pq lower-case grave a
.It \\(`e
.Pq lower-case grave e
.It \\(`i
.Pq lower-case grave i
.It \\(`o
.Pq lower-case grave o
.It \\(`u
.Pq lower-case grave u
.It \\(~A
.Pq upper-case tilde A
.It \\(~N
.Pq upper-case tilde N
.It \\(~O
.Pq upper-case tilde O
.It \\(~a
.Pq lower-case tilde a
.It \\(~n
.Pq lower-case tilde n
.It \\(~o
.Pq lower-case tilde o
.It \\(:A
.Pq upper-case dieresis A
.It \\(:E
.Pq upper-case dieresis E
.It \\(:I
.Pq upper-case dieresis I
.It \\(:O
.Pq upper-case dieresis O
.It \\(:U
.Pq upper-case dieresis U
.It \\(:a
.Pq lower-case dieresis a
.It \\(:e
.Pq lower-case dieresis e
.It \\(:i
.Pq lower-case dieresis i
.It \\(:o
.Pq lower-case dieresis o
.It \\(:u
.Pq lower-case dieresis u
.It \\(:y
.Pq lower-case dieresis y
.El
.\" PARAGRAPH
.Pp
Special symbols:
.Bl -tag -width 12n -offset "XXXX" -compact
.It \\(bu
.Pq bullet
.It \\(ba
.Pq bar
.It \\(Ba
.Pq bar, deprecated
.It \\(co
.Pq copyright
.It \\(rg
.Pq registered
.It \\(tm
.Pq trademarked
.It \\&
.Pq non-breaking space
.It \\e
.Pq escape
.It \\(Am
.Pq ampersand, deprecated
.El 
.\" SECTION
.Sh ONTOLOGY
Macros are classified in an ontology described by scope rules.  
.\" SUB-SECTION
.Ss Scope
.Bl -inset 
.\" LIST-ITEM
.It Em Block
macros enclose other block macros, in-line macros or text, and
may span multiple lines.
.Bl -inset -offset XXXX
.\" LIST-ITEM
.It Em Full-block
macros always span multiple lines.  They consist of zero or 
more
.Qq heads ,
subsequent macros or text on the same line following invocation; an
optional
.Qq body ,
which spans subsequent lines of text or macros; and an optional
.Qq tail ,
macros or text on the same line following closure.
.\" LIST-ITEM
.It Em Partial-block
macros may span multiple lines.  They consists of a optional
.Qq head ,
text immediately following invocation; always a 
.Qq body ,
text or macros following the head on the same and subsequent lines; and
optionally a
.Qq tail ,
text immediately following closure.
.\" LIST-ITEM
.It Em In-line
macros may only enclose text and span at most a single line. 
.El
.El
.\" SUB-SECTION
.Ss Closure
Closure of a macro's scope depends first on its classification, then
on whether it's parsable.  In this table,
.Sq BFE
refers to block full-explicit and so on.
.\" PARAGRAPH
.Pp
.Bl -tag -width 12n -offset XXXX -compact
.It BPE , BFE
corresponding explicit closure macro
.It BFI
end-of-file or a corresponding implicit closure macro
.It BPI
end-of-line (body may be closed by >0 space-separated
.Sx Reserved Characters ,
although block scope will still be open)
.It INL
end-of-line
.El
.\" PARAGRAPH
.Pp
If a macro (block or in-line) is parsable, it may also be closed out by
one of the following scenarios (unless specifically noted otherwise):
.\" PARAGRAPH
.Pp
.Bl -dash -offset XXXX -compact
.It 
a sequence of >0 space-separated
.Sx Reserved Characters ,
.It
another macro,
.It
end-of-line, or
.It
completion of a set number of arguments.
.El
.\" PARAGRAPH
.Pp
If >0 space-separated
.Sx Reserved Characters
are followed by non-reserved characters, the behaviour differs per
macro.  In general, scope of the macro is closed and re-opened:
subsequent tokens are interpreted as if the scope had just been opened.
In other circumstances, scope is simply closed out.
.\" SECTION
.Sh SYNTAX
Macros are generally two and at times three characters in length.  The
syntax of macro invocation depends on its classification.  
.Qq \-arg
refers to the macro arguments (which may contain zero or more values).
In these illustrations, 
.Sq \&.Yo
opens the scope of a macro, and if specified,
.Sq \&.Yc
closes it out (closure may be implicit at end-of-line or end-of-file).
.\" PARAGRAPH
.Pp
Block full-explicit (may contain head, body, tail).
.Bd -literal -offset XXXX
\&.Yo \(lB\-arg \(lBval...\(rB\(rB \(lBhead...\(rB 
\(lBbody...\(rB 
\&.Yc \(lBtail...\(rB 
.Ed
.\" PARAGRAPH
.Pp
Block full-implicit (may contain zero or more heads, body, no tail).
.Bd -literal -offset XXXX
\&.Yo \(lB\-arg \(lBval...\(rB\(rB \(lBhead... \(lBTa head...\(rB\(rB 
\(lBbody...\(rB 
\&.Yc
.Ed
.\" PARAGRAPH
.Pp
Block partial-explicit (may contain head, multi-line body, tail).
.Bd -literal -offset XXXX
\&.Yo \(lB\-arg \(lBval...\(rB\(rB \(lBhead...\(rB 
\(lBbody...\(rB 
\&.Yc \(lBtail...\(rB 

\&.Yo \(lB\-arg \(lBval...\(rB\(rB \(lBhead...\(rB \
\(lBbody...\(rB \&Yc \(lBtail...\(rB 
.Ed
.\" PARAGRAPH
.Pp
Block partial-implicit (no head, body, no tail).  Note that the body
section may be followed by zero or more 
.Sx Reserved Words .
These are in the block scope, but not in the body scope.
.Bd -literal -offset XXXX
\&.Yo \(lB\-arg \(lBval...\(rB\(rB \(lBbody...\(rB \(lBreserved...\(rB
.Ed
.\" PARAGRAPH
.Pp
In-lines have \(>=0 scoped arguments.
.Bd -literal -offset XXX
\&.Yy \(lB\-arg \(lBval...\(rB\(rB \(lBargs...\(rB

\&.Yy \(lB\-arg \(lBval...\(rB\(rB arg0 arg1 argN
.Ed
.\"
.Sh MACROS
This section contains a complete list of all 
.Nm
macros, arranged ontologically.  A 
.Qq callable
macro is may be invoked subsequent to the initial macro-line macro.  A
.Qq parsable
macro may be followed by further (ostensibly callable) macros.
.\" SUB-SECTION
.Ss Block full-implicit
The head of these macros follows invocation; the body is the content of
subsequent lines prior to closure.  None of these macros have tails;
some 
.Po
.Sq \&It \-bullet , 
.Sq \-hyphen , 
.Sq \-dash ,
.Sq \-enum ,
.Sq \-item 
.Pc
don't have heads.
.Pp
.Bl -column "MacroX" "CallableX" "ParsableX" "Closing" -compact -offset XXXX
.It Em Macro Ta Em Callable Ta Em Parsable Ta Em Closing
.It \&.Sh    Ta    \&No    Ta    \&No    Ta    \&.Sh
.It \&.Ss    Ta    \&No    Ta    \&No    Ta    \&.Sh, \&.Ss
.It \&.It    Ta    \&No    Ta    Yes     Ta    \&.It, \&.El
.El
.\" SUB-SECTION
.Ss Block full-explicit
None of these macros are callable or parsed.  The last column indicates
the explicit scope rules.  All contains bodies, some may contain heads 
.Pq So \&Bf Sc .
.Pp
.Bl -column "MacroX" "CallableX" "ParsableX" "closed by XXX" -compact -offset XXXX
.It Em Macro Ta Em Callable Ta Em Parsable Ta Em Scope
.It \&.Bd    Ta    \&No    Ta    \&No    Ta    closed by \&.Ed
.It \&.Ed    Ta    \&No    Ta    \&No    Ta    opened by \&.Bd
.It \&.Bl    Ta    \&No    Ta    \&No    Ta    closed by \&.El
.It \&.El    Ta    \&No    Ta    \&No    Ta    opened by \&.Bl
.It \&.Bf    Ta    \&No    Ta    \&No    Ta    closed by \&.Ef
.It \&.Ef    Ta    \&No    Ta    \&No    Ta    opened by \&.Bf
.It \&.Bk    Ta    \&No    Ta    \&No    Ta    closed by \&.Ek
.It \&.Ek    Ta    \&No    Ta    \&No    Ta    opened by \&.Bk
.El
.\" SUB-SECTION
.Ss Block partial-implicit
All of these are callable and parsed for further macros.  Their scopes
close at the invocation's end-of-line.
.Pp
.Bl -column "MacroX" "CallableX" "ParsableX" -compact -offset XXXX
.It Em Macro Ta Em Callable Ta Em Parsable
.It \&.Aq    Ta    Yes   Ta    Yes
.It \&.Op    Ta    Yes   Ta    Yes
.It \&.Bq    Ta    Yes   Ta    Yes
.It \&.Dq    Ta    Yes   Ta    Yes
.It \&.Pq    Ta    Yes   Ta    Yes
.It \&.Qq    Ta    Yes   Ta    Yes
.It \&.Sq    Ta    Yes   Ta    Yes
.It \&.Brq   Ta    Yes   Ta    Yes
.It \&.D1    Ta    \&No  Ta    \&Yes
.It \&.Dl    Ta    \&No  Ta    Yes
.It \&.Ql    Ta    Yes   Ta    Yes
.El
.\" SUB-SECTION
.Ss Block partial-explicit
Each of these contains at least a body and, in limited circumstances, a
head 
.Pq So \&Fo Sc , So \&Eo Sc
and/or tail 
.Pq So \&Ec Sc .
.Pp
.Bl -column "MacroX" "CallableX" "ParsableX" "closed by XXXX" -compact -offset XXXX
.It Em Macro Ta Em Callable Ta Em Parsable Ta Em Scope
.It \&.Ao    Ta    Yes   Ta    Yes    Ta    closed by \&.Ac
.It \&.Ac    Ta    Yes   Ta    Yes    Ta    opened by \&.Ao
.It \&.Bc    Ta    Yes   Ta    Yes    Ta    closed by \&.Bo
.It \&.Bo    Ta    Yes   Ta    Yes    Ta    opened by \&.Bc
.It \&.Pc    Ta    Yes   Ta    Yes    Ta    closed by \&.Po
.It \&.Po    Ta    Yes   Ta    Yes    Ta    opened by \&.Pc
.It \&.Do    Ta    Yes   Ta    Yes    Ta    closed by \&.Dc
.It \&.Dc    Ta    Yes   Ta    Yes    Ta    opened by \&.Do
.It \&.Xo    Ta    Yes   Ta    Yes    Ta    closed by \&.Xc
.It \&.Xc    Ta    Yes   Ta    Yes    Ta    opened by \&.Xo
.It \&.Bro   Ta    Yes   Ta    Yes    Ta    closed by \&.Brc
.It \&.Brc   Ta    Yes   Ta    Yes    Ta    opened by \&.Bro
.It \&.Oc    Ta    Yes   Ta    Yes    Ta    closed by \&.Oo
.It \&.Oo    Ta    Yes   Ta    Yes    Ta    opened by \&.Oc
.It \&.So    Ta    Yes   Ta    Yes    Ta    closed by \&.Sc
.It \&.Sc    Ta    Yes   Ta    Yes    Ta    opened by \&.So
.It \&.Fc    Ta    Yes   Ta    Yes    Ta    opened by \&.Fo
.It \&.Fo    Ta    \&No  Ta    \&No   Ta    closed by \&.Fc
.It \&.Ec    Ta    Yes   Ta    Yes    Ta    opened by \&.Eo
.It \&.Eo    Ta    Yes   Ta    Yes    Ta    closed by \&.Ec
.It \&.Qc    Ta    Yes   Ta    Yes    Ta    opened by \&.Oo
.It \&.Qo    Ta    Yes   Ta    Yes    Ta    closed by \&.Oc
.It \&.Re    Ta    \&No  Ta    \&No   Ta    opened by \&.Rs
.It \&.Rs    Ta    \&No  Ta    \&No   Ta    closed by \&.Re
.El
.\" SUB-SECTION
.Ss In-line 
In-line macros have only text children.  If a number (or inequality) of
arguments is
.Pq n , 
then the macro accepts an arbitrary number of arguments.
.Pp
.Bl -column "MacroX" "CallableX" "ParsableX" "Arguments" -compact -offset XXXX
.It Em Macro Ta Em Callable Ta Em Parsable Ta Em Arguments
.It \&.Dd    Ta    \&No  Ta    \&No    Ta    >0
.It \&.Dt    Ta    \&No  Ta    \&No    Ta    n
.It \&.Os    Ta    \&No  Ta    \&No    Ta    n
.It \&.Pp    Ta    \&No  Ta    \&No    Ta    0
.It \&.Ad    Ta    Yes   Ta    Yes     Ta    n
.It \&.An    Ta    \&No  Ta    Yes     Ta    n
.It \&.Ar    Ta    Yes   Ta    Yes     Ta    n
.It \&.Cd    Ta    Yes   Ta    \&No    Ta    >0
.It \&.Cm    Ta    Yes   Ta    Yes     Ta    n
.It \&.Dv    Ta    Yes   Ta    Yes     Ta    >0
.It \&.Er    Ta    Yes   Ta    Yes     Ta    >0
.It \&.Ev    Ta    Yes   Ta    Yes     Ta    >0
.It \&.Ex    Ta    \&No  Ta    \&No    Ta    0
.It \&.Fa    Ta    Yes   Ta    Yes     Ta    >0
.It \&.Fd    Ta    \&No  Ta    \&No    Ta    >0
.It \&.Fl    Ta    Yes   Ta    Yes     Ta    n
.It \&.Fn    Ta    Yes   Ta    Yes     Ta    >0
.It \&.Ft    Ta    \&No  Ta    Yes     Ta    n
.It \&.Ic    Ta    Yes   Ta    Yes     Ta    >0
.It \&.In    Ta    \&No  Ta    \&No    Ta    n
.It \&.Li    Ta    Yes   Ta    Yes     Ta    >0
.It \&.Nd    Ta    \&No  Ta    \&No    Ta    n
.It \&.Nm    Ta    Yes   Ta    Yes     Ta    n
.It \&.Ot    Ta    \&No  Ta    \&No    Ta    n
.It \&.Pa    Ta    Yes   Ta    Yes     Ta    n
.It \&.Rv    Ta    \&No  Ta    \&No    Ta    0
.It \&.St    Ta    \&No  Ta    Yes     Ta    1
.It \&.Va    Ta    Yes   Ta    Yes     Ta    >0
.It \&.Vt    Ta    Yes   Ta    Yes     Ta    >0
.It \&.Xr    Ta    Yes   Ta    Yes     Ta    >0, <3
.It \&.%A    Ta    \&No  Ta    \&No    Ta    >0
.It \&.%B    Ta    \&No  Ta    \&No    Ta    >0
.It \&.%C    Ta    \&No  Ta    \&No    Ta    >0
.It \&.%D    Ta    \&No  Ta    \&No    Ta    >0
.It \&.%I    Ta    \&No  Ta    \&No    Ta    >0
.It \&.%J    Ta    \&No  Ta    \&No    Ta    >0
.It \&.%N    Ta    \&No  Ta    \&No    Ta    >0
.It \&.%O    Ta    \&No  Ta    \&No    Ta    >0
.It \&.%P    Ta    \&No  Ta    \&No    Ta    >0
.It \&.%R    Ta    \&No  Ta    \&No    Ta    >0
.It \&.%T    Ta    \&No  Ta    \&No    Ta    >0
.It \&.%V    Ta    \&No  Ta    \&No    Ta    >0
.It \&.At    Ta    Yes   Ta    Yes     Ta    1
.It \&.Bsx   Ta    Yes   Ta    Yes     Ta    n
.It \&.Bx    Ta    Yes   Ta    Yes     Ta    n
.It \&.Db    Ta    \&No  Ta    \&No    Ta    1
.It \&.Em    Ta    Yes   Ta    Yes     Ta    >0
.It \&.Fx    Ta    Yes   Ta    Yes     Ta    n
.It \&.Ms    Ta    \&No  Ta    Yes     Ta    >0
.It \&.No    Ta    Yes   Ta    Yes     Ta    0
.It \&.Ns    Ta    Yes   Ta    Yes     Ta    0
.It \&.Nx    Ta    Yes   Ta    Yes     Ta    n
.It \&.Ox    Ta    Yes   Ta    Yes     Ta    n
.It \&.Pf    Ta    \&No  Ta    Yes     Ta    1
.It \&.Sm    Ta    \&No  Ta    \&No    Ta    1
.It \&.Sx    Ta    Yes   Ta    Yes     Ta    >0
.It \&.Sy    Ta    Yes   Ta    Yes     Ta    >0
.It \&.Tn    Ta    Yes   Ta    Yes     Ta    >0
.It \&.Ux    Ta    Yes   Ta    Yes     Ta    n
.It \&.Bt    Ta    \&No  Ta    \&No    Ta    0
.It \&.Hf    Ta    \&No  Ta    \&No    Ta    n
.It \&.Fr    Ta    \&No  Ta    \&No    Ta    n
.It \&.Ud    Ta    \&No  Ta    \&No    Ta    0
.It \&.Lb    Ta    \&No  Ta    \&No    Ta    1
.It \&.Ap    Ta    Yes   Ta    Yes     Ta    0
.It \&.Lp    Ta    \&No  Ta    \&No    Ta    0
.It \&.Lk    Ta    \&No  Ta    Yes     Ta    >0
.It \&.Mt    Ta    \&No  Ta    Yes     Ta    >0
.El
.\" SECTION
.Sh COMPATIBILITY
The mdoc language was traditionally a 
.Qq roff
macro package; most existing manuals were written with mdoc syntax
dictated by system-dependent roff installations.  This section documents
compatibility with these systems.
.Pp
.Bl -dash -compact
.\" LIST-ITEM
.It
.Sq \&Fo
and
.Sq \&St
historically weren't always callable.  Both are now correctly callable.
.\" LIST-ITEM
.It
.Sq \&It \-nested
is assumed for all lists: any list may be nested and
.Sq \-enum
lists will restart the sequence only for the sub-list.
.\" LIST-ITEM
.It
.Sq \&It \-column
syntax where column widths may be preceeded by other arguments (instead
of proceeded) is not supported.
.\" LIST-ITEM
.It
The 
.Sq \&At
macro only accepts a single parameter.
.\" LIST-ITEM
.It
The system-name macros (
.Ns Sq \&At ,
.Sq \&Bsx ,
.Sq \&Bx ,
.Sq \&Fx ,
.Sq \&Nx ,
.Sq \&Ox ,
and
.Sq \&Ux )
are callable.
.\" LIST-ITEM
.It
Some manuals use
.Sq \&Li
incorrectly by following it with a reserved character and expecting the
delimiter to render.  This is not supported.
.\" LIST-ITEM
.It
.Sq \&Cd
is callable.
.El
.\" SECTION
.Sh SEE ALSO
.Xr mdoctree 1 ,
.Xr mdoclint 1 ,
.Xr mdocterm 1 ,
.Xr mdoc 3
.\" SECTION
.Sh AUTHORS
The
.Nm
utility was written by 
.An Kristaps Dzonsons Aq kristaps@kth.se .
.\" SECTION
.Sh CAVEATS
There are several ambiguous parts of mdoc.
.Pp
.Bl -dash -compact
.\" LIST-ITEM
.It
.Sq \&Fa
should be 
.Sq \&Va
as function arguments are variables.
.\" LIST-ITEM
.It
.Sq \&Ft
should be
.Sq \&Vt
as function return types are still types.  Furthermore, the
.Sq \&Ft
should be removed and
.Sq \&Fo ,
which ostensibly follows it, should follow the same convention as
.Sq \&Va .
.\" LIST-ITEM
.It
.Sq \&Va
should formalise that only one or two arguments are acceptable: a
variable name and optional, preceeding type.
.\" LIST-ITEM
.It
.Sq \&Fd
is ambiguous.  It's commonly used to indicate an include file in the
synopsis section.  
.Sq \&In
should be used, instead.
.\" LIST-ITEM
.It
Only the
.Sq \-literal
argument to
.Sq \&Bd
makes sense.  The remaining ones should be removed.
.\" LIST-ITEM
.It
The 
.Sq \&Xo
and
.Sq \&Xc
macros should be deprecated.
.\" LIST-ITEM
.It
The
.Sq \&Dt
macro lacks clarity.  It should be absolutely clear which title will
render when formatting the manual page.
.El
