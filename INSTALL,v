head	1.13;
access;
symbols
	VERSION_1_13_3:1.10
	VERSION_1_13_2:1.9
	VERSION_1_12_4:1.3.2.1
	VERSION_1_12:1.3.0.2
	VERSION_1_13_1:1.2;
locks; strict;
comment	@# @;


1.13
date	2015.11.07.14.01.16;	author schwarze;	state Exp;
branches;
next	1.12;

1.12
date	2015.07.19.06.05.16;	author schwarze;	state Exp;
branches;
next	1.11;

1.11
date	2015.03.19.14.57.29;	author schwarze;	state Exp;
branches;
next	1.10;

1.10
date	2015.03.09.21.00.14;	author schwarze;	state Exp;
branches;
next	1.9;

1.9
date	2014.12.11.07.44.46;	author schwarze;	state Exp;
branches;
next	1.8;

1.8
date	2014.12.09.12.05.44;	author schwarze;	state Exp;
branches;
next	1.7;

1.7
date	2014.12.09.09.19.13;	author schwarze;	state Exp;
branches;
next	1.6;

1.6
date	2014.11.30.22.47.16;	author schwarze;	state Exp;
branches;
next	1.5;

1.5
date	2014.08.18.13.27.47;	author kristaps;	state Exp;
branches;
next	1.4;

1.4
date	2014.08.16.19.00.01;	author schwarze;	state Exp;
branches;
next	1.3;

1.3
date	2014.08.11.01.39.00;	author schwarze;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	2014.08.10.17.22.26;	author schwarze;	state Exp;
branches;
next	1.1;

1.1
date	2014.08.08.16.45.39;	author schwarze;	state Exp;
branches;
next	;

1.3.2.1
date	2014.08.14.20.43.22;	author schwarze;	state Exp;
branches;
next	;


desc
@@


1.13
log
@In private header files, __BEGIN_DECLS and __END_DECLS are pointless.
Because these work slightly differently on different systems,
they are becoming a maintenance burden in the portable version,
so delete them.

Besides, one of the chief design goals of the mandoc toolbox is to
make sure that nothing related to documentation requires C++.
Consequently, linking mandoc against any kind of C++ program would
defeat the purpose and is not supported.
I don't understand why kristaps@@ added them in the first place.
@
text
@$Id: INSTALL,v 1.12 2015/07/19 06:05:16 schwarze Exp $

About mdocml, the portable mandoc distribution
----------------------------------------------
The mandoc manpage compiler toolset is a suite of tools compiling
mdoc(7), the roff(7) macro language of choice for BSD manual pages,
and man(7), the predominant historical language for UNIX manuals.
It includes a man(1) manual viewer and additional tools.
For general information, see <http://mdocml.bsd.lv/>.

In case you have questions or want to provide feedback, read
<http://mdocml.bsd.lv/contact.html>.  Consider subscribing to the
discuss@@ mailing list mentioned on that page.  If you intend to
help with the development of mandoc, consider subscribing to the
tech@@ mailing list, too.

Enjoy using the mandoc toolset!

Ingo Schwarze, Karlsruhe, March 2015


Installation
------------
Before manually installing mandoc on your system, please check
whether the newest version of mandoc is already installed by default
or available via a binary package or a ports system.  A list of the
latest bundled and ported versions of mandoc for various operating
systems is maintained at <http://mdocml.bsd.lv/ports.html>.

Regarding how packages and ports are maintained for your operating
system, please consult your operating system documentation.
To install mandoc manually, the following steps are needed:

1. If you want to build the CGI program, man.cgi(8), too, run the
command "echo BUILD_CGI=1 > configure.local".  Then run "cp
cgi.h.examples cgi.h" and edit cgi.h as desired.

2. Run "./configure".
This script attempts autoconfiguration of mandoc for your system.
Read both its standard output and the file "Makefile.local" it
generates.  If anything looks wrong or different from what you
wish, read the file "configure.local.example", create and edit
a file "configure.local", and re-run "./configure" until the
result seems right to you.
On Solaris 10 and earlier, you may have to run "ksh ./configure"
because the native /bin/sh lacks some POSIX features.

3. Run "make".
Any POSIX-compatible make, in particular both BSD make and GNU make,
should work.  If the build fails, look at "configure.local.example"
and go back to step 2.

4. Run "make -n install" and check whether everything will be
installed to the intended places.  Otherwise, put some *DIR or *NM*
variables into "configure.local" and go back to step 2.

5. Run "sudo make install".  If you intend to build a binary
package using some kind of fake root mechanism, you may need a
command like "make DESTDIR=... install".  Read the *-install targets
in the "Makefile" to understand how DESTDIR is used.

6. If you want to use the integrated man(1) and your system uses
manpath(1), make sure it is configured correctly, in particular,
it returns all directory trees where manual pages are installed.
Otherwise, if your system uses man.conf(5), make sure it contains
a "_whatdb" line for each directory tree, and the order of these
lines meets your wishes.

7. If you compiled with database support, run the command "sudo
makewhatis" to build mandoc.db(5) databases in all the directory
trees configured in step 6.  Whenever installing new manual pages,
re-run makewhatis(8) to update the databases, or apropos(1) will
not find the new pages.

8. To set up a man.cgi(8) server, read its manual page.

Note that some man(7) pages may contain low-level roff(7) markup
that mandoc does not yet understand.  On some BSD systems using
mandoc, third-party software is vetted on whether it may be formatted
with mandoc.  If not, groff(1) is pulled in as a dependency and
used to install a pre-formatted "catpage" instead of directly as
manual page source.


Understanding mandoc dependencies
---------------------------------
The mandoc(1), man(1), and demandoc(1) utilities only depend
on the zlib library for decompressing gzipped manual pages,
but makewhatis(8) and apropos(1) depend on the following
additional software:

1. The SQLite database system, see <http://sqlite.org/>.
The recommended version of SQLite is 3.8.4.3 or newer.  The mandoc
toolset is known to work with version 3.7.5 or newer.  Versions
older than 3.8.3 may not achieve full performance due to the
missing SQLITE_DETERMINISTIC optimization flag.  Versions older
than 3.8.0 may not show full error information if opening a database
fails due to the missing sqlite3_errstr() API.  Both are very minor
problems, apropos(1) is fully usable with SQLite 3.7.5.  Versions
older than 3.7.5 may or may not work, they have not been tested.

2. The fts(3) directory traversion functions.
If your system does not have them, the bundled compatibility version
will be used, so you need not worry in that case.  But be careful: the
glibc version of fts(3) is known to be broken on 32bit platforms,
see <https://sourceware.org/bugzilla/show_bug.cgi?id=15838>.
If you run into that problem, set "HAVE_FTS=0" in configure.local.

3. Marc Espie's ohash(3) library.
If your system does not have it, the bundled compatibility version
will be used, so you probably need not worry about it.

One of the chief design goals of the mandoc toolbox is to make
sure that nothing related to documentation requires C++.
Consequently, linking mandoc against any kind of C++ program
would defeat the purpose and is not supported.


Checking autoconfiguration quality
----------------------------------
If you want to check whether automatic configuration works well
on your platform, consider the following:

The mandoc package intentionally does not use GNU autoconf because
we consider that toolset a blatant example of overengineering that
is obsolete nowadays, since all modern operating systems are now
reasonably close to POSIX and do not need arcane shell magic any
longer.  If your system does need such magic, consider upgrading
to reasonably modern POSIX-compliant tools rather than asking for
autoconf-style workarounds.

As far as mandoc is using any features not mandated by ANSI X3.159-1989
("ANSI C") or IEEE Std 1003.1-2008 ("POSIX") that some modern systems
do not have, we intend to provide autoconfiguration tests and
compat_*.c implementations.  Please report any that turn out to be
missing.  Note that while we do strive to produce portable code,
we do not slavishly restrict ourselves to POSIX-only interfaces.
For improved security and readability, we do use well-designed,
modern interfaces like reallocarray(3) even if they are still rather
uncommon, of course bundling compat_*.c implementations as needed.

Where mandoc is using ANSI C or POSIX features that some systems
still lack and that compat_*.c implementations can be provided for
without too much hassle, we will consider adding them, too, so
please report whatever is missing on your platform.

The following steps can be used to manually check the automatic
configuration on your platform:

1. Run "make distclean".

2. Run "./configure"

3. Read the file "config.log".  It shows the compiler commands used
to test the libraries installed on your system and the standard
output and standard error output these commands produce.  Watch out
for unexpected failures.  Those are most likely to happen if headers
or libraries are installed in unusual places or interfaces defined
in unusual headers.  You can also look at the file "config.h" and
check that no "#define HAVE_*" differ from your expectations.
@


1.12
log
@Do not fork and exec gunzip(1), just link with libz instead.
As discussed with deraadt@@, that's cleaner and will help tame(2).
Something like this was also suggested earlier by bapt at FreeBSD.
Minus 50 lines of code, deleting one interface function (mparse_wait),
no functional change intended.
@
text
@d1 1
a1 1
$Id: INSTALL,v 1.11 2015/03/19 14:57:29 schwarze Exp $
d113 5
@


1.11
log
@Compat glue needed for Solaris 9 and 10.

Thanks to Sevan Janiyan <venture37 at geeklan dot co dot uk> for
reporting the Solaris 10 issues, to Jan Holzhueter <jh at opencsw
dot org> for some additional insight, and to OpenCSW in general for
providing me with a Solaris 9/10/11 testing environment.
@
text
@d1 1
a1 1
$Id: INSTALL,v 1.10 2015/03/09 21:00:14 schwarze Exp $
d87 4
a90 3
The mandoc(1), man(1), and demandoc(1) utilities have no external
dependencies, but makewhatis(8) and apropos(1) depend on the
following software:
@


1.10
log
@update for 1.13.3
@
text
@d1 1
a1 1
$Id: INSTALL,v 1.9 2014/12/11 07:44:46 schwarze Exp $
d45 2
@


1.9
log
@link to EuroBSDCon 2014
@
text
@d1 1
a1 1
$Id: INSTALL,v 1.8 2014/12/09 12:05:44 schwarze Exp $
d8 1
a8 2
Since the present version 1.13.2, it includes a man(1) manual viewer
in addition to the apropos(1) manual page search tool.
a10 4
In this document, we describe the installation and deployment of
mandoc(1), first as a simple, standalone formatter, and then as part of
the man(1) system.

d19 1
a19 1
Ingo Schwarze, Karlsruhe, December 2014
a29 4
If mandoc is installed, you can check the version by running "mandoc -V".
You can find the version contained in this distribution tarball
by running "./configure".

d60 21
a80 4
6. To set up a man.cgi(8) server, read its manual page.

7. To use mandoc(1) as your man(1) formatter, read the "Deployment"
sections below.
d85 3
a87 3
The mandoc(1) and demandoc(1) utilities have no external dependencies.
However, makewhatis(8), apropos(1), and man(1) depend on the following
software:
a152 73


Deployment using the integrated man(1) viewer
---------------------------------------------
This mode of deployment requires database support.  In case of
doubt, look at the section "user settings related to database
support" in the file configure.local.example.

Deployment requires the following steps:

1. Build and install mandoc as described above in steps 2 to 5
below "Installation".

2. If your system uses manpath(1), make sure it is configured
correctly, in particular, it returns all directory trees where
manual pages are installed.  If your system uses man.conf(5), make
sure it contains a "_whatdb" line for each directory tree, and the
order of these lines meets your wishes.

3. Run the command "sudo makewhatis" to build mandoc.db(5) databases
in all the directory trees configured in step 2.

At this point, your new man(1), apropos(1), and whatis(1) should work.
Otherwise, please look at <http://mdocml.bsd.lv/contact.html>, both
for help and to have these instructions improved.

Whenever installing new manual pages, re-run makewhatis(8) to update
the databases, or man(1) will not find the new pages.


Deployment using your system's native man(1) viewer
---------------------------------------------------
This mode of deployment does not require database support,
so it works even if you don't have SQLite3.

Usually, you can have your default installation and mandoc(1) work right
alongside each other by using user-specific versions of the files
mentioned below.

0. Back up each file you want to change!

1. First see whether your system has "/etc/man.conf" or "/etc/manpath.conf"
(if it has neither, but man(1) is functional, then let us know) or,
if running as your own user, a per-user override file.  In either
case, find where man(1) is executing nroff(1) or groff(1) to format
manuals.  Replace these calls with mandoc(1).

2. Then make sure that man(1) isn't running preprocessors, so you may
need to replace tbl(1), eqn(1), and similar references with cat(1).
Some man(1) implementations, like that on Mac OSX, let you run "man -d"
to see how the formatter is invoked.  Use this to test your changes.  On
Mac OS X, for instance, man(1) will prepend all files with ".ll" and
".nr" to set the terminal size, so you need to pass "tail -n+2 |
mandoc(1)" to disregard them.

3. Finally, make sure that mandoc(1) is actually being invoked instead
of cached pages being pulled up.  You can usually do this by commenting
out NOCACHE or similar.


mandoc(1) still has a long way to go in understanding non-trivial
low-level roff(7) markup embedded in some man(7) pages.  On the BSD
systems using mandoc(1), third-party software is generally vetted
on whether it may be formatted with mandoc(1).  If not, groff(1)
is pulled in as a dependency and used to install a pre-formatted
"catpage" instead of directly as manual page source.

For more background on switching operating systems to use mandoc(1)
instead of groff(1) to format manuals, see the BSDCan and EuroBSDCon
presentations by Ingo Schwarze:
<http://www.openbsd.org/papers/bsdcan11-mandoc-openbsd.html>
<http://www.openbsd.org/papers/bsdcan14-mandoc.pdf>
<http://www.openbsd.org/papers/eurobsdcon2014-mandoc-paper.pdf>
@


1.8
log
@more release preparations
@
text
@d1 1
a1 1
$Id: INSTALL,v 1.6 2014/11/30 22:47:16 schwarze Exp $
d213 2
a214 2
instead of groff(1) to format manuals, see the two BSDCan presentations
by Ingo Schwarze:
d217 1
@


1.7
log
@first cut at updating for the next release
@
text
@d158 1
a158 1
2. If you system uses manpath(1), make sure it is configured
d161 2
a162 2
sure it contains a "_whatdb" for each directory tree, and the order
of these lines meets your wishes.
d171 3
@


1.6
log
@typo; Svyatoslav Mishyn <juef at openmailbox dot org> (Crux Linux)
@
text
@d1 1
a1 1
$Id: INSTALL,v 1.5 2014/08/18 13:27:47 kristaps Exp $
d8 2
a9 3
The toolset does not yet implement man(1); that is only scheduled
for the next release, 1.13.2.  It can, however, already serve to
translate source manpages to the output displayed by man(1).
d24 1
a24 1
Ingo Schwarze, Karlsruhe, August 2014
d61 2
a62 2
installed to the intended places.  Otherwise, put some *DIR variables
into "configure.local" and go back to step 2.
d72 1
a72 1
section below.
d77 3
a79 3
The mandoc(1), preconv(1), and demandoc(1) utilities have no external
dependencies.  However, makewhatis(8) and apropos(1) depend on the
following software:
d91 1
a91 1
1.2. The fts(3) directory traversion functions.
d98 1
a98 1
1.3. Marc Espie's ohash(3) library.
d147 30
a176 5
Deployment
----------
If you want to integrate the mandoc(1) tools with your existing
man(1) system as a formatter, then contact us first: on systems without
mandoc(1) as the default, you may have your work cut out for you!
d201 1
@


1.5
log
@Notes on CGI: installation (readying cgi.h) and future plans.
@
text
@d1 1
a1 1
$Id: INSTALL,v 1.4 2014/08/16 19:00:01 schwarze Exp $
d182 1
a182 1
"catpage" intead of directly as manual page source.
@


1.4
log
@Improve build system and autodetection.
* Make ./configure standalone, that's what people expect.
* Let people write a ./configure.local from scratch, not edit existing files.
* Autodetect wchar, sqlite3, and manpath and act accordingly.
* Autodetect the need for -L/usr/local/lib and -lutil.
* Get rid of config.h.p{re,ost}, let ./configure only write what's needed.
* Let ./configure write a Makefile.local snippet, that's quite flexible.
@
text
@d1 1
a1 1
$Id: INSTALL,v 1.3 2014/08/11 01:39:00 schwarze Exp $
d45 2
a46 1
command "echo BUILD_CGI=1 > configure.local".
@


1.3
log
@Provide a fallback version of fts(3) for systems lacking it.
I chose the OpenBSD version because it apparently contains various
bugfixes that never made it into libnbcompat.  To reduce size and
complexity, i stripped out the features we don't need.
@
text
@d1 1
a1 1
$Id: INSTALL,v 1.2 2014/08/10 17:22:26 schwarze Exp $
d37 2
a38 2
The version contained in this distribution tarball is listed near
the beginning of the file "Makefile".
d44 2
a45 4
1. Decide whether you want to build the base tools mandoc(1),
preconv(1) and demandoc(1) only or whether you also want to build the
database tools apropos(1) and makewhatis(8).  For the latter,
the following dependencies are required:
d47 35
a81 1
1.1. The SQLite database system, see <http://sqlite.org/>.
d96 1
a101 30
2. If you choose to build the database tools, too, decide whether
you also want to build the CGI program, man.cgi(8).

3. Read the beginning of the file "Makefile" from "USER SETTINGS"
to "END OF USER SETTINGS" and edit it as required.  In particular,
disable "BUILD_TARGETS += db-build" if you do not want database
support or enable "BUILD_TARGETS += cgi-build" if you do want
the CGI program.

4. Run "make".  No separate "./configure" or "make depend" steps
are needed.  The former is run automatically by "make".  The latter
is a maintainer target.  If you merely want to build the released
version as opposed to doing active development, there is no need
to regenerate the dependency specifications.  Any POSIX-compatible
make, in particular both BSD make and GNU make, should work.

5. Run "make -n install" and check whether everything will be
installed to the intended places.  Otherwise, edit the *DIR variables
in the Makefile until it is.

6. Run "sudo make install".  If you intend to build a binary
package using some kind of fake root mechanism, you may need a
command like "make DESTDIR=... install".  Read the *-install targets
in the "Makefile" to understand how DESTDIR is used.

7. To set up a man.cgi(8) server, read its manual page.

8. To use mandoc(1) as your man(1) formatter, read the "Deployment"
section below.

d134 1
a134 1
1. Run "make clean".
d136 1
a136 1
2. Run "make config.h"
d144 1
a144 2
check that no expected "#define HAVE_*" lines are missing.  The
list of tests run can be found in the file "configure".
@


1.3.2.1
log
@Add INSTALL, and remove WWW gunk from the Makefile, we are not
going to rebuild the website from this version.
@
text
@d1 1
a1 1
$Id: INSTALL,v 1.3 2014/08/11 01:39:00 schwarze Exp $
d37 2
a38 11

The version contained in this distribution tarball is 1.12.4.
This is not the newest version available, you can also get 1.13.1.
Installing 1.12.4 only makes sense if all of the following conditions
hold for you:

 - You need apropos(1) and makewhatis(8) functionality.
 - You do not need the man.cgi(8) web frontend.
 - You do have the Berkeley database library, version 1.85.
 - You lack at least one of the following: the SQLite3 database
   library and/or the fts(3) file hierarchy traversal functions.
d47 21
a67 3
the Berkeley database system, version 1.85, is required.
It is installed by default on BSD systems and available as an
optional software package on other systems.
d69 4
a72 1
2. Read the beginning of the file "Makefile" from "USER SETTINGS"
d75 2
a76 1
support.
d78 1
a78 1
3. Run "make".  No separate "./configure" or "make depend" steps
d85 1
a85 1
4. Run "make -n install" and check whether everything will be
d89 1
a89 1
5. Run "sudo make install".  If you intend to build a binary
d94 3
a96 1
6. To use mandoc(1) as your man(1) formatter, read the "Deployment"
@


1.2
log
@New section about deployment by Kristaps.
New paragraph about fts(3) by me.
And various minor tweaks, some by Kristaps and some by me.
@
text
@d1 1
a1 1
$Id: INSTALL,v 1.1 2014/08/08 16:45:39 schwarze Exp $
d60 2
a61 4
A compatibility version will be bundled for 1.13.2 but is not available
yet.  If you want apropos(1) and makewhatis(8) but do not have fts(3),
please stay with mandoc 1.12.3 for now and upgrade first to 1.12.4,
then to 1.13.2 when these versionns are released.  Be careful: the
@


1.1
log
@provide some instructions for manual installation
@
text
@d1 1
a1 4
$Id$

Installing mdocml, the portable mandoc distribution
---------------------------------------------------
d3 2
d8 19
a26 1
For general information, see:  http://mdocml.bsd.lv/
d28 2
d34 1
a34 1
systems is maintained at:  http://mdocml.bsd.lv/ports.html
d36 1
a36 1
If mandoc is installed, you can check the version by typing:  mandoc -V
d38 1
a38 3
the beginning of the file "Makefile".  Regarding how packages and
ports are maintained for your operating system, please consult your
operating system documentation.
d40 3
d44 4
a47 1
To install mandoc manually, the following steps are needed:
d49 1
a49 4
1. Decide whether you want to build just the basic tools mandoc(1),
preconv(1) and demandoc(1) or whether you also want to build the
database tools apropos(1) and makewhatis(8).  For the latter, a
working installation of SQLite is required, see: http://sqlite.org/
d56 13
a68 3
problems, apropos(1) is fully usable with SQLite 3.7.5.
The database tools also require Marc Espie's ohash(3) library;
if your system does not have it, the bundled compatibility version
d80 10
a89 11
4. Run the command "make".  No separate "./configure" or "make
depend" steps are needed.  The former is run automatically by "make".
The latter is a maintainer target.  If you merely want to build the
released version as opposed to doing active development, there is
no need to regenerate the dependency specifications.  Any
POSIX-compatible make, in particular both BSD make and GNU make,
is supposed to work.

5. Run the command "make -n install" and check whether everything
will be installed to the intended places.  Otherwise, edit the *DIR
variables in the Makefile until it is.
d91 1
a91 1
6. Run "sudo make install".  Instead, if you intend to build a binary
d96 5
d102 2
d147 41
a187 9
In case you have questions or want to provide feedback, look at:
http://mdocml.bsd.lv/contact.html

Consider subscribing to the discuss@@ mailing list mentioned on that
page.  If you intend to help with the development of mandoc, consider
subscribing to the tech@@ mailing list, too.

Enjoy using the mandoc toolset!
Ingo Schwarze, Karlsruhe, August 2014
@
