head	1.6;
access;
symbols
	VERSION_1_13_3:1.5
	VERSION_1_13_2:1.5
	VERSION_1_13_1:1.5;
locks; strict;
comment	@ * @;


1.6
date	2015.11.07.14.01.16;	author schwarze;	state Exp;
branches;
next	1.5;

1.5
date	2014.08.08.23.43.47;	author schwarze;	state Exp;
branches;
next	1.4;

1.4
date	2014.06.20.02.24.40;	author schwarze;	state Exp;
branches;
next	1.3;

1.3
date	2014.06.20.02.10.05;	author schwarze;	state Exp;
branches;
next	1.2;

1.2
date	2014.01.04.14.09.28;	author schwarze;	state Exp;
branches;
next	1.1;

1.1
date	2012.06.09.11.00.13;	author kristaps;	state Exp;
branches;
next	;


desc
@@


1.6
log
@In private header files, __BEGIN_DECLS and __END_DECLS are pointless.
Because these work slightly differently on different systems,
they are becoming a maintenance burden in the portable version,
so delete them.

Besides, one of the chief design goals of the mandoc toolbox is to
make sure that nothing related to documentation requires C++.
Consequently, linking mandoc against any kind of C++ program would
defeat the purpose and is not supported.
I don't understand why kristaps@@ added them in the first place.
@
text
@/* $OpenBSD: ohash.h,v 1.2 2014/06/02 18:52:03 deraadt Exp $ */

/* Copyright (c) 1999, 2004 Marc Espie <espie@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#ifndef OHASH_H
#define OHASH_H

/* Open hashing support. 
 * Open hashing was chosen because it is much lighter than other hash
 * techniques, and more efficient in most cases.
 */

/* user-visible data structure */
struct ohash_info {
	ptrdiff_t key_offset;
	void *data;	/* user data */
	void *(*calloc)(size_t, size_t, void *);
	void (*free)(void *, void *);
	void *(*alloc)(size_t, void *);
};

struct _ohash_record;

/* private structure. It's there just so you can do a sizeof */
struct ohash {
	struct _ohash_record 	*t;
	struct ohash_info 	info;
	unsigned int 		size;
	unsigned int 		total;
	unsigned int 		deleted;
};

/* For this to be tweakable, we use small primitives, and leave part of the
 * logic to the client application.  e.g., hashing is left to the client
 * application.  We also provide a simple table entry lookup that yields
 * a hashing table index (opaque) to be used in find/insert/remove.
 * The keys are stored at a known position in the client data.
 */
void ohash_init(struct ohash *, unsigned, struct ohash_info *);
void ohash_delete(struct ohash *);

unsigned int ohash_lookup_interval(struct ohash *, const char *,
	    const char *, uint32_t);
unsigned int ohash_lookup_memory(struct ohash *, const char *,
	    size_t, uint32_t);
void *ohash_find(struct ohash *, unsigned int);
void *ohash_remove(struct ohash *, unsigned int);
void *ohash_insert(struct ohash *, unsigned int, void *);
void *ohash_first(struct ohash *, unsigned int *);
void *ohash_next(struct ohash *, unsigned int *);
unsigned int ohash_entries(struct ohash *);

void *ohash_create_entry(struct ohash_info *, const char *, const char **);
uint32_t ohash_interval(const char *, const char **);

unsigned int ohash_qlookupi(struct ohash *, const char *, const char **);
unsigned int ohash_qlookup(struct ohash *, const char *);

#endif
@


1.5
log
@Delete the __attribute__((__bounded__(...))) annotation.
That's an OpenBSD-specific gcc-4.2.1 security extension.
It's certainly a bad idea to use such stuff in a compatibility header,
as other operating systems just won't understand it.
@
text
@a51 1
__BEGIN_DECLS
d71 1
a71 1
__END_DECLS
@


1.4
log
@Merge from OpenBSD - Marc Espie improved the ohash interface:
* rename the halloc callback to calloc, provide overflow protection
* rename the hfree callback to free, drop the useless size argument
* prevent integer overflows in ohash_resize
@
text
@d59 1
a59 2
	    size_t, uint32_t)
		__attribute__ ((__bounded__(__string__,2,3)));
@


1.3
log
@sync to OpenBSD:
whitespace and comment changes, no functional change
@
text
@d30 2
a31 2
	void *(*halloc)(size_t, void *);
	void (*hfree)(void *, size_t, void *);
@


1.2
log
@Use C99 uint32_t, not BSD-style u_int32_t.
Needed for Solaris 10 as reported by Matthias Scheler.
@
text
@d1 1
a1 5
#ifndef OHASH_H
#define OHASH_H
/* $OpenBSD: ohash.h,v 1.9 2006/01/16 15:52:25 espie Exp $ */
/* ex:ts=8 sw=4: 
 */
d18 3
d26 1
d37 1
@


1.1
log
@Add a compatibility interface for ohash.
This include's espie@@'s wholesale src/lib/libc/ohash directory from OpenBSD
into compat_ohash.c (with a single copyright/license notice at the top)
and src/include/ohash.h as compat_ohash.h.
The ohash_int.h part of compat_ohash.c has been changed only in that ohash.h
points to compat_ohash.h.
Added HAVE_OHASH test (test-ohash.c) to Makefile.
In mandocdb.c and mansearch.c, check HAVE_OHASH test for inclusion.
@
text
@d68 1
a68 1
u_int32_t ohash_interval(const char *, const char **);
@
