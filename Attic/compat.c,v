head	1.6;
access;
symbols
	VERSION_1_11_4:1.5
	VERSION_1_11_3:1.5
	VERSION_1_11_2:1.5
	VERSION_1_11_1:1.5
	VERSION_1_10_10:1.5
	VERSION_1_10_9:1.5
	VERSION_1_10_8:1.5
	VERSION_1_10_7:1.5
	VERSION_1_10_6:1.5
	VERSION_1_10_5:1.5
	VERSION_1_10_5_PREPDF:1.5
	VERSION_1_10_4:1.5
	VERSION_1_10_3:1.5
	VERSION_1_10_2:1.5
	VERSION_1_10_1:1.5
	VERSION_1_9_24:1.5
	VERSION_1_9_25:1.5
	VERSION_1_9_23:1.5
	VERSION_1_9_22:1.5
	VERSION_1_9_21:1.5
	VERSION_1_9_20:1.5
	VERSION_1_9_19:1.5
	VERSION_1_9_18:1.5
	VERSION_1_9_17:1.5
	VERSION_1_9_16:1.5
	VERSION_1_9_15:1.5
	VERSION_1_9_15-pre2:1.5
	VERSION_1_9_15-pre1:1.4
	VERSION_1_9_14:1.4
	VERSION_1_9_13:1.4
	VERSION_1_9_12:1.4
	VERSION_1_9_11:1.4
	VERSION_1_9_10:1.4
	VERSION_1_9_9:1.4
	VERSION_1_9_8:1.4
	VERSION_1_9_7:1.4
	VERSION_1_9_6:1.4
	VERSION_1_9_5:1.4
	VERSION_1_9_2:1.4
	VERSION_1_9_1:1.4
	VERSION_1_9_0:1.4
	VERSION_1_8_5:1.4
	VERSION_1_8_4:1.4
	VERSION_1_8_3:1.4
	VERSION_1_8_2:1.4
	VERSION_1_8_1:1.4
	VERSION_1_8_0:1.4
	VERSION_1_7_24:1.4
	VERSION_1_7_23:1.4
	VERSION_1_7_22:1.4
	VERSION_1_7_21:1.4
	VERSION_1_7_20:1.4
	VERSION_1_7_19:1.4
	VERSION_1_7_17:1.4
	VERSION_1_7_16:1.4
	VERSION_1_7_15:1.4
	VERSION_1_7_14:1.4
	VERSION_1_7_13:1.4
	VERSION_1_7_12:1.4
	OPENBSD_CHECKIN:1.4
	VERSION_1_7_10:1.4
	VERSION_1_7_5:1.4
	VERSION_1_6_5:1.4
	VERSION_1_6_2:1.4
	VERSION_1_5_1:1.3
	VERSION_1_3_15:1.3
	VERSION_1_3_6:1.3
	VERSION_1_2_0:1.3
	VERSION_1_0_2:1.1
	VERSION_1_0_1:1.1;
locks; strict;
comment	@ * @;


1.6
date	2011.07.24.18.15.13;	author kristaps;	state dead;
branches;
next	1.5;

1.5
date	2010.01.01.17.14.26;	author kristaps;	state Exp;
branches;
next	1.4;

1.4
date	2009.03.19.16.40.49;	author kristaps;	state Exp;
branches;
next	1.3;

1.3
date	2008.12.15.02.29.44;	author kristaps;	state dead;
branches;
next	1.2;

1.2
date	2008.12.15.01.54.58;	author kristaps;	state Exp;
branches;
next	1.1;

1.1
date	2008.12.03.14.39.59;	author kristaps;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Scary-looking but otherwise harmless changes allow me to build for Windows.
That is to say, with mingw32.  This amounts to the following:

 (1) break compat.c into compat_strlcpy.c and compat_strlcat.c
 (2) add compat_getsubopt.c (from OpenBSD) and test-getsubopt.c
 (3) add test-strptime.c for HAVE_STRPTIME
 (4) add ifdef bits here and there, where necessary
 (5) remove some harmless unportable stuff (u_char, localtime_r)

I've added the appropriate mdocml.zip target to the Makefile, too.
@
text
@@


1.5
log
@Big check-in of compatibility layer.  This should work on most major architectures. Thanks to Joerg Sonnenberger.
@
text
@a0 95
/*	$OpenBSD: strlcat.c,v 1.13 2005/08/08 08:05:37 espie Exp $	*/

/*
 * Copyright (c) 1998 Todd C. Miller <Todd.Miller@@courtesan.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <sys/types.h>
#include <string.h>

int dummy; /* To prevent an empty object file */

#ifndef HAVE_STRLCAT
/*
 * Appends src to string dst of size siz (unlike strncat, siz is the
 * full size of dst, not space left).  At most siz-1 characters
 * will be copied.  Always NUL terminates (unless siz <= strlen(dst)).
 * Returns strlen(src) + MIN(siz, strlen(initial dst)).
 * If retval >= siz, truncation occurred.
 */
size_t
strlcat(char *dst, const char *src, size_t siz)
{
	char *d = dst;
	const char *s = src;
	size_t n = siz;
	size_t dlen;

	/* Find the end of dst and adjust bytes left but don't go past end */
	while (n-- != 0 && *d != '\0')
		d++;
	dlen = d - dst;
	n = siz - dlen;

	if (n == 0)
		return(dlen + strlen(s));
	while (*s != '\0') {
		if (n != 1) {
			*d++ = *s;
			n--;
		}
		s++;
	}
	*d = '\0';

	return(dlen + (s - src));	/* count does not include NUL */
}
#endif

#ifndef HAVE_STRLCPY
/*
 * Copy src to string dst of size siz.  At most siz-1 characters
 * will be copied.  Always NUL terminates (unless siz == 0).
 * Returns strlen(src); if retval >= siz, truncation occurred.
 */
size_t
strlcpy(char *dst, const char *src, size_t siz)
{
	char *d = dst;
	const char *s = src;
	size_t n = siz;

	/* Copy as many bytes as will fit */
	if (n != 0) {
		while (--n != 0) {
			if ((*d++ = *s++) == '\0')
				break;
		}
	}

	/* Not enough room in dst, add NUL and traverse rest of src */
	if (n == 0) {
		if (siz != 0)
			*d = '\0';		/* NUL-terminate dst */
		while (*s++)
			;
	}

	return(s - src - 1);	/* count does not include NUL */
}
#endif 
@


1.4
log
@Some Linux-isms.
@
text
@d18 3
d25 1
a25 1
#ifdef __linux__
d27 1
d62 1
d64 1
a94 1

@


1.3
log
@More file pruning.
@
text
@d1 90
@


1.2
log
@Purged all old files in favour of new design.  Selective reintegration.
@
text
@a0 91
/*	$OpenBSD: strlcat.c,v 1.13 2005/08/08 08:05:37 espie Exp $	*/

/*
 * Copyright (c) 1998 Todd C. Miller <Todd.Miller@@courtesan.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <string.h>

#ifdef	__linux__

/*
 * Appends src to string dst of size siz (unlike strncat, siz is the
 * full size of dst, not space left).  At most siz-1 characters
 * will be copied.  Always NUL terminates (unless siz <= strlen(dst)).
 * Returns strlen(src) + MIN(siz, strlen(initial dst)).
 * If retval >= siz, truncation occurred.
 */
size_t
strlcat(char *dst, const char *src, size_t siz)
{
	char *d = dst;
	const char *s = src;
	size_t n = siz;
	size_t dlen;

	/* Find the end of dst and adjust bytes left but don't go past end */
	while (n-- != 0 && *d != '\0')
		d++;
	dlen = d - dst;
	n = siz - dlen;

	if (n == 0)
		return(dlen + strlen(s));
	while (*s != '\0') {
		if (n != 1) {
			*d++ = *s;
			n--;
		}
		s++;
	}
	*d = '\0';

	return(dlen + (s - src));	/* count does not include NUL */
}


/*
 * Copy src to string dst of size siz.  At most siz-1 characters
 * will be copied.  Always NUL terminates (unless siz == 0).
 * Returns strlen(src); if retval >= siz, truncation occurred.
 */
size_t
strlcpy(char *dst, const char *src, size_t siz)
{
	char *d = dst;
	const char *s = src;
	size_t n = siz;

	/* Copy as many bytes as will fit */
	if (n != 0) {
		while (--n != 0) {
			if ((*d++ = *s++) == '\0')
				break;
		}
	}

	/* Not enough room in dst, add NUL and traverse rest of src */
	if (n == 0) {
		if (siz != 0)
			*d = '\0';		/* NUL-terminate dst */
		while (*s++)
			;
	}

	return(s - src - 1);	/* count does not include NUL */
}

#endif	/*__linux__*/
@


1.1
log
@Abstract ml/mlg/html/xml.
@
text
@d90 1
@
