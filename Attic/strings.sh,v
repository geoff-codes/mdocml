head	1.4;
access;
symbols
	VERSION_1_9_5:1.4
	VERSION_1_8_5:1.4
	VERSION_1_8_1:1.4
	VERSION_1_7_16:1.4
	VERSION_1_7_15:1.4
	OPENBSD_CHECKIN:1.4
	VERSION_1_6_5:1.4
	VERSION_1_5_1:1.3
	VERSION_1_4_6:1.3
	VERSION_1_4_5:1.3
	VERSION_1_4_4:1.3
	VERSION_1_4_2:1.3;
locks; strict;
comment	@# @;


1.4
date	2009.03.16.22.19.19;	author kristaps;	state dead;
branches;
next	1.3;

1.3
date	2009.03.08.19.32.03;	author kristaps;	state Exp;
branches;
next	1.2;

1.2
date	2009.03.06.14.24.49;	author kristaps;	state Exp;
branches;
next	1.1;

1.1
date	2009.03.06.14.13.47;	author kristaps;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Fixed mdoc_phrase escape handling.
Added MDOC_IGNDELIM (Pf, soon Li, etc.).
macro_constant_delimited ignargs -> argv.c parsing.
Renamed macro functions to correspond to ontologies.
`Fo' and `St' made callable (compat documented).
strings.sh deprecated (directly using CPP).
Abstracted ASCII translation into ascii.{c,in}.
ASCII table uses a self-reordering chained hashtable.
Removed old regressions.
@
text
@@


1.3
log
@Fixed strings.sh to work with NetBSD.
Fixed various lint warnings.
@
text
@a0 89
#! /bin/sh
# $Id: strings.sh,v 1.2 2009/03/06 14:24:49 kristaps Exp $

# strings.sh [-o output] name input
#
# Generate the file of strings.  This will contain the following 
# function:
#
# const char *
# mdoc_a2NAME(const char *);
#
# The input file must be tab-delimited as follows:
#
# attnam0		A longer description
# attnam1		Another longer description

input=
output=
args=`getopt o: $*`

if [ $? -ne 0 ]; then
	echo "usage: $0 [-o output] name input" 1>&2
	exit 1
fi

set -- $args

while [ $# -ge 0 ]
do
	case "$1" in
	-o)
		output="$2" ; shift; shift ;;
	--)
		shift ; break ;;
	esac
done

name=$1

if [ -z "$name" ]; then
	echo "usage: $0 [-o output] name input" 1>&2
	exit 1
fi

input=$2

if [ "$output" ]; then
	exec >$output
fi

if [ "$input" ]; then
	exec <$input
fi

cat <<!
/* 
 * DO NOT EDIT!  Automatically generated by $0.
 */
#include <stdlib.h>

#include "private.h"

const char *
mdoc_a2${name}(const char *p)
{

!

while read in ; do
	if [ -z "$in" ]; then
		continue
	fi
	if [ "#" = `echo "$in" | cut -c1` ]; then
		continue
	fi
	key=`printf "%s\n" "$in" | cut -f 1`
	val=`printf "%s\n" "$in" | cut -f 2- | sed 's!^[ 	]*!!'`
	cat <<!
	if (xstrcmp(p, "$key"))
		return("$val");
!
done

cat <<!
	
	/* No keys found. */
	return(NULL);
}
!
@


1.2
log
@Documented the strings script.
@
text
@d2 1
a2 1
# $Id: strings.sh,v 1.1 2009/03/06 14:13:47 kristaps Exp $
d48 1
a48 1
	exec 1<>$output
d52 1
a52 1
	exec 0<>$input
d70 6
a75 3
	[ -z "$in" ] && continue;
	[ "#" == `echo "$in" | cut -c1` ] && continue;

@


1.1
log
@Strings abstracted into dynamically-created C files.
Added -V option.
Deprecated README files.
@
text
@d2 1
a2 1
# $Id$
d70 3
@
