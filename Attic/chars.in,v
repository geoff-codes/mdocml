head	1.53;
access;
symbols
	VERSION_1_13_3:1.52
	VERSION_1_13_2:1.49
	VERSION_1_12_4:1.46
	VERSION_1_13_1:1.46
	VERSION_1_12_3:1.43
	VERSION_1_12_2:1.43
	VERSION_1_12:1.46.0.2
	VERSION_1_12_1:1.42
	VERSION_1_12_0:1.42
	VERSION_1_11_7:1.40
	VERSION_1_11_6:1.40
	VERSION_1_11_5:1.40
	VERSION_1_11_4:1.39
	VERSION_1_11_3:1.39
	VERSION_1_11_2:1.37
	VERSION_1_11_1:1.36
	VERSION_1_10_10:1.36
	VERSION_1_10_9:1.35
	VERSION_1_10_8:1.35
	VERSION_1_10_7:1.35
	VERSION_1_10_6:1.35
	VERSION_1_10_5:1.31
	VERSION_1_10_5_PREPDF:1.29
	VERSION_1_10_4:1.25
	VERSION_1_10_3:1.25
	VERSION_1_10_2:1.25
	VERSION_1_10_1:1.24
	VERSION_1_9_24:1.22
	VERSION_1_9_25:1.22
	VERSION_1_9_23:1.22
	VERSION_1_9_22:1.22
	VERSION_1_9_21:1.22
	VERSION_1_9_20:1.21
	VERSION_1_9_19:1.21
	VERSION_1_9_18:1.21
	VERSION_1_9_17:1.21
	VERSION_1_9_16:1.20
	VERSION_1_9_15:1.20
	VERSION_1_9_15-pre2:1.19
	VERSION_1_9_15-pre1:1.19
	VERSION_1_9_14:1.19
	VERSION_1_9_13:1.18
	VERSION_1_9_12:1.18
	VERSION_1_9_11:1.18
	VERSION_1_9_10:1.18
	VERSION_1_9_9:1.18
	VERSION_1_9_8:1.18
	VERSION_1_9_7:1.18
	VERSION_1_9_6:1.18
	VERSION_1_9_5:1.6;
locks; strict;
comment	@# @;


1.53
date	2015.10.13.22.59.54;	author schwarze;	state dead;
branches;
next	1.52;

1.52
date	2015.02.17.20.37.16;	author schwarze;	state Exp;
branches;
next	1.51;

1.51
date	2014.12.16.19.50.03;	author schwarze;	state Exp;
branches;
next	1.50;

1.50
date	2014.12.15.19.42.21;	author schwarze;	state Exp;
branches;
next	1.49;

1.49
date	2014.11.06.22.28.36;	author schwarze;	state Exp;
branches;
next	1.48;

1.48
date	2014.10.29.03.35.09;	author schwarze;	state Exp;
branches;
next	1.47;

1.47
date	2014.10.28.02.43.59;	author schwarze;	state Exp;
branches;
next	1.46;

1.46
date	2014.04.20.16.46.04;	author schwarze;	state Exp;
branches;
next	1.45;

1.45
date	2014.03.05.23.14.46;	author schwarze;	state Exp;
branches;
next	1.44;

1.44
date	2014.01.22.20.58.39;	author schwarze;	state Exp;
branches;
next	1.43;

1.43
date	2013.06.20.22.39.30;	author schwarze;	state Exp;
branches;
next	1.42;

1.42
date	2011.10.02.10.02.26;	author kristaps;	state Exp;
branches;
next	1.41;

1.41
date	2011.09.18.14.14.15;	author schwarze;	state Exp;
branches;
next	1.40;

1.40
date	2011.07.22.14.15.15;	author kristaps;	state Exp;
branches;
next	1.39;

1.39
date	2011.05.24.21.40.14;	author kristaps;	state Exp;
branches;
next	1.38;

1.38
date	2011.05.24.21.24.16;	author kristaps;	state Exp;
branches;
next	1.37;

1.37
date	2011.04.20.22.50.22;	author kristaps;	state Exp;
branches;
next	1.36;

1.36
date	2011.03.16.22.49.55;	author schwarze;	state Exp;
branches;
next	1.35;

1.35
date	2010.09.15.13.10.30;	author kristaps;	state Exp;
branches;
next	1.34;

1.34
date	2010.08.29.11.36.49;	author kristaps;	state Exp;
branches;
next	1.33;

1.33
date	2010.08.16.09.51.17;	author kristaps;	state Exp;
branches;
next	1.32;

1.32
date	2010.07.31.23.52.58;	author schwarze;	state Exp;
branches;
next	1.31;

1.31
date	2010.07.26.13.59.00;	author kristaps;	state Exp;
branches;
next	1.30;

1.30
date	2010.07.26.10.20.06;	author kristaps;	state Exp;
branches;
next	1.29;

1.29
date	2010.07.19.10.49.30;	author kristaps;	state Exp;
branches;
next	1.28;

1.28
date	2010.07.18.18.04.25;	author kristaps;	state Exp;
branches;
next	1.27;

1.27
date	2010.07.17.09.21.39;	author kristaps;	state Exp;
branches;
next	1.26;

1.26
date	2010.07.16.22.33.30;	author kristaps;	state Exp;
branches;
next	1.25;

1.25
date	2010.06.19.20.46.27;	author kristaps;	state Exp;
branches;
next	1.24;

1.24
date	2010.06.01.11.47.28;	author kristaps;	state Exp;
branches;
next	1.23;

1.23
date	2010.05.16.01.35.37;	author schwarze;	state Exp;
branches;
next	1.22;

1.22
date	2010.03.30.19.20.33;	author kristaps;	state Exp;
branches;
next	1.21;

1.21
date	2010.03.23.13.25.01;	author kristaps;	state Exp;
branches;
next	1.20;

1.20
date	2010.01.05.19.51.10;	author kristaps;	state Exp;
branches;
next	1.19;

1.19
date	2009.11.05.07.21.02;	author kristaps;	state Exp;
branches;
next	1.18;

1.18
date	2009.09.24.11.55.28;	author kristaps;	state Exp;
branches;
next	1.17;

1.17
date	2009.09.23.11.02.21;	author kristaps;	state Exp;
branches;
next	1.16;

1.16
date	2009.09.23.09.10.52;	author kristaps;	state Exp;
branches;
next	1.15;

1.15
date	2009.09.23.09.06.44;	author kristaps;	state Exp;
branches;
next	1.14;

1.14
date	2009.09.23.01.04.11;	author kristaps;	state Exp;
branches;
next	1.13;

1.13
date	2009.09.23.00.03.45;	author kristaps;	state Exp;
branches;
next	1.12;

1.12
date	2009.09.22.23.34.14;	author kristaps;	state Exp;
branches;
next	1.11;

1.11
date	2009.09.22.23.15.58;	author kristaps;	state Exp;
branches;
next	1.10;

1.10
date	2009.09.22.16.10.52;	author kristaps;	state Exp;
branches;
next	1.9;

1.9
date	2009.09.22.10.11.57;	author kristaps;	state Exp;
branches;
next	1.8;

1.8
date	2009.09.22.10.07.01;	author kristaps;	state Exp;
branches;
next	1.7;

1.7
date	2009.09.21.23.12.08;	author kristaps;	state Exp;
branches;
next	1.6;

1.6
date	2009.09.21.14.40.31;	author kristaps;	state Exp;
branches;
next	1.5;

1.5
date	2009.09.20.19.25.06;	author kristaps;	state Exp;
branches;
next	1.4;

1.4
date	2009.09.20.17.24.57;	author kristaps;	state Exp;
branches;
next	1.3;

1.3
date	2009.09.17.23.35.41;	author kristaps;	state Exp;
branches;
next	1.2;

1.2
date	2009.09.17.08.21.42;	author kristaps;	state Exp;
branches;
next	1.1;

1.1
date	2009.09.17.07.41.28;	author kristaps;	state Exp;
branches;
next	;


desc
@@


1.53
log
@Major character table cleanup:
* Use ohash(3) rather than a hand-rolled hash table.
* Make the character table static in the chars.c module:
There is no need to pass a pointer around, we most certainly
never want to use two different character tables concurrently.
* No need to keep the characters in a separate file chars.in;
that merely encourages downstream porters to mess with them.
* Sort the characters to agree with the mandoc_chars(7) manual page.
* Specify Unicode codepoints in hex, not decimal (that's the detail
that originally triggered this patch).
No functional change, minus 100 LOC, and i don't see a performance change.
@
text
@@


1.52
log
@Render \(lq and \(rq as '"' in -Tascii mode but leave the rendering
of .Do/.Dc, .Dq, .Lb, and .St untouched.
Reduces groff-mandoc differences in OpenBSD base by about 7%.
Reminded of the issue by naddy@@.
@
text
@a0 404
/*	$Id: chars.in,v 1.51 2014/12/16 19:50:03 schwarze Exp $ */
/*
 * Copyright (c) 2009, 2010, 2011 Kristaps Dzonsons <kristaps@@bsd.lv>
 * Copyright (c) 2014 Ingo Schwarze <schwarze@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

/*
 * The ASCII translation tables.
 *
 * The left-hand side corresponds to the input sequence (\x, \(xx, \*(xx
 * and so on) whose length is listed second element.  The right-hand
 * side is what's produced by the front-end, with the fourth element
 * being its length.
 *
 * XXX - C-escape strings!
 * XXX - update LINES_MAX if adding more!
 */

/* Special break control characters. */
static const char ascii_nbrsp[2] = { ASCII_NBRSP, '\0' };
static const char ascii_break[2] = { ASCII_BREAK, '\0' };

CHAR_TBL_START

/* Spacing. */
CHAR(" ",			ascii_nbrsp,	160)
CHAR("~",			ascii_nbrsp,	160)
CHAR("0",			" ",		8194)
CHAR("|",			"",		0)
CHAR("^",			"",		0)
CHAR("&",			"",		0)
CHAR("%",			"",		0)
CHAR(":",			ascii_break,	0)
/* XXX The following three do not really belong into this file. */
CHAR("t",			"",		0)
CHAR("c",			"",		0)
CHAR("}",			"",		0)

/* Accents. */
CHAR("a\"",			"\"",		733)
CHAR("a-",			"-",		175)
CHAR("a.",			".",		729)
CHAR("a^",			"^",		94)
CHAR("\'",			"\'",		180)
CHAR("aa",			"\'",		180)
CHAR("ga",			"`",		96)
CHAR("`",			"`",		96)
CHAR("ab",			"'\b`",		728)
CHAR("ac",			",",		184)
CHAR("ad",			"\"",		168)
CHAR("ah",			"v",		711)
CHAR("ao",			"o",		730)
CHAR("a~",			"~",		126)
CHAR("ho",			",",		731)
CHAR("ha",			"^",		94)
CHAR("ti",			"~",		126)

/* Quotes. */
CHAR("Bq",			",,",		8222)
CHAR("bq",			",",		8218)
CHAR("lq",			"\"",		8220)
CHAR("rq",			"\"",		8221)
CHAR("Lq",			"``",		8220)
CHAR("Rq",			"''",		8221)
CHAR("oq",			"`",		8216)
CHAR("cq",			"\'",		8217)
CHAR("aq",			"\'",		39)
CHAR("dq",			"\"",		34)
CHAR("Fo",			"<<",		171)
CHAR("Fc",			">>",		187)
CHAR("fo",			"<",		8249)
CHAR("fc",			">",		8250)

/* Brackets. */
CHAR("lB",			"[",		91)
CHAR("rB",			"]",		93)
CHAR("lC",			"{",		123)
CHAR("rC",			"}",		125)
CHAR("la",			"<",		10216)
CHAR("ra",			">",		10217)
CHAR("bv",			"|",		9130)
CHAR("braceex",			"|",		9130)
CHAR("bracketlefttp",		"|",		9121)
CHAR("bracketleftbt",		"|",		9123)
CHAR("bracketleftex",		"|",		9122)
CHAR("bracketrighttp",		"|",		9124)
CHAR("bracketrightbt",		"|",		9126)
CHAR("bracketrightex",		"|",		9125)
CHAR("lt",			",-",		9127)
CHAR("bracelefttp",		",-",		9127)
CHAR("lk",			"{",		9128)
CHAR("braceleftmid",		"{",		9128)
CHAR("lb",			"`-",		9129)
CHAR("braceleftbt",		"`-",		9129)
CHAR("braceleftex",		"|",		9130)
CHAR("rt",			"-.",		9131)
CHAR("bracerighttp",		"-.",		9131)
CHAR("rk",			"}",		9132)
CHAR("bracerightmid",		"}",		9132)
CHAR("rb",			"-\'",		9133)
CHAR("bracerightbt",		"-\'",		9133)
CHAR("bracerightex",		"|",		9130)
CHAR("parenlefttp",		"/",		9115)
CHAR("parenleftbt",		"\\",		9117)
CHAR("parenleftex",		"|",		9116)
CHAR("parenrighttp",		"\\",		9118)
CHAR("parenrightbt",		"/",		9120)
CHAR("parenrightex",		"|",		9119)

/* Greek characters. */
CHAR("*A",			"A",		913)
CHAR("*B",			"B",		914)
CHAR("*G",			"G",		915)
CHAR("*D",			"_\b/_\b\\",	916)
CHAR("*E",			"E",		917)
CHAR("*Z",			"Z",		918)
CHAR("*Y",			"H",		919)
CHAR("*H",			"-\bO",		920)
CHAR("*I",			"I",		921)
CHAR("*K",			"K",		922)
CHAR("*L",			"/\\",		923)
CHAR("*M",			"M",		924)
CHAR("*N",			"N",		925)
CHAR("*C",			"_\bH",		926)
CHAR("*O",			"O",		927)
CHAR("*P",			"TT",		928)
CHAR("*R",			"P",		929)
CHAR("*S",			"S",		931)
CHAR("*T",			"T",		932)
CHAR("*U",			"Y",		933)
CHAR("*F",			"I\bO",		934)
CHAR("*X",			"X",		935)
CHAR("*Q",			"I\bY",		936)
CHAR("*W",			"_\bO",		937)
CHAR("*a",			"a",		945)
CHAR("*b",			"B",		946)
CHAR("*g",			"y",		947)
CHAR("*d",			"d",		948)
CHAR("*e",			"e",		949)
CHAR("*z",			",\bC",		950)
CHAR("*y",			"n",		951)
CHAR("*h",			"-\b0",		952)
CHAR("*i",			"i",		953)
CHAR("*k",			"k",		954)
CHAR("*l",			">\b\\",	955)
CHAR("*m",			",\bu",		956)
CHAR("*n",			"v",		957)
CHAR("*c",			",\bE",		958)
CHAR("*o",			"o",		959)
CHAR("*p",			"-\bn",		960)
CHAR("*r",			"p",		961)
CHAR("*s",			"-\bo",		963)
CHAR("*t",			"~\bt",		964)
CHAR("*u",			"u",		965)
CHAR("*f",			"|\bo",		981)
CHAR("*x",			"x",		967)
CHAR("*q",			"|\bu",		968)
CHAR("*w",			"w",		969)
CHAR("+h",			"-\b0",		977)
CHAR("+f",			"|\bo",		966)
CHAR("+p",			"-\bw",		982)
CHAR("+e",			"e",		1013)
CHAR("ts",			"s",		962)

/* Accented letters. */
CHAR(",C",			",\bC",		199)
CHAR(",c",			",\bc",		231)
CHAR("/L",			"/\bL",		321)
CHAR("/O",			"/\bO",		216)
CHAR("/l",			"/\bl",		322)
CHAR("/o",			"/\bo",		248)
CHAR("oA",			"o\bA",		197)
CHAR("oa",			"o\ba",		229)
CHAR(":A",			"\"\bA",	196)
CHAR(":E",			"\"\bE",	203)
CHAR(":I",			"\"\bI",	207)
CHAR(":O",			"\"\bO",	214)
CHAR(":U",			"\"\bU",	220)
CHAR(":a",			"\"\ba",	228)
CHAR(":e",			"\"\be",	235)
CHAR(":i",			"\"\bi",	239)
CHAR(":o",			"\"\bo",	246)
CHAR(":u",			"\"\bu",	252)
CHAR(":y",			"\"\by",	255)
CHAR("'A",			"'\bA",		193)
CHAR("'E",			"'\bE",		201)
CHAR("'I",			"'\bI",		205)
CHAR("'O",			"'\bO",		211)
CHAR("'U",			"'\bU",		218)
CHAR("'a",			"'\ba",		225)
CHAR("'e",			"'\be",		233)
CHAR("'i",			"'\bi",		237)
CHAR("'o",			"'\bo",		243)
CHAR("'u",			"'\bu",		250)
CHAR("^A",			"^\bA",		194)
CHAR("^E",			"^\bE",		202)
CHAR("^I",			"^\bI",		206)
CHAR("^O",			"^\bO",		212)
CHAR("^U",			"^\bU",		219)
CHAR("^a",			"^\ba",		226)
CHAR("^e",			"^\be",		234)
CHAR("^i",			"^\bi",		238)
CHAR("^o",			"^\bo",		244)
CHAR("^u",			"^\bu",		251)
CHAR("`A",			"`\bA",		192)
CHAR("`E",			"`\bE",		200)
CHAR("`I",			"`\bI",		204)
CHAR("`O",			"`\bO",		210)
CHAR("`U",			"`\bU",		217)
CHAR("`a",			"`\ba",		224)
CHAR("`e",			"`\be",		232)
CHAR("`i",			"`\bi",		236)
CHAR("`o",			"`\bo",		242)
CHAR("`u",			"`\bu",		249)
CHAR("~A",			"~\bA",		195)
CHAR("~N",			"~\bN",		209)
CHAR("~O",			"~\bO",		213)
CHAR("~a",			"~\ba",		227)
CHAR("~n",			"~\bn",		241)
CHAR("~o",			"~\bo",		245)

/* Arrows and lines. */
CHAR("<-",			"<-",		8592)
CHAR("->",			"->",		8594)
CHAR("<>",			"<->",		8596)
CHAR("da",			"|\bv",		8595)
CHAR("ua",			"|\b^",		8593)
CHAR("va",			"^v",		8597)
CHAR("lA",			"<=",		8656)
CHAR("rA",			"=>",		8658)
CHAR("hA",			"<=>",		8660)
CHAR("dA",			"=\bv",		8659)
CHAR("uA",			"=\b^",		8657)
CHAR("vA",			"^=v",		8661)

/* Logic. */
CHAR("AN",			"^",		8743)
CHAR("OR",			"v",		8744)
CHAR("no",			"~",		172)
CHAR("tno",			"~",		172)
CHAR("te",			"3",		8707)
CHAR("fa",			"-\bV",		8704)
CHAR("st",			"-)",		8715)
CHAR("tf",			".:.",		8756)
CHAR("3d",			".:.",		8756)
CHAR("or",			"|",		124)

/* Mathematicals. */
CHAR("pl",			"+",		43)
CHAR("mi",			"-",		8722)
CHAR("-",			"-",		45)
CHAR("-+",			"-+",		8723)
CHAR("+-",			"+-",		177)
CHAR("t+-",			"+-",		177)
CHAR("pc",			".",		183)
CHAR("md",			".",		8901)
CHAR("mu",			"x",		215)
CHAR("tmu",			"x",		215)
CHAR("c*",			"O\bx",		8855)
CHAR("c+",			"O\b+",		8853)
CHAR("di",			"-:-",		247)
CHAR("tdi",			"-:-",		247)
CHAR("f/",			"/",		8260)
CHAR("**",			"*",		8727)
CHAR("<=",			"<=",		8804)
CHAR(">=",			">=",		8805)
CHAR("<<",			"<<",		8810)
CHAR(">>",			">>",		8811)
CHAR("eq",			"=",		61)
CHAR("!=",			"!=",		8800)
CHAR("==",			"==",		8801)
CHAR("ne",			"!==",		8802)
CHAR("=~",			"=~",		8773)
CHAR("|=",			"-~",		8771)
CHAR("ap",			"~",		8764)
CHAR("~~",			"~~",		8776)
CHAR("~=",			"~=",		8776)
CHAR("pt",			"oc",		8733)
CHAR("es",			"{}",		8709)
CHAR("mo",			"E",		8712)
CHAR("nm",			"!E",		8713)
CHAR("sb",			"(=",		8834)
CHAR("nb",			"(!=",		8836)
CHAR("sp",			"=)",		8835)
CHAR("nc",			"!=)",		8837)
CHAR("ib",			"(=\b_",	8838)
CHAR("ip",			"=\b_)",	8839)
CHAR("ca",			"(^)",		8745)
CHAR("cu",			"U",		8746)
CHAR("/_",			"_\b/",		8736)
CHAR("pp",			"_\b|",		8869)
CHAR("is",			"'\b,\bI",	8747)
CHAR("integral",		"'\b,\bI",	8747)
CHAR("sum",			"E",		8721)
CHAR("product",			"TT",		8719)
CHAR("coproduct",		"U",		8720)
CHAR("gr",			"V",		8711)
CHAR("sr",			"\\/",		8730)
CHAR("sqrt",			"\\/",		8730)
CHAR("lc",			"|~",		8968)
CHAR("rc",			"~|",		8969)
CHAR("lf",			"|_",		8970)
CHAR("rf",			"_|",		8971)
CHAR("if",			"oo",		8734)
CHAR("Ah",			"N",		8501)
CHAR("Im",			"I",		8465)
CHAR("Re",			"R",		8476)
CHAR("pd",			"a",		8706)
CHAR("-h",			"/h",		8463)
CHAR("12",			"1/2",		189)
CHAR("14",			"1/4",		188)
CHAR("34",			"3/4",		190)

/* Ligatures. */
CHAR("ff",			"ff",		64256)
CHAR("fi",			"fi",		64257)
CHAR("fl",			"fl",		64258)
CHAR("Fi",			"ffi",		64259)
CHAR("Fl",			"ffl",		64260)
CHAR("AE",			"AE",		198)
CHAR("ae",			"ae",		230)
CHAR("OE",			"OE",		338)
CHAR("oe",			"oe",		339)
CHAR("ss",			"ss",		223)
CHAR("IJ",			"IJ",		306)
CHAR("ij",			"ij",		307)

/* Special letters. */
CHAR("-D",			"-\bD",		208)
CHAR("Sd",			"d",		240)
CHAR("TP",			"Th",		222)
CHAR("Tp",			"th",		254)
CHAR(".i",			"i",		305)
CHAR(".j",			"j",		567)

/* Currency. */
CHAR("Do",			"$",		36)
CHAR("ct",			"/\bc",		162)
CHAR("Eu",			"EUR",		8364)
CHAR("eu",			"EUR",		8364)
CHAR("Ye",			"=\bY",		165)
CHAR("Po",			"GBP",		163)
CHAR("Cs",			"o\bx",		164)
CHAR("Fn",			",\bf",		402)

/* Lines. */
CHAR("ba",			"|",		124)
CHAR("br",			"|",		9474)
CHAR("ul",			"_",		95)
CHAR("rn",			"-",		8254)
CHAR("bb",			"|",		166)
CHAR("sl",			"/",		47)
CHAR("rs",			"\\",		92)

/* Text markers. */
CHAR("ci",			"O",		9675)
CHAR("bu",			"+\bo",		8226)
CHAR("dd",			"|\b=",		8225)
CHAR("dg",			"|\b-",		8224)
CHAR("lz",			"<>",		9674)
CHAR("sq",			"[]",		9633)
CHAR("ps",			"<par>",	182)
CHAR("sc",			"<sec>",	167)
CHAR("lh",			"<=",		9756)
CHAR("rh",			"=>",		9758)
CHAR("at",			"@@",		64)
CHAR("sh",			"#",		35)
CHAR("CR",			"_|",		8629)
CHAR("OK",			"\\/",		10003)

/* Legal symbols. */
CHAR("co",			"(C)",		169)
CHAR("rg",			"(R)",		174)
CHAR("tm",			"tm",		8482)

/* Punctuation. */
CHAR(".",			".",		46)
CHAR("r!",			"!",		161)
CHAR("r?",			"?",		191)
CHAR("em",			"--",		8212)
CHAR("en",			"-",		8211)
CHAR("hy",			"-",		8208)
CHAR("e",			"\\",		92)

/* Units. */
CHAR("de",			"<deg>",	176)
CHAR("%0",			"%o",		8240)
CHAR("fm",			"\'",		8242)
CHAR("sd",			"''",		8243)
CHAR("mc",			",\bu",		181)

CHAR_TBL_END
@


1.51
log
@correct -Tutf8 and -Thtml rendering of \(~=
and change the name of \(-~ to \(|= to agree with groff;
difference found by Carsten dot Kunze at arcor dot de
@
text
@d1 1
a1 1
/*	$Id: chars.in,v 1.50 2014/12/15 19:42:21 schwarze Exp $ */
d73 4
a76 2
CHAR("lq",			"``",		8220)
CHAR("rq",			"\'\'",		8221)
@


1.50
log
@correct some character names to match groff;
reported by Carsten dot Kunze at arcor dot de
@
text
@d1 1
a1 1
/*	$Id: chars.in,v 1.49 2014/11/06 22:28:36 schwarze Exp $ */
d284 1
a284 1
CHAR("-~",			"-~",		8771)
d287 1
a287 1
CHAR("~=",			"~=",		8780)
@


1.49
log
@Let -Tascii \(bu (bullet) output agree with groff;
this is now possible because -Tps now handles backspace overstriking.
@
text
@d1 1
a1 1
/*	$Id: chars.in,v 1.48 2014/10/29 03:35:09 schwarze Exp $ */
d94 1
a94 1
CHAR("bracketleftbp",		"|",		9123)
d97 1
a97 1
CHAR("bracketrightbp",		"|",		9126)
d104 1
a104 1
CHAR("braceleftbp",		"`-",		9129)
d111 1
a111 1
CHAR("bracerightbp",		"-\'",		9133)
d114 1
a114 1
CHAR("parenleftbp",		"\\",		9117)
d117 1
a117 1
CHAR("parenrightbp",		"/",		9120)
d360 1
a360 1
CHAR("rl",			"-",		8254)
@


1.48
log
@Some fine tuning of console rendering of named special characters.
Correct ASCII rendering: \(lb \(<> \(sd
Make ASCII rendering agree with groff, using backspace overstrike:
\(da \(ua \(dA \(uA \(fa \(c* \(c+ \(ib \(ip \(/_ \(pp \(is \(dd \(dg
@
text
@d1 1
a1 1
/*	$Id: chars.in,v 1.47 2014/10/28 02:43:59 schwarze Exp $ */
d367 1
a367 1
CHAR("bu",			"o",		8226)
@


1.47
log
@Refine -Tascii rendering of Unicode characters, mostly to better agree
with groff, in particular in cases where groff uses backspace overstrike.
In two cases, agreement is impossible because groff clobbers the
previous line: \(*G \(*S
In a number of cases, groff rendering is so misleading that i chose
to render differently: \(Sd \(TP \(Tp \(Po \(ps \(sc \(r! \(r? \(de
While here, also correct the \(la and \(ra Unicode code points.
@
text
@d1 1
a1 1
/*	$Id: chars.in,v 1.46 2014/04/20 16:46:04 schwarze Exp $ */
d103 1
a103 1
CHAR("lb",			",-",		9129)
d235 3
a237 3
CHAR("<>",			"<>",		8596)
CHAR("da",			"v",		8595)
CHAR("ua",			"^",		8593)
d242 2
a243 2
CHAR("dA",			"v",		8659)
CHAR("uA",			"^",		8657)
d252 1
a252 1
CHAR("fa",			"V",		8704)
d269 2
a270 2
CHAR("c*",			"x",		8855)
CHAR("c+",			"+",		8853)
d296 2
a297 2
CHAR("ib",			"(=",		8838)
CHAR("ip",			"=)",		8839)
d300 4
a303 4
CHAR("/_",			"/_",		8736)
CHAR("pp",			"_|_",		8869)
CHAR("is",			"I",		8747)
CHAR("integral",		"I",		8747)
d366 1
a366 1
CHAR("ci",			"o",		9675)
d368 2
a369 2
CHAR("dd",			"=",		8225)
CHAR("dg",			"-",		8224)
d399 1
a399 1
CHAR("sd",			"\"",		8243)
@


1.46
log
@KNF: case (FOO):  ->  case FOO:, remove /* LINTED */ and /* ARGSUSED */,
remove trailing whitespace and blanks before tabs, improve some indenting;
no functional change
@
text
@d1 1
a1 1
/*	$Id: chars.in,v 1.45 2014/03/05 23:14:46 schwarze Exp $ */
d60 1
a60 1
CHAR("ab",			"`",		728)
d89 2
a90 2
CHAR("la",			"<",		60)
CHAR("ra",			">",		62)
d123 2
a124 2
CHAR("*G",			"|",		915)
CHAR("*D",			"/\\",		916)
d128 1
a128 1
CHAR("*H",			"O",		920)
d134 1
a134 1
CHAR("*C",			"H",		926)
d138 1
a138 1
CHAR("*S",			">",		931)
d141 1
a141 1
CHAR("*F",			"O_",		934)
d143 2
a144 2
CHAR("*Q",			"Y",		936)
CHAR("*W",			"O",		937)
d150 1
a150 1
CHAR("*z",			"C",		950)
d152 1
a152 1
CHAR("*h",			"0",		952)
d155 2
a156 2
CHAR("*l",			"\\",		955)
CHAR("*m",			"u",		956)
d158 1
a158 1
CHAR("*c",			"E",		958)
d160 1
a160 1
CHAR("*p",			"n",		960)
d162 2
a163 2
CHAR("*s",			"o",		963)
CHAR("*t",			"t",		964)
d165 1
a165 1
CHAR("*f",			"o",		981)
d167 1
a167 1
CHAR("*q",			"u",		968)
d169 3
a171 3
CHAR("+h",			"0",		977)
CHAR("+f",			"o",		966)
CHAR("+p",			"w",		982)
d176 55
a230 55
CHAR(",C",			"C",		199)
CHAR(",c",			"c",		231)
CHAR("/L",			"L",		321)
CHAR("/O",			"O",		216)
CHAR("/l",			"l",		322)
CHAR("/o",			"o",		248)
CHAR("oA",			"A",		197)
CHAR("oa",			"a",		229)
CHAR(":A",			"A",		196)
CHAR(":E",			"E",		203)
CHAR(":I",			"I",		207)
CHAR(":O",			"O",		214)
CHAR(":U",			"U",		220)
CHAR(":a",			"a",		228)
CHAR(":e",			"e",		235)
CHAR(":i",			"i",		239)
CHAR(":o",			"o",		246)
CHAR(":u",			"u",		252)
CHAR(":y",			"y",		255)
CHAR("\'A",			"A",		193)
CHAR("\'E",			"E",		201)
CHAR("\'I",			"I",		205)
CHAR("\'O",			"O",		211)
CHAR("\'U",			"U",		218)
CHAR("\'a",			"a",		225)
CHAR("\'e",			"e",		233)
CHAR("\'i",			"i",		237)
CHAR("\'o",			"o",		243)
CHAR("\'u",			"u",		250)
CHAR("^A",			"A",		194)
CHAR("^E",			"E",		202)
CHAR("^I",			"I",		206)
CHAR("^O",			"O",		212)
CHAR("^U",			"U",		219)
CHAR("^a",			"a",		226)
CHAR("^e",			"e",		234)
CHAR("^i",			"i",		238)
CHAR("^o",			"o",		244)
CHAR("^u",			"u",		251)
CHAR("`A",			"A",		192)
CHAR("`E",			"E",		200)
CHAR("`I",			"I",		204)
CHAR("`O",			"O",		210)
CHAR("`U",			"U",		217)
CHAR("`a",			"a",		224)
CHAR("`e",			"e",		232)
CHAR("`i",			"i",		236)
CHAR("`o",			"o",		242)
CHAR("`u",			"u",		249)
CHAR("~A",			"A",		195)
CHAR("~N",			"N",		209)
CHAR("~O",			"O",		213)
CHAR("~a",			"a",		227)
CHAR("~n",			"n",		241)
CHAR("~o",			"o",		245)
d339 4
a342 4
CHAR("-D",			"D",		208)
CHAR("Sd",			"o",		240)
CHAR("TP",			"b",		222)
CHAR("Tp",			"b",		254)
d348 1
a348 1
CHAR("ct",			"c",		162)
d351 4
a354 4
CHAR("Ye",			"Y",		165)
CHAR("Po",			"L",		163)
CHAR("Cs",			"x",		164)
CHAR("Fn",			"f",		402)
d372 2
a373 2
CHAR("ps",			"9|",		182)
CHAR("sc",			"S",		167)
d388 2
a389 2
CHAR("r!",			"i",		161)
CHAR("r?",			"c",		191)
d396 1
a396 1
CHAR("de",			"o",		176)
d400 1
a400 1
CHAR("mc",			"mu",		181)
@


1.45
log
@In -Tutf8 mode, mandoc_char(7) named accent character escape sequences
have to render as non-combining accents; if you want combining accents,
you have to explicitly specify them using the Unicode character numbers
for combining accents, or you can use character escape sequences for
accented characters.  This lets mandoc behave like groff.

Additionally, both the Ossanna/Kernighan/Ritter troff manual and
the GNU troff manual say that \' and \` are equivalent to \(aa and
\(ga, respectively, so do the same for these.  This mitigates issues
with man(7) code autogenerated by texinfo2man(1), which mistranslates
TeX ` and ' to \` and \' instead of \(oq and \(cq as reported by
sthen@@ and as analyzed by bentley@@.
@
text
@d1 1
a1 1
/*	$Id: chars.in,v 1.44 2014/01/22 20:58:39 schwarze Exp $ */
d20 1
a20 1
 * The ASCII translation tables.  
@


1.44
log
@Implement the \: (optional line break) escape sequence,
documented in the Ossanna-Kernighan-Ritter troff manual
and also supported by groff.

Missing feature reported by Steffen Nurpmeso <sdaoden at gmail dot com>.
@
text
@d1 1
a1 1
/*	$Id: chars.in,v 1.43 2013/06/20 22:39:30 schwarze Exp $ */
d52 1
a52 1
CHAR("a\"",			"\"",		779)
d55 8
a62 8
CHAR("a^",			"^",		770)
CHAR("\'",			"\'",		769)
CHAR("aa",			"\'",		769)
CHAR("ga",			"`",		768)
CHAR("`",			"`",		768)
CHAR("ab",			"`",		774)
CHAR("ac",			",",		807)
CHAR("ad",			"\"",		776)
d65 2
a66 2
CHAR("a~",			"~",		771)
CHAR("ho",			",",		808)
@


1.43
log
@Improve handling of the roff(7) "\t" escape sequence:
* Parsing macro arguments has to be done in copy mode,
  which implies replacing "\t" by a literal tab character.
* Otherwise, render "\t" as the empty string, not as a 't' character.

This fixes formatting of the distfile example in the oldrdist(1) manual.
This also shows up in the unzip(1) manual as one of several issues
preventing the removal of USE_GROFF from the archivers/unzip port.
Thanks to espie@@ for attracting my attention to the unzip(1) manual.
@
text
@d1 1
a1 1
/*	$Id: chars.in,v 1.42 2011/10/02 10:02:26 kristaps Exp $ */
d4 1
d31 1
a31 1
/* Non-breaking, non-collapsing space uses unit separator. */
d33 1
a37 2
CHAR("c",			"",		0)
CHAR("0",			" ",		8194)
d40 4
d45 4
a48 3
CHAR("&",			"",		0)
CHAR("^",			"",		0)
CHAR("|",			"",		0)
a49 1
CHAR("t",			"",		0)
@


1.42
log
@Make -T[x]html suppress output with \& (and similar zwsp points).  This
fixes lynx's rendering of manuals with the \&, which were rendering as
&#8203; in the text.  Reported by Paul de Weerd, thanks!
@
text
@d1 1
a1 1
/*	$Id: chars.in,v 1.41 2011/09/18 14:14:15 schwarze Exp $ */
d45 1
@


1.41
log
@forgotten Copyright bumps; no code change
found while syncing to OpenBSD
@
text
@d1 1
a1 1
/*	$Id: chars.in,v 1.40 2011/07/22 14:15:15 kristaps Exp $ */
d36 1
a36 1
CHAR("c",			"",		8203)
d40 5
a44 5
CHAR("%",			"",		8203)
CHAR("&",			"",		8203)
CHAR("^",			"",		8203)
CHAR("|",			"",		8203)
CHAR("}",			"",		8203)
@


1.40
log
@Add support for 1/2, 1/4, and 3/4 (needed by eqn).
@
text
@d1 1
a1 1
/*	$Id: chars.in,v 1.39 2011/05/24 21:40:14 kristaps Exp $ */
d3 1
a3 1
 * Copyright (c) 2009, 2010 Kristaps Dzonsons <kristaps@@bsd.lv>
@


1.39
log
@Use the correct Unicode value for the zero-width space, which means that
spec2cp never needs to fall through to spec2str.  Then clean out html.c
of its unnecessary print_res() function.
@
text
@d1 1
a1 1
/*	$Id: chars.in,v 1.38 2011/05/24 21:24:16 kristaps Exp $ */
d315 3
@


1.38
log
@Remove predefined strings from the chars.in file, as they're now local
to predefs.in.  This also makes "BOTH" entries directly into CHAR.  The
res2str and spec2str are now effectively the same function.
@
text
@d1 1
a1 1
/*	$Id: chars.in,v 1.37 2011/04/20 22:50:22 kristaps Exp $ */
d36 1
a36 1
CHAR("c",			"",		0)
d40 5
a44 5
CHAR("%",			"",		0)
CHAR("&",			"",		0)
CHAR("^",			"",		0)
CHAR("|",			"",		0)
CHAR("}",			"",		0)
@


1.37
log
@Add \*(Ai (ANSI) and \*(Px (POSIX) predefined strings, which are part of
groff's tmac.doc package.  Originally noted by Matthew Dempsky.
Feedback by Jason McIntyre, joerg@@, and schwarze@@.  Also add some
documentation about predefined strings, tweaked by schwarze@@.
@
text
@d1 1
a1 1
/*	$Id: chars.in,v 1.36 2011/03/16 22:49:55 schwarze Exp $ */
d19 1
a19 4
 * The ASCII translation tables.  STRING corresponds to predefined
 * strings (cf. mdoc_samples.7 and tmac/mdoc/doc-nroff).  CHAR
 * corresponds to special characters (cf. groff_char.7).  BOTH contains
 * sequences that are equivalent in both STRING and CHAR.
d21 4
a24 4
 * Either way, the left-hand side corresponds to the input sequence (\x,
 * \(xx, \*(xx and so on) whose length is listed second element.  The
 * right-hand side is what's produced by the front-end, with the fourth
 * element being its length.
d51 4
a54 4
BOTH("\'",			"\'",		769)
BOTH("aa",			"\'",		769)
BOTH("ga",			"`",		768)
BOTH("`",			"`",		768)
d68 2
a69 2
BOTH("lq",			"``",		8220)
BOTH("rq",			"\'\'",		8221)
d232 2
a233 2
BOTH("ua",			"^",		8593)
BOTH("va",			"^v",		8597)
d270 2
a271 2
BOTH("<=",			"<=",		8804)
BOTH(">=",			">=",		8805)
a347 30
/* Old style. */
STRING("Am",			"&",		38)
STRING("Ba",			"|",		124)
STRING("Ge",			">=",		8805)
STRING("Gt",			">",		62)
STRING("If",			"infinity",	0)
STRING("Le",			"<=",		8804)
STRING("Lq",			"``",		8220)
STRING("Lt",			"<",		60)
STRING("Na",			"NaN",		0)
STRING("Ne",			"!=",		8800)
STRING("Pi",			"pi",		960)
STRING("Pm",			"+-",		177)
STRING("Rq",			"\'\'",		8221)
STRING("left-bracket",		"[",		91)
STRING("left-parenthesis",	"(",		40)
STRING("left-singlequote",	"`",		8216)
STRING("lp",			"(",		40)
STRING("q",			"\"",		34)
STRING("quote-left",		"`",		8216)
STRING("quote-right",		"\'",		8217)
STRING("R",			"(R)",		174)
STRING("right-bracket",		"]",		93)
STRING("right-parenthesis",	")",		41)
STRING("right-singlequote",	"\'",		8217)
STRING("rp",			")",		41)
STRING("Tm",			"(Tm)",		8482)
STRING("Px",			"POSIX",	0)
STRING("Ai",			"ANSI",		0)

@


1.36
log
@o diaeresis is 246 (U+00F6)
from Christian Weisgerber <naddy at openbsd dot org>
@
text
@d1 1
a1 1
/*	$Id: chars.in,v 1.35 2010/09/15 13:10:30 kristaps Exp $ */
d378 2
@


1.35
log
@Remove last pod2man escapes.  These render ok, although \*(-- renders as
O- because the underlying macro depends on \(*W, which a prior pod2man
preamble `tr' macro rewrites as "-".  This is an error in groff as this
tramples on the real \(*W, or Greek omega.
@
text
@d1 1
a1 1
/*	$Id: chars.in,v 1.34 2010/08/29 11:36:49 kristaps Exp $ */
d190 1
a190 1
CHAR(":o",			"o",		245)
@


1.34
log
@Remove the pod2man table entries.  They can now be properly read and
assigned within the pod2man preamble.
@
text
@d1 1
a1 1
/*	$Id: chars.in,v 1.33 2010/08/16 09:51:17 kristaps Exp $ */
a350 13
/* pod2man holdovers. */
STRING("--",			"--",		8212)
STRING("PI",			"pi",		960)
STRING("L\"",			"``",		8220)
STRING("R\"",			"\'\'",		8221)
STRING("C`",			"`",		8216)
STRING("C\'",			"\'",		8217)
STRING("Aq",			"\'",		39)
STRING("^",			"^",		94)
STRING(",",			",",		44)
STRING("~",			"~",		126)
STRING("/",			"/",		47)

a363 1
STRING("R",			"(R)",		174)
a364 1
STRING("Tm",			"tm",		8482)
d372 1
d377 1
@


1.33
log
@Remove \*(C+ from the pre-predefined strings.  It is always `ds'-defined
when being used in manuals.  Since we now support `ds', it's no longer
necessary to account for it.  From a bug report originally by Thomas
Jeunet.
@
text
@d1 1
a1 1
/*	$Id: chars.in,v 1.32 2010/07/31 23:52:58 schwarze Exp $ */
d325 2
a326 2
BOTH("AE",			"AE",		198)
BOTH("ae",			"ae",		230)
a362 7
STRING(":",			"\"",		776)
STRING("8",			"B",		946)
STRING("o",			"o",		176)
STRING("D-",			"D",		208)
STRING("d-",			"o",		240)
STRING("Th",			"b",		222)
STRING("th",			"b",		254)
@


1.32
log
@Sync to OpenBSD: add missing Copyright years.
I checked that substantial changes were committed
to these files during these years.
@
text
@d1 1
a1 1
/*	$Id: chars.in,v 1.31 2010/07/26 13:59:00 kristaps Exp $ */
a355 1
STRING("C+",			"C++",		0)
@


1.31
log
@Remove asciisz from chars.in.  It frees up a nice chunk of memory and at
the overhead of running strlen() for ASCII strings (yes, I benchmarked
this running mandoc_char(7) as input again and again with
hundredth-second penalties... on my slow-ass alpha).
@
text
@d1 1
a1 1
/*	$Id: chars.in,v 1.30 2010/07/26 10:20:06 kristaps Exp $ */
d3 1
a3 1
 * Copyright (c) 2009 Kristaps Dzonsons <kristaps@@bsd.lv>
@


1.30
log
@Fix chars.in fall-through to ASCII mode.  This bug only affected
-T[x]html.
@
text
@d1 1
a1 1
/*	$Id: chars.in,v 1.29 2010/07/19 10:49:30 kristaps Exp $ */
d34 1
a34 1
static const char ascii_nbrsp[2] = { ASCII_NBRSP, 0 };
d39 9
a47 9
CHAR("c",			"",		0,	0)
CHAR("0",			" ",		1,	8194)
CHAR(" ",			ascii_nbrsp,	1,	160)
CHAR("~",			ascii_nbrsp,	1,	160)
CHAR("%",			"",		0,	0)
CHAR("&",			"",		0,	0)
CHAR("^",			"",		0,	0)
CHAR("|",			"",		0,	0)
CHAR("}",			"",		0,	0)
d50 17
a66 17
CHAR("a\"",			"\"",		1,	779)
CHAR("a-",			"-",		1,	175)
CHAR("a.",			".",		1,	729)
CHAR("a^",			"^",		1,	770)
BOTH("\'",			"\'",		1,	769)
BOTH("aa",			"\'",		1,	769)
BOTH("ga",			"`",		1,	768)
BOTH("`",			"`",		1,	768)
CHAR("ab",			"`",		1,	774)
CHAR("ac",			",",		1,	807)
CHAR("ad",			"\"",		1,	776)
CHAR("ah",			"v",		1,	711)
CHAR("ao",			"o",		1,	730)
CHAR("a~",			"~",		1,	771)
CHAR("ho",			",",		1,	808)
CHAR("ha",			"^",		1,	94)
CHAR("ti",			"~",		1,	126)
d69 12
a80 12
CHAR("Bq",			",,",		2,	8222)
CHAR("bq",			",",		1,	8218)
BOTH("lq",			"``",		2,	8220)
BOTH("rq",			"\'\'",		2,	8221)
CHAR("oq",			"`",		1,	8216)
CHAR("cq",			"\'",		1,	8217)
CHAR("aq",			"\'",		1,	39)
CHAR("dq",			"\"",		1,	34)
CHAR("Fo",			"<<",		2,	171)
CHAR("Fc",			">>",		2,	187)
CHAR("fo",			"<",		1,	8249)
CHAR("fc",			">",		1,	8250)
d83 34
a116 34
CHAR("lB",			"[",		1,	91)
CHAR("rB",			"]",		1,	93)
CHAR("lC",			"{",		1,	123)
CHAR("rC",			"}",		1,	125)
CHAR("la",			"<",		1,	60)
CHAR("ra",			">",		1,	62)
CHAR("bv",			"|",		1,	9130)
CHAR("braceex",			"|",		1,	9130)
CHAR("bracketlefttp",		"|",		1,	9121)
CHAR("bracketleftbp",		"|",		1,	9123)
CHAR("bracketleftex",		"|",		1,	9122)
CHAR("bracketrighttp",		"|",		1,	9124)
CHAR("bracketrightbp",		"|",		1,	9126)
CHAR("bracketrightex",		"|",		1,	9125)
CHAR("lt",			",-",		2,	9127)
CHAR("bracelefttp",		",-",		2,	9127)
CHAR("lk",			"{",		1,	9128)
CHAR("braceleftmid",		"{",		1,	9128)
CHAR("lb",			",-",		2,	9129)
CHAR("braceleftbp",		"`-",		2,	9129)
CHAR("braceleftex",		"|",		1,	9130)
CHAR("rt",			"-.",		2,	9131)
CHAR("bracerighttp",		"-.",		2,	9131)
CHAR("rk",			"}",		1,	9132)
CHAR("bracerightmid",		"}",		1,	9132)
CHAR("rb",			"-\'",		2,	9133)
CHAR("bracerightbp",		"-\'",		2,	9133)
CHAR("bracerightex",		"|",		1,	9130)
CHAR("parenlefttp",		"/",		1,	9115)
CHAR("parenleftbp",		"\\",		1,	9117)
CHAR("parenleftex",		"|",		1,	9116)
CHAR("parenrighttp",		"\\",		1,	9118)
CHAR("parenrightbp",		"/",		1,	9120)
CHAR("parenrightex",		"|",		1,	9119)
d119 53
a171 53
CHAR("*A",			"A",		1,	913)
CHAR("*B",			"B",		1,	914)
CHAR("*G",			"|",		1,	915)
CHAR("*D",			"/\\",		2,	916)
CHAR("*E",			"E",		1,	917)
CHAR("*Z",			"Z",		1,	918)
CHAR("*Y",			"H",		1,	919)
CHAR("*H",			"O",		1,	920)
CHAR("*I",			"I",		1,	921)
CHAR("*K",			"K",		1,	922)
CHAR("*L",			"/\\",		2,	923)
CHAR("*M",			"M",		1,	924)
CHAR("*N",			"N",		1,	925)
CHAR("*C",			"H",		1,	926)
CHAR("*O",			"O",		1,	927)
CHAR("*P",			"TT",		2,	928)
CHAR("*R",			"P",		1,	929)
CHAR("*S",			">",		1,	931)
CHAR("*T",			"T",		1,	932)
CHAR("*U",			"Y",		1,	933)
CHAR("*F",			"O_",		1,	934)
CHAR("*X",			"X",		1,	935)
CHAR("*Q",			"Y",		1,	936)
CHAR("*W",			"O",		1,	937)
CHAR("*a",			"a",		1,	945)
CHAR("*b",			"B",		1,	946)
CHAR("*g",			"y",		1,	947)
CHAR("*d",			"d",		1,	948)
CHAR("*e",			"e",		1,	949)
CHAR("*z",			"C",		1,	950)
CHAR("*y",			"n",		1,	951)
CHAR("*h",			"0",		1,	952)
CHAR("*i",			"i",		1,	953)
CHAR("*k",			"k",		1,	954)
CHAR("*l",			"\\",		1,	955)
CHAR("*m",			"u",		1,	956)
CHAR("*n",			"v",		1,	957)
CHAR("*c",			"E",		1,	958)
CHAR("*o",			"o",		1,	959)
CHAR("*p",			"n",		1,	960)
CHAR("*r",			"p",		1,	961)
CHAR("*s",			"o",		1,	963)
CHAR("*t",			"t",		1,	964)
CHAR("*u",			"u",		1,	965)
CHAR("*f",			"o",		1,	981)
CHAR("*x",			"x",		1,	967)
CHAR("*q",			"u",		1,	968)
CHAR("*w",			"w",		1,	969)
CHAR("+h",			"0",		1,	977)
CHAR("+f",			"o",		1,	966)
CHAR("+p",			"w",		1,	982)
CHAR("+e",			"e",		1,	1013)
CHAR("ts",			"s",		1,	962)
d174 55
a228 55
CHAR(",C",			"C",		1,	199)
CHAR(",c",			"c",		1,	231)
CHAR("/L",			"L",		1,	321)
CHAR("/O",			"O",		1,	216)
CHAR("/l",			"l",		1,	322)
CHAR("/o",			"o",		1,	248)
CHAR("oA",			"A",		1,	197)
CHAR("oa",			"a",		1,	229)
CHAR(":A",			"A",		1,	196)
CHAR(":E",			"E",		1,	203)
CHAR(":I",			"I",		1,	207)
CHAR(":O",			"O",		1,	214)
CHAR(":U",			"U",		1,	220)
CHAR(":a",			"a",		1,	228)
CHAR(":e",			"e",		1,	235)
CHAR(":i",			"i",		1,	239)
CHAR(":o",			"o",		1,	245)
CHAR(":u",			"u",		1,	252)
CHAR(":y",			"y",		1,	255)
CHAR("\'A",			"A",		1,	193)
CHAR("\'E",			"E",		1,	201)
CHAR("\'I",			"I",		1,	205)
CHAR("\'O",			"O",		1,	211)
CHAR("\'U",			"U",		1,	218)
CHAR("\'a",			"a",		1,	225)
CHAR("\'e",			"e",		1,	233)
CHAR("\'i",			"i",		1,	237)
CHAR("\'o",			"o",		1,	243)
CHAR("\'u",			"u",		1,	250)
CHAR("^A",			"A",		1,	194)
CHAR("^E",			"E",		1,	202)
CHAR("^I",			"I",		1,	206)
CHAR("^O",			"O",		1,	212)
CHAR("^U",			"U",		1,	219)
CHAR("^a",			"a",		1,	226)
CHAR("^e",			"e",		1,	234)
CHAR("^i",			"i",		1,	238)
CHAR("^o",			"o",		1,	244)
CHAR("^u",			"u",		1,	251)
CHAR("`A",			"A",		1,	192)
CHAR("`E",			"E",		1,	200)
CHAR("`I",			"I",		1,	204)
CHAR("`O",			"O",		1,	210)
CHAR("`U",			"U",		1,	217)
CHAR("`a",			"a",		1,	224)
CHAR("`e",			"e",		1,	232)
CHAR("`i",			"i",		1,	236)
CHAR("`o",			"o",		1,	242)
CHAR("`u",			"u",		1,	249)
CHAR("~A",			"A",		1,	195)
CHAR("~N",			"N",		1,	209)
CHAR("~O",			"O",		1,	213)
CHAR("~a",			"a",		1,	227)
CHAR("~n",			"n",		1,	241)
CHAR("~o",			"o",		1,	245)
d231 12
a242 12
CHAR("<-",			"<-",		2,	8592)
CHAR("->",			"->",		2,	8594)
CHAR("<>",			"<>",		2,	8596)
CHAR("da",			"v",		1,	8595)
BOTH("ua",			"^",		1,	8593)
BOTH("va",			"^v",		2,	8597)
CHAR("lA",			"<=",		2,	8656)
CHAR("rA",			"=>",		2,	8658)
CHAR("hA",			"<=>",		3,	8660)
CHAR("dA",			"v",		1,	8659)
CHAR("uA",			"^",		1,	8657)
CHAR("vA",			"^=v",		3,	8661)
d245 10
a254 10
CHAR("AN",			"^",		1,	8743)
CHAR("OR",			"v",		1,	8744)
CHAR("no",			"~",		1,	172)
CHAR("tno",			"~",		1,	172)
CHAR("te",			"3",		1,	8707)
CHAR("fa",			"V",		1,	8704)
CHAR("st",			"-)",		2,	8715)
CHAR("tf",			".:.",		3,	8756)
CHAR("3d",			".:.",		3,	8756)
CHAR("or",			"|",		1,	124)
d257 61
a317 61
CHAR("pl",			"+",		1,	43)
CHAR("mi",			"-",		1,	8722)
CHAR("-",			"-",		1,	45)
CHAR("-+",			"-+",		2,	8723)
CHAR("+-",			"+-",		2,	177)
CHAR("t+-",			"+-",		2,	177)
CHAR("pc",			".",		1,	183)
CHAR("md",			".",		1,	8901)
CHAR("mu",			"x",		1,	215)
CHAR("tmu",			"x",		1,	215)
CHAR("c*",			"x",		1,	8855)
CHAR("c+",			"+",		1,	8853)
CHAR("di",			"-:-",		3,	247)
CHAR("tdi",			"-:-",		3,	247)
CHAR("f/",			"/",		1,	8260)
CHAR("**",			"*",		1,	8727)
BOTH("<=",			"<=",		2,	8804)
BOTH(">=",			">=",		2,	8805)
CHAR("<<",			"<<",		2,	8810)
CHAR(">>",			">>",		2,	8811)
CHAR("eq",			"=",		1,	61)
CHAR("!=",			"!=",		2,	8800)
CHAR("==",			"==",		2,	8801)
CHAR("ne",			"!==",		3,	8802)
CHAR("=~",			"=~",		2,	8773)
CHAR("-~",			"-~",		2,	8771)
CHAR("ap",			"~",		1,	8764)
CHAR("~~",			"~~",		2,	8776)
CHAR("~=",			"~=",		2,	8780)
CHAR("pt",			"oc",		2,	8733)
CHAR("es",			"{}",		2,	8709)
CHAR("mo",			"E",		1,	8712)
CHAR("nm",			"!E",		2,	8713)
CHAR("sb",			"(=",		2,	8834)
CHAR("nb",			"(!=",		3,	8836)
CHAR("sp",			"=)",		2,	8835)
CHAR("nc",			"!=)",		3,	8837)
CHAR("ib",			"(=",		2,	8838)
CHAR("ip",			"=)",		2,	8839)
CHAR("ca",			"(^)",		3,	8745)
CHAR("cu",			"U",		1,	8746)
CHAR("/_",			"/_",		2,	8736)
CHAR("pp",			"_|_",		3,	8869)
CHAR("is",			"I",		1,	8747)
CHAR("integral",		"I",		1,	8747)
CHAR("sum",			"E",		1,	8721)
CHAR("product",			"TT",		2,	8719)
CHAR("coproduct",		"U",		1,	8720)
CHAR("gr",			"V",		1,	8711)
CHAR("sr",			"\\/",		2,	8730)
CHAR("sqrt",			"\\/",		2,	8730)
CHAR("lc",			"|~",		2,	8968)
CHAR("rc",			"~|",		2,	8969)
CHAR("lf",			"|_",		2,	8970)
CHAR("rf",			"_|",		2,	8971)
CHAR("if",			"oo",		2,	8734)
CHAR("Ah",			"N",		1,	8501)
CHAR("Im",			"I",		1,	8465)
CHAR("Re",			"R",		1,	8476)
CHAR("pd",			"a",		1,	8706)
CHAR("-h",			"/h",		2,	8463)
d320 12
a331 12
CHAR("ff",			"ff",		2,	64256)
CHAR("fi",			"fi",		2,	64257)
CHAR("fl",			"fl",		2,	64258)
CHAR("Fi",			"ffi",		3,	64259)
CHAR("Fl",			"ffl",		3,	64260)
BOTH("AE",			"AE",		2,	198)
BOTH("ae",			"ae",		2,	230)
CHAR("OE",			"OE",		2,	338)
CHAR("oe",			"oe",		2,	339)
CHAR("ss",			"ss",		2,	223)
CHAR("IJ",			"IJ",		2,	306)
CHAR("ij",			"ij",		2,	307)
d334 6
a339 6
CHAR("-D",			"D",		1,	208)
CHAR("Sd",			"o",		1,	240)
CHAR("TP",			"b",		1,	222)
CHAR("Tp",			"b",		1,	254)
CHAR(".i",			"i",		1,	305)
CHAR(".j",			"j",		1,	567)
d342 8
a349 8
CHAR("Do",			"$",		1,	36)
CHAR("ct",			"c",		1,	162)
CHAR("Eu",			"EUR",		3,	8364)
CHAR("eu",			"EUR",		3,	8364)
CHAR("Ye",			"Y",		1,	165)
CHAR("Po",			"L",		1,	163)
CHAR("Cs",			"x",		1,	164)
CHAR("Fn",			"f",		1,	402)
d352 19
a370 19
STRING("--",			"--",		2,	8212)
STRING("PI",			"pi",		2,	960)
STRING("L\"",			"``",		2,	8220)
STRING("R\"",			"\'\'",		2,	8221)
STRING("C+",			"C++",		3,	0)
STRING("C`",			"`",		1,	8216)
STRING("C\'",			"\'",		1,	8217)
STRING("Aq",			"\'",		1,	39)
STRING("^",			"^",		1,	94)
STRING(",",			",",		1,	44)
STRING("~",			"~",		1,	126)
STRING("/",			"/",		1,	47)
STRING(":",			"\"",		1,	776)
STRING("8",			"B",		1,	946)
STRING("o",			"o",		1,	176)
STRING("D-",			"D",		1,	208)
STRING("d-",			"o",		1,	240)
STRING("Th",			"b",		1,	222)
STRING("th",			"b",		1,	254)
d373 26
a398 26
STRING("Am",			"&",		1,	38)
STRING("Ba",			"|",		1,	124)
STRING("Ge",			">=",		2,	8805)
STRING("Gt",			">",		1,	62)
STRING("If",			"infinity",	8,	0)
STRING("Le",			"<=",		2,	8804)
STRING("Lq",			"``",		2,	8220)
STRING("Lt",			"<",		1,	60)
STRING("Na",			"NaN",		3,	0)
STRING("Ne",			"!=",		2,	8800)
STRING("Pi",			"pi",		2,	960)
STRING("Pm",			"+-",		2,	177)
STRING("R",			"(R)",		3,	174)
STRING("Rq",			"\'\'",		2,	8221)
STRING("Tm",			"tm",		2,	8482)
STRING("left-bracket",		"[",		1,	91)
STRING("left-parenthesis",	"(",		1,	40)
STRING("left-singlequote",	"`",		1,	8216)
STRING("lp",			"(",		1,	40)
STRING("q",			"\"",		1,	34)
STRING("quote-left",		"`",		1,	8216)
STRING("quote-right",		"\'",		1,	8217)
STRING("right-bracket",		"]",		1,	93)
STRING("right-parenthesis",	")",		1,	41)
STRING("right-singlequote",	"\'",		1,	8217)
STRING("rp",			")",		1,	41)
d401 7
a407 7
CHAR("ba",			"|",		1,	124)
CHAR("br",			"|",		1,	9474)
CHAR("ul",			"_",		1,	95)
CHAR("rl",			"-",		1,	8254)
CHAR("bb",			"|",		1,	166)
CHAR("sl",			"/",		1,	47)
CHAR("rs",			"\\",		1,	92)
d410 14
a423 14
CHAR("ci",			"o",		1,	9675)
CHAR("bu",			"o",		1,	8226)
CHAR("dd",			"=",		1,	8225)
CHAR("dg",			"-",		1,	8224)
CHAR("lz",			"<>",		2,	9674)
CHAR("sq",			"[]",		2,	9633)
CHAR("ps",			"9|",		2,	182)
CHAR("sc",			"S",		1,	167)
CHAR("lh",			"<=",		2,	9756)
CHAR("rh",			"=>",		2,	9758)
CHAR("at",			"@@",		1,	64)
CHAR("sh",			"#",		1,	35)
CHAR("CR",			"_|",		2,	8629)
CHAR("OK",			"\\/",		2,	10003)
d426 3
a428 3
CHAR("co",			"(C)",		3,	169)
CHAR("rg",			"(R)",		3,	174)
CHAR("tm",			"tm",		2,	8482)
d431 7
a437 7
CHAR(".",			".",		1,	46)
CHAR("r!",			"i",		1,	161)
CHAR("r?",			"c",		1,	191)
CHAR("em",			"--",		2,	8212)
CHAR("en",			"-",		1,	8211)
CHAR("hy",			"-",		1,	8208)
CHAR("e",			"\\",		1,	92)
d440 5
a444 5
CHAR("de",			"o",		1,	176)
CHAR("%0",			"%o",		2,	8240)
CHAR("fm",			"\'",		1,	8242)
CHAR("sd",			"\"",		1,	8243)
CHAR("mc",			"mu",		2,	181)
@


1.29
log
@Changed Unicode codepoint of left-arrow right-arrow to be the regular
ASCII symbols.
@
text
@d1 1
a1 1
/*	$Id: chars.in,v 1.28 2010/07/18 18:04:25 kristaps Exp $ */
d39 1
a39 1
CHAR("c",			"",		0,	-1)
d43 5
a47 5
CHAR("%",			"",		0,	-1)
CHAR("&",			"",		0,	-1)
CHAR("^",			"",		0,	-1)
CHAR("|",			"",		0,	-1)
CHAR("}",			"",		0,	-1)
@


1.28
log
@Make "\ " produce non-breaking space.

Noted by Theo de Raadt.  Ok schwarze@@.
@
text
@d1 1
a1 1
/*	$Id: chars.in,v 1.27 2010/07/17 09:21:39 kristaps Exp $ */
d87 2
a88 2
CHAR("la",			"<",		1,	10216) /* FIXME: 60 */
CHAR("ra",			">",		1,	10217) /* FIXME: 62 */
@


1.27
log
@By letting strncmp() do its job and not helping it with a prior length
check, we can remove the hard-coded length of all escape patterns.  This
frees up a nice chunk of memory.
@
text
@d1 1
a1 1
/*	$Id: chars.in,v 1.26 2010/07/16 22:33:30 kristaps Exp $ */
d41 1
a41 1
CHAR(" ",			" ",		1,	8194)
@


1.26
log
@Change chars.in HTML encoding to be a Unicode codepoint (int), which is
later formatted in html.c.
@
text
@d1 1
a1 1
/*	$Id: chars.in,v 1.25 2010/06/19 20:46:27 kristaps Exp $ */
d39 9
a47 9
CHAR("c",			1,	"",		0,	-1)
CHAR("0",			1,	" ",		1,	8194)
CHAR(" ",			1,	" ",		1,	8194)
CHAR("~",			1,	ascii_nbrsp,	1,	160)
CHAR("%",			1,	"",		0,	-1)
CHAR("&",			1,	"",		0,	-1)
CHAR("^",			1,	"",		0,	-1)
CHAR("|",			1,	"",		0,	-1)
CHAR("}",			1,	"",		0,	-1)
d50 17
a66 17
CHAR("a\"",			2,	"\"",		1,	779)
CHAR("a-",			2,	"-",		1,	175)
CHAR("a.",			2,	".",		1,	729)
CHAR("a^",			2,	"^",		1,	770)
BOTH("\'",			1,	"\'",		1,	769)
BOTH("aa",			2,	"\'",		1,	769)
BOTH("ga",			2,	"`",		1,	768)
BOTH("`",			1,	"`",		1,	768)
CHAR("ab",			2,	"`",		1,	774)
CHAR("ac",			2,	",",		1,	807)
CHAR("ad",			2,	"\"",		1,	776)
CHAR("ah",			2,	"v",		1,	711)
CHAR("ao",			2,	"o",		1,	730)
CHAR("a~",			2, 	"~",		1,	771)
CHAR("ho",			2,	",",		1,	808)
CHAR("ha",			2,	"^",		1,	94)
CHAR("ti",			2,	"~",		1,	126)
d69 12
a80 12
CHAR("Bq",			2, 	",,",		2,	8222)
CHAR("bq",			2, 	",",		1,	8218)
BOTH("lq",			2, 	"``",		2,	8220)
BOTH("rq",			2, 	"\'\'",		2,	8221)
CHAR("oq",			2, 	"`",		1,	8216)
CHAR("cq",			2, 	"\'",		1,	8217)
CHAR("aq",			2, 	"\'",		1,	39)
CHAR("dq",			2, 	"\"",		1,	34)
CHAR("Fo",			2,	"<<",		2,	171)
CHAR("Fc",			2,	">>",		2,	187)
CHAR("fo",			2,	"<",		1,	8249)
CHAR("fc",			2,	">",		1,	8250)
d83 34
a116 34
CHAR("lB",			2, 	"[",		1,	91)
CHAR("rB",			2, 	"]",		1,	93)
CHAR("lC",			2, 	"{",		1,	123)
CHAR("rC",			2, 	"}",		1,	125)
CHAR("la",			2, 	"<",		1,	10216) /* FIXME: 60 */
CHAR("ra",			2, 	">",		1,	10217) /* FIXME: 62 */
CHAR("bv",			2, 	"|",		1,	9130)
CHAR("braceex",			7, 	"|",		1,	9130)
CHAR("bracketlefttp",		13, 	"|",		1,	9121)
CHAR("bracketleftbp",		13, 	"|",		1,	9123)
CHAR("bracketleftex",		13, 	"|",		1,	9122)
CHAR("bracketrighttp",		14, 	"|",		1,	9124)
CHAR("bracketrightbp",		14, 	"|",		1,	9126)
CHAR("bracketrightex",		14, 	"|",		1,	9125)
CHAR("lt",			2, 	",-",		2,	9127)
CHAR("bracelefttp",		11, 	",-",		2,	9127)
CHAR("lk",			2, 	"{",		1,	9128)
CHAR("braceleftmid",		12, 	"{",		1,	9128)
CHAR("lb",			2, 	",-",		2,	9129)
CHAR("braceleftbp",		11, 	"`-",		2,	9129)
CHAR("braceleftex",		11, 	"|",		1,	9130)
CHAR("rt",			2, 	"-.",		2,	9131)
CHAR("bracerighttp",		12, 	"-.",		2,	9131)
CHAR("rk",			2, 	"}",		1,	9132)
CHAR("bracerightmid",		13, 	"}",		1,	9132)
CHAR("rb",			2, 	"-\'",		2,	9133)
CHAR("bracerightbp",		12, 	"-\'",		2,	9133)
CHAR("bracerightex",		12, 	"|",		1,	9130)
CHAR("parenlefttp",		11, 	"/",		1,	9115)
CHAR("parenleftbp",		11, 	"\\",		1,	9117)
CHAR("parenleftex",		11, 	"|",		1,	9116)
CHAR("parenrighttp",		12, 	"\\",		1,	9118)
CHAR("parenrightbp",		12, 	"/",		1,	9120)
CHAR("parenrightex",		12, 	"|",		1,	9119)
d119 53
a171 53
CHAR("*A",			2,	"A",		1,	913)
CHAR("*B",			2,	"B",		1,	914)
CHAR("*G",			2,	"|",		1,	915)
CHAR("*D",			2,	"/\\",		2,	916)
CHAR("*E",			2,	"E",		1,	917)
CHAR("*Z",			2,	"Z",		1,	918)
CHAR("*Y",			2,	"H",		1,	919)
CHAR("*H",			2,	"O",		1,	920)
CHAR("*I",			2,	"I",		1,	921)
CHAR("*K",			2,	"K",		1,	922)
CHAR("*L",			2,	"/\\",		2,	923)
CHAR("*M",			2,	"M",		1,	924)
CHAR("*N",			2,	"N",		1,	925)
CHAR("*C",			2,	"H",		1,	926)
CHAR("*O",			2,	"O",		1,	927)
CHAR("*P",			2,	"TT",		2,	928)
CHAR("*R",			2,	"P",		1,	929)
CHAR("*S",			2,	">",		1,	931)
CHAR("*T",			2,	"T",		1,	932)
CHAR("*U",			2,	"Y",		1,	933)
CHAR("*F",			2,	"O_",		1,	934)
CHAR("*X",			2,	"X",		1,	935)
CHAR("*Q",			2,	"Y",		1,	936)
CHAR("*W",			2,	"O",		1,	937)
CHAR("*a",			2,	"a",		1,	945)
CHAR("*b",			2,	"B",		1,	946)
CHAR("*g",			2,	"y",		1,	947)
CHAR("*d",			2,	"d",		1,	948)
CHAR("*e",			2,	"e",		1,	949)
CHAR("*z",			2,	"C",		1,	950)
CHAR("*y",			2,	"n",		1,	951)
CHAR("*h",			2,	"0",		1,	952)
CHAR("*i",			2,	"i",		1,	953)
CHAR("*k",			2,	"k",		1,	954)
CHAR("*l",			2,	"\\",		1,	955)
CHAR("*m",			2,	"u",		1,	956)
CHAR("*n",			2,	"v",		1,	957)
CHAR("*c",			2,	"E",		1,	958)
CHAR("*o",			2,	"o",		1,	959)
CHAR("*p",			2,	"n",		1,	960)
CHAR("*r",			2,	"p",		1,	961)
CHAR("*s",			2,	"o",		1,	963)
CHAR("*t",			2,	"t",		1,	964)
CHAR("*u",			2,	"u",		1,	965)
CHAR("*f",			2,	"o",		1,	981)
CHAR("*x",			2,	"x",		1,	967)
CHAR("*q",			2,	"u",		1,	968)
CHAR("*w",			2,	"w",		1,	969)
CHAR("+h",			2,	"0",		1,	977)
CHAR("+f",			2,	"o",		1,	966)
CHAR("+p",			2,	"w",		1,	982)
CHAR("+e",			2,	"e",		1,	1013)
CHAR("ts",			2,	"s",		1,	962)
d174 55
a228 55
CHAR(",C",			2,	"C",		1,	199)
CHAR(",c",			2,	"c",		1,	231)
CHAR("/L",			2,	"L",		1,	321)
CHAR("/O",			2,	"O",		1,	216)
CHAR("/l",			2,	"l",		1,	322)
CHAR("/o",			2,	"o",		1,	248)
CHAR("oA",			2,	"A",		1,	197)
CHAR("oa",			2,	"a",		1,	229)
CHAR(":A",			2,	"A",		1,	196)
CHAR(":E",			2,	"E",		1,	203)
CHAR(":I",			2,	"I",		1,	207)
CHAR(":O",			2,	"O",		1,	214)
CHAR(":U",			2,	"U",		1,	220)
CHAR(":a",			2,	"a",		1,	228)
CHAR(":e",			2,	"e",		1,	235)
CHAR(":i",			2,	"i",		1,	239)
CHAR(":o",			2,	"o",		1,	245)
CHAR(":u",			2,	"u",		1,	252)
CHAR(":y",			2,	"y",		1,	255)
CHAR("\'A",			2,	"A",		1,	193)
CHAR("\'E",			2,	"E",		1,	201)
CHAR("\'I",			2,	"I",		1,	205)
CHAR("\'O",			2,	"O",		1,	211)
CHAR("\'U",			2,	"U",		1,	218)
CHAR("\'a",			2,	"a",		1,	225)
CHAR("\'e",			2,	"e",		1,	233)
CHAR("\'i",			2,	"i",		1,	237)
CHAR("\'o",			2,	"o",		1,	243)
CHAR("\'u",			2,	"u",		1,	250)
CHAR("^A",			2,	"A",		1,	194)
CHAR("^E",			2,	"E",		1,	202)
CHAR("^I",			2,	"I",		1,	206)
CHAR("^O",			2,	"O",		1,	212)
CHAR("^U",			2,	"U",		1,	219)
CHAR("^a",			2,	"a",		1,	226)
CHAR("^e",			2,	"e",		1,	234)
CHAR("^i",			2,	"i",		1,	238)
CHAR("^o",			2,	"o",		1,	244)
CHAR("^u",			2,	"u",		1,	251)
CHAR("`A",			2,	"A",		1,	192)
CHAR("`E",			2,	"E",		1,	200)
CHAR("`I",			2,	"I",		1,	204)
CHAR("`O",			2,	"O",		1,	210)
CHAR("`U",			2,	"U",		1,	217)
CHAR("`a",			2,	"a",		1,	224)
CHAR("`e",			2,	"e",		1,	232)
CHAR("`i",			2,	"i",		1,	236)
CHAR("`o",			2,	"o",		1,	242)
CHAR("`u",			2,	"u",		1,	249)
CHAR("~A",			2,	"A",		1,	195)
CHAR("~N",			2,	"N",		1,	209)
CHAR("~O",			2,	"O",		1,	213)
CHAR("~a",			2,	"a",		1,	227)
CHAR("~n",			2,	"n",		1,	241)
CHAR("~o",			2,	"o",		1,	245)
d231 12
a242 12
CHAR("<-",			2, 	"<-",		2,	8592)
CHAR("->",			2, 	"->",		2,	8594)
CHAR("<>",			2, 	"<>",		2,	8596)
CHAR("da",			2, 	"v",		1,	8595)
BOTH("ua",			2,	"^",		1,	8593)
BOTH("va",			2,	"^v",		2,	8597)
CHAR("lA",			2, 	"<=",		2,	8656)
CHAR("rA",			2, 	"=>",		2,	8658)
CHAR("hA",			2, 	"<=>",		3,	8660)
CHAR("dA",			2, 	"v",		1,	8659)
CHAR("uA",			2, 	"^",		1,	8657)
CHAR("vA",			2, 	"^=v",		3,	8661)
d245 10
a254 10
CHAR("AN",			2,	"^",		1,	8743)
CHAR("OR",			2,	"v",		1,	8744)
CHAR("no",			2,	"~",		1,	172)
CHAR("tno",			3,	"~",		1,	172)
CHAR("te",			2,	"3",		1,	8707)
CHAR("fa",			2,	"V",		1,	8704)
CHAR("st",			2,	"-)",		2,	8715)
CHAR("tf",			2,	".:.",		3,	8756)
CHAR("3d",			2,	".:.",		3,	8756)
CHAR("or",			2,	"|",		1,	124)
d257 61
a317 61
CHAR("pl",			2,	"+",		1,	43)
CHAR("mi",			2,	"-",		1,	8722)
CHAR("-",			1,	"-",		1,	45)
CHAR("-+",			2,	"-+",		2,	8723)
CHAR("+-",			2, 	"+-",		2,	177)
CHAR("t+-",			3, 	"+-",		2,	177)
CHAR("pc",			2, 	".",		1,	183)
CHAR("md",			2, 	".",		1,	8901)
CHAR("mu",			2,	"x",		1,	215)
CHAR("tmu",			3,	"x",		1,	215)
CHAR("c*",			2,	"x",		1,	8855)
CHAR("c+",			2,	"+",		1,	8853)
CHAR("di",			2,	"-:-",		3,	247)
CHAR("tdi",			3,	"-:-",		3,	247)
CHAR("f/",			2,	"/",		1,	8260)
CHAR("**",			2, 	"*",		1,	8727)
BOTH("<=",			2,	"<=",		2,	8804)
BOTH(">=",			2,	">=",		2,	8805)
CHAR("<<",			2, 	"<<",		2,	8810)
CHAR(">>",			2, 	">>",		2,	8811)
CHAR("eq",			2,	"=",		1,	61)
CHAR("!=",			2, 	"!=",		2,	8800)
CHAR("==",			2, 	"==",		2,	8801)
CHAR("ne",			2, 	"!==",		3,	8802)
CHAR("=~",			2,	"=~",		2,	8773)
CHAR("-~",			2,	"-~",		2,	8771)
CHAR("ap",			2,	"~",		1,	8764)
CHAR("~~",			2,	"~~",		2,	8776)
CHAR("~=",			2,	"~=",		2,	8780)
CHAR("pt",			2,	"oc",		2,	8733)
CHAR("es",			2,	"{}",		2,	8709)
CHAR("mo",			2,	"E",		1,	8712)
CHAR("nm",			2,	"!E",		2,	8713)
CHAR("sb",			2,	"(=",		2,	8834)
CHAR("nb",			2,	"(!=",		3,	8836)
CHAR("sp",			2,	"=)",		2,	8835)
CHAR("nc",			2,	"!=)",		3,	8837)
CHAR("ib",			2,	"(=",		2,	8838)
CHAR("ip",			2,	"=)",		2,	8839)
CHAR("ca",			2,	"(^)",		3,	8745)
CHAR("cu",			2,	"U",		1,	8746)
CHAR("/_",			2,	"/_",		2,	8736)
CHAR("pp",			2,	"_|_",		3,	8869)
CHAR("is",			2,	"I",		1,	8747)
CHAR("integral",		8,	"I",		1,	8747)
CHAR("sum",			3,	"E",		1,	8721)
CHAR("product",			7,	"TT",		2,	8719)
CHAR("coproduct",		9,	"U",		1,	8720)
CHAR("gr",			2,	"V",		1,	8711)
CHAR("sr",			2,	"\\/",		2,	8730)
CHAR("sqrt",			4,	"\\/",		2,	8730)
CHAR("lc",			2,	"|~",		2,	8968)
CHAR("rc",			2,	"~|",		2,	8969)
CHAR("lf",			2,	"|_",		2,	8970)
CHAR("rf",			2,	"_|",		2,	8971)
CHAR("if",			2, 	"oo",		2,	8734)
CHAR("Ah",			2,	"N",		1,	8501)
CHAR("Im",			2,	"I",		1,	8465)
CHAR("Re",			2,	"R",		1,	8476)
CHAR("pd",			2,	"a",		1,	8706)
CHAR("-h",			2,	"/h",		2,	8463)
d320 12
a331 12
CHAR("ff",			2,	"ff",		2,	64256)
CHAR("fi",			2,	"fi",		2,	64257)
CHAR("fl",			2,	"fl",		2,	64258)
CHAR("Fi",			2,	"ffi",		3,	64259)
CHAR("Fl",			2,	"ffl",		3,	64260)
BOTH("AE",			2,	"AE",		2,	198)
BOTH("ae",			2,	"ae",		2,	230)
CHAR("OE",			2,	"OE",		2,	338)
CHAR("oe",			2,	"oe",		2,	339)
CHAR("ss",			2,	"ss",		2,	223)
CHAR("IJ",			2,	"IJ",		2,	306)
CHAR("ij",			2,	"ij",		2,	307)
d334 6
a339 6
CHAR("-D",			2,	"D",		1,	208)
CHAR("Sd",			2,	"o",		1,	240)
CHAR("TP",			2,	"b",		1,	222)
CHAR("Tp",			2,	"b",		1,	254)
CHAR(".i",			2,	"i",		1,	305)
CHAR(".j",			2,	"j",		1,	567)
d342 8
a349 8
CHAR("Do",			2,	"$",		1,	36)
CHAR("ct",			2,	"c",		1,	162)
CHAR("Eu",			2,	"EUR",		3,	8364)
CHAR("eu",			2,	"EUR",		3,	8364)
CHAR("Ye",			2,	"Y",		1,	165)
CHAR("Po",			2,	"L",		1,	163)
CHAR("Cs",			2,	"x",		1,	164)
CHAR("Fn",			2,	"f",		1,	402)
d352 19
a370 19
STRING("--",			2,	"--",		2,	8212)
STRING("PI",			2,	"pi",		2,	960)
STRING("L\"",			2,	"``",		2,	8220)
STRING("R\"",			2,	"\'\'",		2,	8221)
STRING("C+",			2,	"C++",		3,	0)
STRING("C`",			2,	"`",		1,	8216)
STRING("C\'",			2,	"\'",		1,	8217)
STRING("Aq",			2, 	"\'",		1,	39)
STRING("^",			1,	"^",		1,	94)
STRING(",",			1,	",",		1,	44)
STRING("~",			1,	"~",		1,	126)
STRING("/",			1,	"/",		1,	47)
STRING(":",			1,	"\"",		1,	776)
STRING("8",			1,	"B",		1,	946)
STRING("o",			1,	"o",		1,	176)
STRING("D-",			2,	"D",		1,	208)
STRING("d-",			2,	"o",		1,	240)
STRING("Th",			2,	"b",		1,	222)
STRING("th",			2,	"b",		1,	254)
d373 26
a398 26
STRING("Am",			2,	"&",		1,	38)
STRING("Ba",			2,	"|",		1,	124)
STRING("Ge",			2,	">=",		2,	8805)
STRING("Gt",			2,	">",		1,	62)
STRING("If",			2,	"infinity",	8,	0)
STRING("Le",			2,	"<=",		2,	8804)
STRING("Lq",			2,	"``",		2,	8220)
STRING("Lt",			2,	"<",		1,	60)
STRING("Na",			2,	"NaN",		3,	0)
STRING("Ne",			2,	"!=",		2,	8800)
STRING("Pi",			2,	"pi",		2,	960)
STRING("Pm",			2,	"+-",		2,	177)
STRING("R",			1,	"(R)",		3,	174)
STRING("Rq",			2,	"\'\'",		2,	8221)
STRING("Tm",			2,	"tm",		2,	8482)
STRING("left-bracket",		12,	"[",		1,	91)
STRING("left-parenthesis",	16,	"(",		1,	40)
STRING("left-singlequote",	16,	"`",		1,	8216)
STRING("lp",			2,	"(",		1,	40)
STRING("q",			1,	"\"",		1,	34)
STRING("quote-left",		10,	"`",		1,	8216)
STRING("quote-right",		11,	"\'",		1,	8217)
STRING("right-bracket",		13,	"]",		1,	93)
STRING("right-parenthesis",	17,	")",		1,	41)
STRING("right-singlequote",	17,	"\'",		1,	8217)
STRING("rp",			2,	")",		1,	41)
d401 7
a407 7
CHAR("ba",			2, 	"|",		1,	124)
CHAR("br",			2, 	"|",		1,	9474)
CHAR("ul",			2, 	"_",		1,	95)
CHAR("rl",			2, 	"-",		1,	8254)
CHAR("bb",			2, 	"|",		1,	166)
CHAR("sl",			2, 	"/",		1,	47)
CHAR("rs",			2, 	"\\",		1,	92)
d410 14
a423 14
CHAR("ci",			2, 	"o",		1,	9675)
CHAR("bu",			2, 	"o",		1,	8226)
CHAR("dd",			2,	"=",		1,	8225)
CHAR("dg",			2,	"-",		1,	8224)
CHAR("lz",			2,	"<>",		2,	9674)
CHAR("sq",			2,	"[]",		2,	9633)
CHAR("ps",			2,	"9|",		2,	182)
CHAR("sc",			2,	"S",		1,	167)
CHAR("lh",			2,	"<=",		2,	9756)
CHAR("rh",			2,	"=>",		2,	9758)
CHAR("at",			2,	"@@",		1,	64)
CHAR("sh",			2,	"#",		1,	35)
CHAR("CR",			2,	"_|",		2,	8629)
CHAR("OK",			2,	"\\/",		2,	10003)
d426 3
a428 3
CHAR("co",			2, 	"(C)",		3,	169)
CHAR("rg",			2, 	"(R)",		3,	174)
CHAR("tm",			2, 	"tm",		2,	8482)
d431 7
a437 7
CHAR(".",			1,	".",		1,	46)
CHAR("r!",			2,	"i",		1,	161)
CHAR("r?",			2,	"c",		1,	191)
CHAR("em",			2, 	"--",		2,	8212)
CHAR("en",			2, 	"-",		1,	8211)
CHAR("hy",			2, 	"-",		1,	8208)
CHAR("e",			1,	"\\",		1,	92)
d440 5
a444 5
CHAR("de",			2,	"o",		1,	176)
CHAR("%0",			2,	"%o",		2,	8240)
CHAR("fm",			2,	"\'",		1,	8242)
CHAR("sd",			2,	"\"",		1,	8243)
CHAR("mc",			2,	"mu",		2,	181)
@


1.25
log
@Churn as I finish email address migration kth.se -> bsd.lv.
@
text
@d1 1
a1 1
/*	$Id: chars.in,v 1.24 2010/06/01 11:47:28 kristaps Exp $ */
d39 9
a47 9
CHAR("c",			1,	"",		0,	"",		0)
CHAR("0",			1,	" ",		1,	"&#8194;",	7)
CHAR(" ",			1,	" ",		1,	"&#8194;",	7)
CHAR("~",			1,	ascii_nbrsp,	1,	"&#160;",	6)
CHAR("%",			1,	"",		0,	"",		0)
CHAR("&",			1,	"",		0,	"",		0)
CHAR("^",			1,	"",		0,	"",		0)
CHAR("|",			1,	"",		0,	"",		0)
CHAR("}",			1,	"",		0,	"",		0)
d50 17
a66 17
CHAR("a\"",			2,	"\"",		1,	"&#779;",	6)
CHAR("a-",			2,	"-",		1,	"&#175;",	6)
CHAR("a.",			2,	".",		1,	"&#729;",	6)
CHAR("a^",			2,	"^",		1,	"&#770;",	6)
BOTH("\'",			1,	"\'",		1,	"&#769;",	6)
BOTH("aa",			2,	"\'",		1,	"&#769;",	6)
BOTH("ga",			2,	"`",		1,	"&#768;",	6)
BOTH("`",			1,	"`",		1,	"&#768;",	6)
CHAR("ab",			2,	"`",		1,	"&#774;",	6)
CHAR("ac",			2,	",",		1,	"&#807;",	6)
CHAR("ad",			2,	"\"",		1,	"&#776;",	6)
CHAR("ah",			2,	"v",		1,	"&#711;",	6)
CHAR("ao",			2,	"o",		1,	"&#730;",	6)
CHAR("a~",			2, 	"~",		1,	"&#771;",	6)
CHAR("ho",			2,	",",		1,	"&#808;",	6)
CHAR("ha",			2,	"^",		1,	"^",		1)
CHAR("ti",			2,	"~",		1,	"~",		1)
d69 12
a80 12
CHAR("Bq",			2, 	",,",		2,	"&#8222;",	7)
CHAR("bq",			2, 	",",		1,	"&#8218;",	7)
BOTH("lq",			2, 	"``",		2,	"&#8220;",	7)
BOTH("rq",			2, 	"\'\'",		2,	"&#8221;",	7)
CHAR("oq",			2, 	"`",		1,	"&#8216;",	7)
CHAR("cq",			2, 	"\'",		1,	"&#8217;",	7)
CHAR("aq",			2, 	"\'",		1,	"\'",		1)
CHAR("dq",			2, 	"\"",		1,	"\"",		1)
CHAR("Fo",			2,	"<<",		2,	"&#171;",	6)
CHAR("Fc",			2,	">>",		2,	"&#187;",	6)
CHAR("fo",			2,	"<",		1,	"&#8249;",	7)
CHAR("fc",			2,	">",		1,	"&#8250;",	7)
d83 34
a116 34
CHAR("lB",			2, 	"[",		1,	"[",		1)
CHAR("rB",			2, 	"]",		1,	"]",		1)
CHAR("lC",			2, 	"{",		1,	"{",		1)
CHAR("rC",			2, 	"}",		1,	"}",		1)
CHAR("la",			2, 	"<",		1,	"&#10216;",	8)
CHAR("ra",			2, 	">",		1,	"&#10217;",	8)
CHAR("bv",			2, 	"|",		1,	"&#9130;",	7)
CHAR("braceex",			7, 	"|",		1,	"&#9130;",	7)
CHAR("bracketlefttp",		13, 	"|",		1,	"&#9121;",	7)
CHAR("bracketleftbp",		13, 	"|",		1,	"&#9123;",	7)
CHAR("bracketleftex",		13, 	"|",		1,	"&#9122;",	7)
CHAR("bracketrighttp",		14, 	"|",		1,	"&#9124;",	7)
CHAR("bracketrightbp",		14, 	"|",		1,	"&#9126;",	7)
CHAR("bracketrightex",		14, 	"|",		1,	"&#9125;",	7)
CHAR("lt",			2, 	",-",		2,	"&#9127;",	7)
CHAR("bracelefttp",		11, 	",-",		2,	"&#9127;",	7)
CHAR("lk",			2, 	"{",		1,	"&#9128;",	7)
CHAR("braceleftmid",		12, 	"{",		1,	"&#9128;",	7)
CHAR("lb",			2, 	",-",		2,	"&#9129;",	7)
CHAR("braceleftbp",		11, 	"`-",		2,	"&#9129;",	7)
CHAR("braceleftex",		11, 	"|",		1,	"&#9130;",	7)
CHAR("rt",			2, 	"-.",		2,	"&#9131;",	7)
CHAR("bracerighttp",		12, 	"-.",		2,	"&#9131;",	7)
CHAR("rk",			2, 	"}",		1,	"&#9132;",	7)
CHAR("bracerightmid",		13, 	"}",		1,	"&#9132;",	7)
CHAR("rb",			2, 	"-\'",		2,	"&#9133;",	7)
CHAR("bracerightbp",		12, 	"-\'",		2,	"&#9133;",	7)
CHAR("bracerightex",		12, 	"|",		1,	"&#9130;",	7)
CHAR("parenlefttp",		11, 	"/",		1,	"&#9115;",	7)
CHAR("parenleftbp",		11, 	"\\",		1,	"&#9117;",	7)
CHAR("parenleftex",		11, 	"|",		1,	"&#9116;",	7)
CHAR("parenrighttp",		12, 	"\\",		1,	"&#9118;",	7)
CHAR("parenrightbp",		12, 	"/",		1,	"&#9120;",	7)
CHAR("parenrightex",		12, 	"|",		1,	"&#9119;",	7)
d119 53
a171 53
CHAR("*A",			2,	"A",		1,	"&#913;",	6)
CHAR("*B",			2,	"B",		1,	"&#914;",	6)
CHAR("*G",			2,	"|",		1,	"&#915;",	6)
CHAR("*D",			2,	"/\\",		2,	"&#916;",	6)
CHAR("*E",			2,	"E",		1,	"&#917;",	6)
CHAR("*Z",			2,	"Z",		1,	"&#918;",	6)
CHAR("*Y",			2,	"H",		1,	"&#919;",	6)
CHAR("*H",			2,	"O",		1,	"&#920;",	6)
CHAR("*I",			2,	"I",		1,	"&#921;",	6)
CHAR("*K",			2,	"K",		1,	"&#922;",	6)
CHAR("*L",			2,	"/\\",		2,	"&#923;",	6)
CHAR("*M",			2,	"M",		1,	"&#924;",	6)
CHAR("*N",			2,	"N",		1,	"&#925;",	6)
CHAR("*C",			2,	"H",		1,	"&#926;",	6)
CHAR("*O",			2,	"O",		1,	"&#927;",	6)
CHAR("*P",			2,	"TT",		2,	"&#928;",	6)
CHAR("*R",			2,	"P",		1,	"&#929;",	6)
CHAR("*S",			2,	">",		1,	"&#931;",	6)
CHAR("*T",			2,	"T",		1,	"&#932;",	6)
CHAR("*U",			2,	"Y",		1,	"&#933;",	6)
CHAR("*F",			2,	"O_",		1,	"&#934;",	6)
CHAR("*X",			2,	"X",		1,	"&#935;",	6)
CHAR("*Q",			2,	"Y",		1,	"&#936;",	6)
CHAR("*W",			2,	"O",		1,	"&#937;",	6)
CHAR("*a",			2,	"a",		1,	"&#945;",	6)
CHAR("*b",			2,	"B",		1,	"&#946;",	6)
CHAR("*g",			2,	"y",		1,	"&#947;",	6)
CHAR("*d",			2,	"d",		1,	"&#948;",	6)
CHAR("*e",			2,	"e",		1,	"&#949;",	6)
CHAR("*z",			2,	"C",		1,	"&#950;",	6)
CHAR("*y",			2,	"n",		1,	"&#951;",	6)
CHAR("*h",			2,	"0",		1,	"&#952;",	6)
CHAR("*i",			2,	"i",		1,	"&#953;",	6)
CHAR("*k",			2,	"k",		1,	"&#954;",	6)
CHAR("*l",			2,	"\\",		1,	"&#955;",	6)
CHAR("*m",			2,	"u",		1,	"&#956;",	6)
CHAR("*n",			2,	"v",		1,	"&#957;",	6)
CHAR("*c",			2,	"E",		1,	"&#958;",	6)
CHAR("*o",			2,	"o",		1,	"&#959;",	6)
CHAR("*p",			2,	"n",		1,	"&#960;",	6)
CHAR("*r",			2,	"p",		1,	"&#961;",	6)
CHAR("*s",			2,	"o",		1,	"&#963;",	6)
CHAR("*t",			2,	"t",		1,	"&#964;",	6)
CHAR("*u",			2,	"u",		1,	"&#965;",	6)
CHAR("*f",			2,	"o",		1,	"&#981;",	6)
CHAR("*x",			2,	"x",		1,	"&#967;",	6)
CHAR("*q",			2,	"u",		1,	"&#968;",	6)
CHAR("*w",			2,	"w",		1,	"&#969;",	6)
CHAR("+h",			2,	"0",		1,	"&#977;",	6)
CHAR("+f",			2,	"o",		1,	"&#966;",	6)
CHAR("+p",			2,	"w",		1,	"&#982;",	6)
CHAR("+e",			2,	"e",		1,	"&#1013;",	7)
CHAR("ts",			2,	"s",		1,	"&#962;",	6)
d174 55
a228 55
CHAR(",C",			2,	"C",		1,	"&#199;",	6)
CHAR(",c",			2,	"c",		1,	"&#231;",	6)
CHAR("/L",			2,	"L",		1,	"&#321;",	6)
CHAR("/O",			2,	"O",		1,	"&#216;",	6)
CHAR("/l",			2,	"l",		1,	"&#322;",	6)
CHAR("/o",			2,	"o",		1,	"&#248;",	6)
CHAR("oA",			2,	"A",		1,	"&#197;",	6)
CHAR("oa",			2,	"a",		1,	"&#229;",	6)
CHAR(":A",			2,	"A",		1,	"&#196;",	6)
CHAR(":E",			2,	"E",		1,	"&#203;",	6)
CHAR(":I",			2,	"I",		1,	"&#207;",	6)
CHAR(":O",			2,	"O",		1,	"&#214;",	6)
CHAR(":U",			2,	"U",		1,	"&#220;",	6)
CHAR(":a",			2,	"a",		1,	"&#228;",	6)
CHAR(":e",			2,	"e",		1,	"&#235;",	6)
CHAR(":i",			2,	"i",		1,	"&#239;",	6)
CHAR(":o",			2,	"o",		1,	"&#245;",	6)
CHAR(":u",			2,	"u",		1,	"&#252;",	6)
CHAR(":y",			2,	"y",		1,	"&#255;",	6)
CHAR("\'A",			2,	"A",		1,	"&#193;",	6)
CHAR("\'E",			2,	"E",		1,	"&#201;",	6)
CHAR("\'I",			2,	"I",		1,	"&#205;",	6)
CHAR("\'O",			2,	"O",		1,	"&#211;",	6)
CHAR("\'U",			2,	"U",		1,	"&#218;",	6)
CHAR("\'a",			2,	"a",		1,	"&#225;",	6)
CHAR("\'e",			2,	"e",		1,	"&#233;",	6)
CHAR("\'i",			2,	"i",		1,	"&#237;",	6)
CHAR("\'o",			2,	"o",		1,	"&#243;",	6)
CHAR("\'u",			2,	"u",		1,	"&#250;",	6)
CHAR("^A",			2,	"A",		1,	"&#194;",	6)
CHAR("^E",			2,	"E",		1,	"&#202;",	6)
CHAR("^I",			2,	"I",		1,	"&#206;",	6)
CHAR("^O",			2,	"O",		1,	"&#212;",	6)
CHAR("^U",			2,	"U",		1,	"&#219;",	6)
CHAR("^a",			2,	"a",		1,	"&#226;",	6)
CHAR("^e",			2,	"e",		1,	"&#234;",	6)
CHAR("^i",			2,	"i",		1,	"&#238;",	6)
CHAR("^o",			2,	"o",		1,	"&#244;",	6)
CHAR("^u",			2,	"u",		1,	"&#251;",	6)
CHAR("`A",			2,	"A",		1,	"&#192;",	6)
CHAR("`E",			2,	"E",		1,	"&#200;",	6)
CHAR("`I",			2,	"I",		1,	"&#204;",	6)
CHAR("`O",			2,	"O",		1,	"&#210;",	6)
CHAR("`U",			2,	"U",		1,	"&#217;",	6)
CHAR("`a",			2,	"a",		1,	"&#224;",	6)
CHAR("`e",			2,	"e",		1,	"&#232;",	6)
CHAR("`i",			2,	"i",		1,	"&#236;",	6)
CHAR("`o",			2,	"o",		1,	"&#242;",	6)
CHAR("`u",			2,	"u",		1,	"&#249;",	6)
CHAR("~A",			2,	"A",		1,	"&#195;",	6)
CHAR("~N",			2,	"N",		1,	"&#209;",	6)
CHAR("~O",			2,	"O",		1,	"&#213;",	6)
CHAR("~a",			2,	"a",		1,	"&#227;",	6)
CHAR("~n",			2,	"n",		1,	"&#241;",	6)
CHAR("~o",			2,	"o",		1,	"&#245;",	6)
d231 12
a242 12
CHAR("<-",			2, 	"<-",		2,	"&#8592;",	7)
CHAR("->",			2, 	"->",		2,	"&#8594;",	7)
CHAR("<>",			2, 	"<>",		2,	"&#8596;",	7)
CHAR("da",			2, 	"v",		1,	"&#8595;",	7)
BOTH("ua",			2,	"^",		1,	"&#8593;",	7)
BOTH("va",			2,	"^v",		2,	"&#8597;",	7)
CHAR("lA",			2, 	"<=",		2,	"&#8656;",	7)
CHAR("rA",			2, 	"=>",		2,	"&#8658;",	7)
CHAR("hA",			2, 	"<=>",		3,	"&#8660;",	7)
CHAR("dA",			2, 	"v",		1,	"&#8659;",	7)
CHAR("uA",			2, 	"^",		1,	"&#8657;",	7)
CHAR("vA",			2, 	"^=v",		3,	"&#8661;",	7)
d245 10
a254 10
CHAR("AN",			2,	"^",		1,	"&#8743;",	7)
CHAR("OR",			2,	"v",		1,	"&#8744;",	7)
CHAR("no",			2,	"~",		1,	"&#172;",	6)
CHAR("tno",			3,	"~",		1,	"&#172;",	6)
CHAR("te",			2,	"3",		1,	"&#8707;",	7)
CHAR("fa",			2,	"V",		1,	"&#8704;",	7)
CHAR("st",			2,	"-)",		2,	"&#8715;",	7)
CHAR("tf",			2,	".:.",		3,	"&#8756;",	7)
CHAR("3d",			2,	".:.",		3,	"&#8756;",	7)
CHAR("or",			2,	"|",		1,	"|",		1)
d257 61
a317 61
CHAR("pl",			2,	"+",		1,	"&#43;",	5)
CHAR("mi",			2,	"-",		1,	"&#8722;",	7)
CHAR("-",			1,	"-",		1,	"-",		1)
CHAR("-+",			2,	"-+",		2,	"&#8723;",	7)
CHAR("+-",			2, 	"+-",		2,	"&#177;",	6)
CHAR("t+-",			3, 	"+-",		2,	"&#177;",	6)
CHAR("pc",			2, 	".",		1,	"&#183;",	6)
CHAR("md",			2, 	".",		1,	"&#8901;",	7)
CHAR("mu",			2,	"x",		1,	"&#215;",	6)
CHAR("tmu",			3,	"x",		1,	"&#215;",	6)
CHAR("c*",			2,	"x",		1,	"&#8855;",	7)
CHAR("c+",			2,	"+",		1,	"&#8853;",	7)
CHAR("di",			2,	"-:-",		3,	"&#247;",	6)
CHAR("tdi",			3,	"-:-",		3,	"&#247;",	6)
CHAR("f/",			2,	"/",		1,	"&#8260;",	7)
CHAR("**",			2, 	"*",		1,	"&#8727;",	7)
BOTH("<=",			2,	"<=",		2,	"&#8804;",	7)
BOTH(">=",			2,	">=",		2,	"&#8805;",	7)
CHAR("<<",			2, 	"<<",		2,	"&#8810;",	7)
CHAR(">>",			2, 	">>",		2,	"&#8811;",	7)
CHAR("eq",			2,	"=",		1,	"&#61;",	5)
CHAR("!=",			2, 	"!=",		2,	"&#8800;",	7)
CHAR("==",			2, 	"==",		2,	"&#8801;",	7)
CHAR("ne",			2, 	"!==",		3,	"&#8802;",	7)
CHAR("=~",			2,	"=~",		2,	"&#8773;",	7)
CHAR("-~",			2,	"-~",		2,	"&#8771;",	7)
CHAR("ap",			2,	"~",		1,	"&#8764;",	7)
CHAR("~~",			2,	"~~",		2,	"&#8776;",	7)
CHAR("~=",			2,	"~=",		2,	"&#8780;",	7)
CHAR("pt",			2,	"oc",		2,	"&#8733;",	7)
CHAR("es",			2,	"{}",		2,	"&#8709;",	7)
CHAR("mo",			2,	"E",		1,	"&#8712;",	7)
CHAR("nm",			2,	"!E",		2,	"&#8713;",	7)
CHAR("sb",			2,	"(=",		2,	"&#8834;",	7)
CHAR("nb",			2,	"(!=",		3,	"&#8836;",	7)
CHAR("sp",			2,	"=)",		2,	"&#8835;",	7)
CHAR("nc",			2,	"!=)",		3,	"&#8837;",	7)
CHAR("ib",			2,	"(=",		2,	"&#8838;",	7)
CHAR("ip",			2,	"=)",		2,	"&#8839;",	7)
CHAR("ca",			2,	"(^)",		3,	"&#8745;",	7)
CHAR("cu",			2,	"U",		1,	"&#8746;",	7)
CHAR("/_",			2,	"/_",		2,	"&#8736;",	7)
CHAR("pp",			2,	"_|_",		3,	"&#8869;",	7)
CHAR("is",			2,	"I",		1,	"&#8747;",	7)
CHAR("integral",		8,	"I",		1,	"&#8747;",	7)
CHAR("sum",			3,	"E",		1,	"&#8721;",	7)
CHAR("product",			7,	"TT",		2,	"&#8719;",	7)
CHAR("coproduct",		9,	"U",		1,	"&#8720;",	7)
CHAR("gr",			2,	"V",		1,	"&#8711;",	7)
CHAR("sr",			2,	"\\/",		2,	"&#8730;",	7)
CHAR("sqrt",			4,	"\\/",		2,	"&#8730;",	7)
CHAR("lc",			2,	"|~",		2,	"&#8968;",	7)
CHAR("rc",			2,	"~|",		2,	"&#8969;",	7)
CHAR("lf",			2,	"|_",		2,	"&#8970;",	7)
CHAR("rf",			2,	"_|",		2,	"&#8971;",	7)
CHAR("if",			2, 	"oo",		2,	"&#8734;",	7)
CHAR("Ah",			2,	"N",		1,	"&#8501;",	7)
CHAR("Im",			2,	"I",		1,	"&#8465;",	7)
CHAR("Re",			2,	"R",		1,	"&#8476;",	7)
CHAR("pd",			2,	"a",		1,	"&#8706;",	7)
CHAR("-h",			2,	"/h",		2,	"&#8463;",	7)
d320 12
a331 12
CHAR("ff",			2,	"ff",		2,	"&#64256;",	8)
CHAR("fi",			2,	"fi",		2,	"&#64257;",	8)
CHAR("fl",			2,	"fl",		2,	"&#64258;",	8)
CHAR("Fi",			2,	"ffi",		3,	"&#64259;",	8)
CHAR("Fl",			2,	"ffl",		3,	"&#64260;",	8)
BOTH("AE",			2,	"AE",		2,	"&#198;",	6)
BOTH("ae",			2,	"ae",		2,	"&#230;",	6)
CHAR("OE",			2,	"OE",		2,	"&#338;",	6)
CHAR("oe",			2,	"oe",		2,	"&#339;",	6)
CHAR("ss",			2,	"ss",		2,	"&#223;",	6)
CHAR("IJ",			2,	"IJ",		2,	"&#306;",	6)
CHAR("ij",			2,	"ij",		2,	"&#307;",	6)
d334 6
a339 6
CHAR("-D",			2,	"D",		1,	"&#208;",	6)
CHAR("Sd",			2,	"o",		1,	"&#240;",	6)
CHAR("TP",			2,	"b",		1,	"&#222;",	6)
CHAR("Tp",			2,	"b",		1,	"&#254;",	6)
CHAR(".i",			2,	"i",		1,	"&#305;",	6)
CHAR(".j",			2,	"j",		1,	"&#567;",	6)
d342 8
a349 8
CHAR("Do",			2,	"$",		1,	"$",		1)
CHAR("ct",			2,	"c",		1,	"&#162;",	6)
CHAR("Eu",			2,	"EUR",		3,	"&#8364;",	7)
CHAR("eu",			2,	"EUR",		3,	"&#8364;",	7)
CHAR("Ye",			2,	"Y",		1,	"&#165;",	6)
CHAR("Po",			2,	"L",		1,	"&#163;",	6)
CHAR("Cs",			2,	"x",		1,	"&#164;",	6)
CHAR("Fn",			2,	"f",		1,	"&#402;",	6)
d352 19
a370 19
STRING("--",			2,	"--",		2,	"&#8212;",	7)
STRING("PI",			2,	"pi",		2,	"&#960;",	6)
STRING("L\"",			2,	"``",		2,	"&#8220;",	7)
STRING("R\"",			2,	"\'\'",		2,	"&#8221;",	7)
STRING("C+",			2,	"C++",		3,	"C++",		3)
STRING("C`",			2,	"`",		1,	"&#8216;",	7)
STRING("C\'",			2,	"\'",		1,	"&#8217;",	7)
STRING("Aq",			2, 	"\'",		1,	"\'",		1)
STRING("^",			1,	"^",		1,	"^",		1)
STRING(",",			1,	",",		1,	",",		1)
STRING("~",			1,	"~",		1,	"~",		1)
STRING("/",			1,	"/",		1,	"/",		1)
STRING(":",			1,	"\"",		1,	"&#776;",	6)
STRING("8",			1,	"B",		1,	"&#946;",	6)
STRING("o",			1,	"o",		1,	"&#176;",	6)
STRING("D-",			2,	"D",		1,	"&#208;",	6)
STRING("d-",			2,	"o",		1,	"&#240;",	6)
STRING("Th",			2,	"b",		1,	"&#222;",	6)
STRING("th",			2,	"b",		1,	"&#254;",	6)
d373 26
a398 26
STRING("Am",			2,	"&",		1,	"&amp;",	5)
STRING("Ba",			2,	"|",		1,	"|",		1)
STRING("Ge",			2,	">=",		2,	"&#8805;",	7)
STRING("Gt",			2,	">",		1,	"&gt;",		4)
STRING("If",			2,	"infinity",	8,	"infinity",	8)
STRING("Le",			2,	"<=",		2,	"&#8804;",	7)
STRING("Lq",			2,	"``",		2,	"&#8220;",	7)
STRING("Lt",			2,	"<",		1,	"&lt;",		4)
STRING("Na",			2,	"NaN",		3,	"NaN",		3)
STRING("Ne",			2,	"!=",		2,	"&#8800;",	7)
STRING("Pi",			2,	"pi",		2,	"&#960;",	6)
STRING("Pm",			2,	"+-",		2,	"&#177;",	6)
STRING("R",			1,	"(R)",		3,	"&#174;",	6)
STRING("Rq",			2,	"\'\'",		2,	"&#8221;",	7)
STRING("Tm",			2,	"tm",		2,	"&#8482;",	7)
STRING("left-bracket",		12,	"[",		1,	"[",		1)
STRING("left-parenthesis",	16,	"(",		1,	"(",		1)
STRING("left-singlequote",	16,	"`",		1,	"&#8216;",	7)
STRING("lp",			2,	"(",		1,	"(",		1)
STRING("q",			1,	"\"",		1,	"&quot;",	6)
STRING("quote-left",		10,	"`",		1,	"&#8216;",	7)
STRING("quote-right",		11,	"\'",		1,	"&#8217;",	7)
STRING("right-bracket",		13,	"]",		1,	"]",		1)
STRING("right-parenthesis",	17,	")",		1,	")",		1)
STRING("right-singlequote",	17,	"\'",		1,	"&#8217;",	7)
STRING("rp",			2,	")",		1,	")",		1)
d401 7
a407 7
CHAR("ba",			2, 	"|",		1,	"&#124;",	6)
CHAR("br",			2, 	"|",		1,	"&#9474;",	7)
CHAR("ul",			2, 	"_",		1,	"&#95;",	5)
CHAR("rl",			2, 	"-",		1,	"&#8254;",	7)
CHAR("bb",			2, 	"|",		1,	"&#166;",	6)
CHAR("sl",			2, 	"/",		1,	"&#47;",	5)
CHAR("rs",			2, 	"\\",		1,	"&#92;",	5)
d410 14
a423 14
CHAR("ci",			2, 	"o",		1,	"&#9675;",	7)
CHAR("bu",			2, 	"o",		1,	"&#8226;",	7)
CHAR("dd",			2,	"=",		1,	"&#8225;",	7)
CHAR("dg",			2,	"-",		1,	"&#8224;",	7)
CHAR("lz",			2,	"<>",		2,	"&#9674;",	7)
CHAR("sq",			2,	"[]",		2,	"&#9633;",	7)
CHAR("ps",			2,	"9|",		2,	"&#182;",	6)
CHAR("sc",			2,	"S",		1,	"&#167;",	6)
CHAR("lh",			2,	"<=",		2,	"&#9756;",	7)
CHAR("rh",			2,	"=>",		2,	"&#9758;",	7)
CHAR("at",			2,	"@@",		1,	"&#64;",	5)
CHAR("sh",			2,	"#",		1,	"&#35;",	5)
CHAR("CR",			2,	"_|",		2,	"&#8629;",	7)
CHAR("OK",			2,	"\\/",		2,	"&#10003;",	8)
d426 3
a428 3
CHAR("co",			2, 	"(C)",		3,	"&#169;",	6)
CHAR("rg",			2, 	"(R)",		3,	"&#174;",	6)
CHAR("tm",			2, 	"tm",		2,	"&#8482;",	7)
d431 7
a437 7
CHAR(".",			1,	".",		1,	".",		1)
CHAR("r!",			2,	"i",		1,	"&#161;",	6)
CHAR("r?",			2,	"c",		1,	"&#191;",	6)
CHAR("em",			2, 	"--",		2,	"&#8212;",	7)
CHAR("en",			2, 	"-",		1,	"&#8211;",	7)
CHAR("hy",			2, 	"-",		1,	"&#8208;",	7)
CHAR("e",			1,	"\\",		1,	"\\",		1)
d440 5
a444 5
CHAR("de",			2,	"o",		1,	"&#176;",	6)
CHAR("%0",			2,	"%o",		2,	"&#8240;",	7)
CHAR("fm",			2,	"\'",		1,	"&#8242;",	7)
CHAR("sd",			2,	"\"",		1,	"&#8243;",	7)
CHAR("mc",			2,	"mu",		2,	"&#181;",	6)
@


1.24
log
@Fixed condition of `\}' closing a conditional at the start of the line.

Fixed flushed-out condition of \} causing subsequent arguments to be
truncated, when in fact the whole line should be passed through (if the
conditional succeeds) to the front-end and the \} ignored there.

Added regression test of this behaviour.
@
text
@d1 1
a1 1
/*	$Id: chars.in,v 1.23 2010/05/16 01:35:37 schwarze Exp $ */
d3 1
a3 1
 * Copyright (c) 2009 Kristaps Dzonsons <kristaps@@kth.se>
@


1.23
log
@sync to OpenBSD:
introduce a #define to get rid of the magic number
describing the ASCII character used to represent non-breaking space;
ok kristaps
@
text
@d1 1
a1 1
/*	$Id: chars.in,v 1.22 2010/03/30 19:20:33 kristaps Exp $ */
d47 1
@


1.22
log
@Escape TH -> Th (noticed by Joerg Sonnenberger).
Moved pod2man escapes into man.3 (they're not part of -man or -mdoc, technically).
@
text
@d1 1
a1 1
/*	$Id: chars.in,v 1.21 2010/03/23 13:25:01 kristaps Exp $ */
d34 1
a34 1
static const char ascii_nbrsp[2] = { 31, 0 };
@


1.21
log
@Added stupid pod2man reserved strings.
@
text
@d1 1
a1 1
/*	$Id: chars.in,v 1.20 2010/01/05 19:51:10 kristaps Exp $ */
d368 1
a368 1
STRING("TH",			2,	"b",		1,	"&#222;",	6)
@


1.20
log
@Removed references to `\\' escape (noted by Jason McIntyre, Ingo Schwarze).
@
text
@d1 1
a1 1
/*	$Id: chars.in,v 1.19 2009/11/05 07:21:02 kristaps Exp $ */
d53 1
a53 1
CHAR("\'",			1,	"\'",		1,	"&#769;",	6)
d56 1
a56 1
CHAR("`",			1,	"`",		1,	"&#768;",	6)
d324 2
a325 2
CHAR("AE",			2,	"AE",		2,	"&#198;",	6)
CHAR("ae",			2,	"ae",		2,	"&#230;",	6)
d350 21
@


1.19
log
@Added functionality of -Tascii non-breaking `\~' space.
@
text
@d1 1
a1 1
/*	$Id: chars.in,v 1.18 2009/09/24 11:55:28 kristaps Exp $ */
a414 1
CHAR("\\",			1,	"\\",		1,	"\\",		1)
@


1.18
log
@Fix in -Tascii where `Lb' causes line-break in any section (should only happen in LIBRARY).
`Fn' first parameter is broken apart into ftype and fname in -Thtml (for correct style application).
Fixed \0 special character.
@
text
@d1 1
a1 1
/*	$Id: chars.in,v 1.17 2009/09/23 11:02:21 kristaps Exp $ */
d33 5
d42 1
a42 1
CHAR("~",			1,	" ",		1,	"&#160;",	6)
d424 2
@


1.17
log
@All special characters sync'd with groff, both -Thtml and -Tascii.
Re-added text links to index.sgml (just for show).
@
text
@d1 1
a1 1
/*	$Id: chars.in,v 1.16 2009/09/23 09:10:52 kristaps Exp $ */
d35 1
a35 1
CHAR("0",			1,	" ",		1,	"&#8194;",	6)
@


1.16
log
@Sync'd currency symbols with newest groff.
@
text
@d1 1
a1 1
/*	$Id: chars.in,v 1.15 2009/09/23 09:06:44 kristaps Exp $ */
d33 5
a37 32
/* TODO--not categorised yet. */
STRING("Am",			2,	"&",		1,	"&amp;",	5)
STRING("Ba",			2,	"|",		1,	"|",		0)
STRING("Ge",			2,	">=",		2,	"&#8805;",	7)
STRING("Gt",			2,	">",		1,	"&gt;",		4)
STRING("If",			2,	"infinity",	8,	"infinity",	8)
STRING("Le",			2,	"<=",		2,	"&#8804;",	7)
STRING("Lq",			2,	"``",		2,	"&#8220;",	7)
STRING("Lt",			2,	"<",		1,	"&lt;",		4)
STRING("Na",			2,	"NaN",		3,	"NaN",		3)
STRING("Ne",			2,	"!=",		2,	"&#8800;",	7)
STRING("Pi",			2,	"pi",		2,	"&#960;",	6)
STRING("Pm",			2,	"+-",		2,	"&#177;",	6)
STRING("R",			1,	"(R)",		3,	"&#174;",	6)
STRING("Rq",			2,	"\'\'",		2,	"&#8221;",	7)
STRING("Tm",			2,	"tm",		2,	"&#8482;",	7)
STRING("left-bracket",		12,	"[",		1,	"[",		1)
STRING("left-parenthesis",	16,	"(",		1,	"(",		1)
STRING("left-singlequote",	16,	"`",		1,	"&#8216;",	7)
STRING("lp",			2,	"(",		1,	"(",		1)
STRING("q",			1,	"\"",		1,	"&quot;",	6)
STRING("quote-left",		10,	"`",		1,	"&#8216;",	7)
STRING("quote-right",		11,	"\'",		1,	"&#8217;",	7)
STRING("right-bracket",		13,	"]",		1,	"]",		1)
STRING("right-parenthesis",	17,	")",		1,	")",		1)
STRING("right-singlequote",	17,	"\'",		1,	"&#8217;",	7)
STRING("rp",			2,	")",		1,	")",		1)
CHAR("-",			1,	"-",		1,	"-",		1)
CHAR(".",			1,	".",		1,	".",		1)
CHAR("~",			1,	" ",		1,	"",	0)
CHAR("0",			1,	" ",		1,	"&#160;",	6)
CHAR(" ",			1,	" ",		1,	"&#160;",	6)
a39 2
CHAR("\'",			1,	"\'",		1,	"",	0)
CHAR("\\",			1,	"\\",		1,	"\\",		1)
d41 1
a41 26
CHAR("`",			1,	"`",		1,	"",	0)
CHAR("aa",			2, 	"\'",		1,	"",	0)
CHAR("ba",			2, 	"|",		1,	"",	0)
CHAR("bb",			2, 	"|",		1,	"",	0)
CHAR("bu",			2, 	"o",		1,	"&#8226;",	7)
CHAR("c",			1,	"",		0,	"",	0)
CHAR("ci",			2, 	"O",		1,	"",	0)
CHAR("co",			2, 	"(C)",		3,	"",	0)
CHAR("dd",			2,	"=",		1,	"",	0)
CHAR("de",			2,	"o",		1,	"",	0)
CHAR("dg",			2,	"-",		1,	"",	0)
CHAR("e",			1,	"\\",		1,	"\\",		1)
CHAR("em",			2, 	"--",		2,	"&#8212;",	7)
CHAR("en",			2, 	"-",		1,	"&#8211;",	7)
CHAR("hy",			2, 	"-",		1,	"",	0)
CHAR("lh",			2,	"<=",		2,	"",	0)
CHAR("oA",			2,	"A",		1,	"",	0)
CHAR("oa",			2,	"a",		1,	"",	0)
CHAR("ps",			2,	"9|",		2,	"",	0)
CHAR("r!",			2,	"i",		1,	"",	0)
CHAR("r?",			2,	"c",		1,	"",	0)
CHAR("rg",			2, 	"(R)",		3,	"",	0)
CHAR("rh",			2,	"=>",		2,	"",	0)
CHAR("sc",			2,	"S",		1,	"",	0)
CHAR("tm",			2, 	"tm",		2,	"",	0)
CHAR("|",			1,	"",		0,	"",	0)
d48 1
d51 1
d167 1
a167 1
/* Accented characters. */
d174 2
d224 1
a224 1
/* Arrows. */
d253 1
d344 75
@


1.15
log
@Sync'd special letters and ligatures with newest groff.
@
text
@d1 1
a1 1
/*	$Id: chars.in,v 1.14 2009/09/23 01:04:11 kristaps Exp $ */
a33 2
CHAR("Ye",			2,	"Y",		1,	"",	0)
CHAR("Fn",			2,	"f",		1,	"",	0)
a66 4
CHAR("Cs",			2,	"x",		1,	"",	0)
CHAR("Do",			2,	"$",		1,	"",	0)
CHAR("Eu",			2,	"EUR",		3,	"",	0)
CHAR("Po",			2,	"L",		1,	"",	0)
a77 1
CHAR("ct",			2,	"c",		1,	"",	0)
a83 1
CHAR("eu",			2,	"EUR",		3,	"",	0)
d383 10
@


1.14
log
@Arrows & brackets sync'd with newest groff.
@
text
@d1 1
a1 1
/*	$Id: chars.in,v 1.13 2009/09/23 00:03:45 kristaps Exp $ */
d34 2
d62 42
a171 11
/* Punctuation. */
CHAR("-",			1,	"-",		1,	"-",		1)
CHAR(".",			1,	".",		1,	".",		1)

/* White-space. */
CHAR("~",			1,	" ",		1,	"",	0)
CHAR("0",			1,	" ",		1,	"&#160;",	6)
CHAR(" ",			1,	" ",		1,	"&#160;",	6)
CHAR("%",			1,	"",		0,	"",		0)
CHAR("&",			1,	"",		0,	"",		0)

a229 1
CHAR("-D",			2,	"D",		1,	"&#208;",	6)
d370 6
a375 1
/* TODO--not categorised yet. */
d377 14
a390 49
CHAR("Cs",			2,	"x",		1,	"",	0)
CHAR("Do",			2,	"$",		1,	"",	0)
CHAR("Eu",			2,	"EUR",		3,	"",	0)
CHAR("Fi",			2,	"ffi",		3,	"",	0)
CHAR("Fl",			2,	"ffl",		3,	"",	0)
CHAR("Fn",			2,	"f",		1,	"",	0)
CHAR("OE",			2,	"OE",		2,	"",	0)
CHAR("Po",			2,	"L",		1,	"",	0)
CHAR("Sd",			2,	"o",		1,	"",	0)
CHAR("TP",			2,	"b",		1,	"",	0)
CHAR("Tp",			2,	"b",		1,	"",	0)
CHAR("Ye",			2,	"Y",		1,	"",	0)
CHAR("\'",			1,	"\'",		1,	"",	0)
CHAR("\\",			1,	"\\",		1,	"\\",		1)
CHAR("^",			1,	"",		0,	"",		0)
CHAR("`",			1,	"`",		1,	"",	0)
CHAR("aa",			2, 	"\'",		1,	"",	0)
CHAR("ae",			2,	"ae",		2,	"",	0)
CHAR("ba",			2, 	"|",		1,	"",	0)
CHAR("bb",			2, 	"|",		1,	"",	0)
CHAR("bu",			2, 	"o",		1,	"&#8226;",	7)
CHAR("c",			1,	"",		0,	"",	0)
CHAR("ci",			2, 	"O",		1,	"",	0)
CHAR("co",			2, 	"(C)",		3,	"",	0)
CHAR("ct",			2,	"c",		1,	"",	0)
CHAR("dd",			2,	"=",		1,	"",	0)
CHAR("de",			2,	"o",		1,	"",	0)
CHAR("dg",			2,	"-",		1,	"",	0)
CHAR("e",			1,	"\\",		1,	"\\",		1)
CHAR("em",			2, 	"--",		2,	"&#8212;",	7)
CHAR("en",			2, 	"-",		1,	"&#8211;",	7)
CHAR("eu",			2,	"EUR",		3,	"",	0)
CHAR("ff",			2,	"ff",		2,	"",	0)
CHAR("fi",			2,	"fi",		2,	"",	0)
CHAR("fl",			2,	"fl",		2,	"",	0)
CHAR("hy",			2, 	"-",		1,	"",	0)
CHAR("lh",			2,	"<=",		2,	"",	0)
CHAR("oA",			2,	"A",		1,	"",	0)
CHAR("oa",			2,	"a",		1,	"",	0)
CHAR("oe",			2,	"oe",		2,	"",	0)
CHAR("ps",			2,	"9|",		2,	"",	0)
CHAR("r!",			2,	"i",		1,	"",	0)
CHAR("r?",			2,	"c",		1,	"",	0)
CHAR("rg",			2, 	"(R)",		3,	"",	0)
CHAR("rh",			2,	"=>",		2,	"",	0)
CHAR("sc",			2,	"S",		1,	"",	0)
CHAR("ss",			2,	"ss",		2,	"",	0)
CHAR("tm",			2, 	"tm",		2,	"",	0)
CHAR("|",			1,	"",		0,	"",	0)
@


1.13
log
@Quotes sync'd with newest groff.
@
text
@d1 1
a1 1
/*	$Id: chars.in,v 1.12 2009/09/22 23:34:14 kristaps Exp $ */
d33 1
d92 35
a126 2

BOTH("ua",			2,	"^",		1,	"",	0)
d133 1
a249 2
CHAR("~",			1,	" ",		1,	"",	0)

d251 1
a252 1
CHAR("<-",			2, 	"<-",		2,	"&#8592;",	7)
d254 9
d338 1
a364 2
CHAR("dA",			2, 	"v",		1,	"",	0)
CHAR("da",			2, 	"v",		1,	"",	0)
a374 1
CHAR("hA",			2, 	"<=>",		3,	"",	0)
a375 4
CHAR("lA",			2, 	"<=",		2,	"",	0)
CHAR("lB",			2, 	"[",		1,	"[",		1)
CHAR("lC",			2, 	"{",		1,	"{",		1)
CHAR("la",			2, 	"<",		1,	"&lt;",		4)
a382 4
CHAR("rA",			2, 	"=>",		2,	"",	0)
CHAR("rB",			2, 	"]",		1,	"]",		1)
CHAR("rC",			2, 	"}",		1,	"}",		1)
CHAR("ra",			2, 	">",		1,	"&gt;",		4)
a387 2
CHAR("uA",			2, 	"^",		1,	"",	0)
CHAR("ua",			2, 	"^",		1,	"",	0)
@


1.12
log
@Accent marks sync'd with current groff.
@
text
@d1 1
a1 1
/*	$Id: chars.in,v 1.11 2009/09/22 23:15:58 kristaps Exp $ */
d77 3
d82 10
a296 1
CHAR("Bq",			2, 	",,",		2,	"&#8222;",	7)
a299 1
CHAR("Fc",			2,	">>",		2,	"",	0)
a302 1
CHAR("Fo",			2,	"<<",		2,	"",	0)
a314 1
CHAR("aq",			2, 	"\'",		1,	"&#8217;",	7)
a316 1
CHAR("bq",			2, 	",",		1,	"",	0)
a330 1
CHAR("fc",			2,	">",		1,	"",	0)
a333 1
CHAR("fo",			2,	"<",		1,	"",	0)
a343 1
CHAR("oq",			2, 	"`",		1,	"&#8216;",	7)
@


1.11
log
@Many more UTF-8 symbols in place.
Started partitioning chars.in into sections corresponding to mandoc_char.7.
Correctly ordered Greek letters.
Sync'd all mathematical and logical symbols with current groff.
@
text
@d1 1
a1 1
/*	$Id: chars.in,v 1.10 2009/09/22 16:10:52 kristaps Exp $ */
d60 16
a76 2
BOTH("aa",			2,	"\'",		1,	"&#180;",	6)
BOTH("ga",			2,	"`",		1,	"`",		1)
a115 1

a201 1
/* Accents. */
a302 3
CHAR("a-",			2,	"-",		1,	"",	0)
CHAR("a\"",			2,	"\"",		1,	"",	0)
CHAR("a^",			2,	"^",		1,	"",	0)
a303 3
CHAR("ab",			2,	"`",		1,	"",	0)
CHAR("ac",			2,	",",		1,	"",	0)
CHAR("ad",			2,	"\"",		1,	"",	0)
a304 2
CHAR("ah",			2,	"v",		1,	"",	0)
CHAR("ao",			2,	"o",		1,	"",	0)
a305 1
CHAR("a~",			2, 	"~",		1,	"",	0)
a327 1
CHAR("ga",			2, 	"`",		1,	"",	0)
a328 1
CHAR("ho",			2,	",",		1,	"",	0)
@


1.10
log
@Fix segfault in -Thtml column lists.
Added some more UTF-8 chars.
mandoc_char.7 now has all special characters rendered.
Fixed column layout in -Thtml.
@
text
@d1 1
a1 1
/*	$Id: chars.in,v 1.9 2009/09/22 10:11:57 kristaps Exp $ */
d60 1
a60 2
BOTH("<=",			2,	"<=",		2,	"&#8804;",	7)
BOTH(">=",			2,	">=",		2,	"&#8804;",	7)
d67 11
a77 7
CHAR(" ",			1,	" ",		1,	" ",		1)
CHAR("!=",			2, 	"!=",		2,	"&#8800;",	7)
CHAR("%",			1,	"",		0,	"",	0)
CHAR("&",			1,	"",		0,	"",	0)
CHAR("sb",			2,	"(=",		2,	"&#8834;",	7)
CHAR("sp",			2,	"=)",		2,	"&#8835;",	7)
CHAR("**",			2, 	"*",		1,	"",	0)
d80 1
a80 1
CHAR("*C",			2,	"H",		1,	"&#926;",	6)
d83 2
a84 2
CHAR("*F",			2,	"O_",		1,	"&#934;",	6)
CHAR("*G",			2,	"|",		1,	"&#915;",	6)
d91 1
a93 1
CHAR("*Q",			2,	"Y",		1,	"&#936;",	6)
d98 3
d102 1
a102 3
CHAR("*X",			2,	"X",		1,	"&#935;",	6)
CHAR("*Y",			2,	"H",		1,	"&#919;",	6)
CHAR("*Z",			2,	"Z",		1,	"&#918;",	6)
d105 1
a105 1
CHAR("*c",			2,	"E",		1,	"&#958;",	6)
d108 2
a109 2
CHAR("*f",			2,	"o",		1,	"&#981;",	6)
CHAR("*g",			2,	"y",		1,	"&#945;",	6)
d116 1
a118 1
CHAR("*q",			2,	"u",		1,	"&#968;",	6)
d123 3
a126 5
CHAR("*x",			2,	"x",		1,	"&#967;",	6)
CHAR("*y",			2,	"n",		1,	"&#951;",	6)
CHAR("*z",			2,	"C",		1,	"&#950;",	6)
CHAR("+-",			2, 	"+-",		2,	"&#177;",	6)
CHAR("+f",			2,	"o",		1,	"&#876;",	6)
d128 1
d130 4
d136 137
a272 31
CHAR("-",			1,	"-",		1,	"-",		1)
CHAR("->",			2, 	"->",		2,	"",	0)
CHAR("-D",			2,	"D",		1,	"",	0)
CHAR(".",			1,	".",		1,	".",		1)
CHAR("/L",			2,	"L",		1,	"",	0)
CHAR("/O",			2,	"O",		1,	"",	0)
CHAR("/l",			2,	"l",		1,	"",	0)
CHAR("/o",			2,	"o",		1,	"",	0)
CHAR("0",			1,	" ",		1,	"",	0)
CHAR(":A",			2,	"A",		1,	"",	0)
CHAR(":E",			2,	"E",		1,	"",	0)
CHAR(":I",			2,	"I",		1,	"",	0)
CHAR(":O",			2,	"O",		1,	"",	0)
CHAR(":U",			2,	"U",		1,	"",	0)
CHAR(":a",			2,	"a",		1,	"",	0)
CHAR(":e",			2,	"e",		1,	"",	0)
CHAR(":i",			2,	"i",		1,	"",	0)
CHAR(":o",			2,	"o",		1,	"",	0)
CHAR(":u",			2,	"u",		1,	"",	0)
CHAR(":y",			2,	"y",		1,	"",	0)
CHAR("<-",			2, 	"<-",		2,	"",	0)
CHAR("<=",			2, 	"<=",		2,	"",	0)
CHAR("<>",			2, 	"<>",		2,	"",	0)
CHAR("=)",			2,	"=)",		2,	"",	0)
CHAR("==",			2, 	"==",		2,	"",	0)
CHAR("=~",			2,	"=~",		2,	"",	0)
CHAR(">=",			2, 	">=",		2,	"",	0)
CHAR("AE",			2,	"AE",		2,	"",	0)
CHAR("AN",			2,	"^",		1,	"",	0)
CHAR("Ah",			2,	"N",		1,	"",	0)
CHAR("Bq",			2, 	",,",		2,	"",	0)
a280 1
CHAR("Im",			2,	"I",		1,	"",	0)
a281 1
CHAR("OR",			2,	"v",		1,	"",	0)
a282 1
CHAR("Re",			2,	"R",		1,	"",	0)
d288 2
a289 22
CHAR("\'A",			2,	"A",		1,	"",	0)
CHAR("\'E",			2,	"E",		1,	"",	0)
CHAR("\'I",			2,	"I",		1,	"",	0)
CHAR("\'O",			2,	"O",		1,	"",	0)
CHAR("\'U",			2,	"U",		1,	"",	0)
CHAR("\'a",			2,	"a",		1,	"",	0)
CHAR("\'e",			2,	"e",		1,	"",	0)
CHAR("\'i",			2,	"i",		1,	"",	0)
CHAR("\'o",			2,	"o",		1,	"",	0)
CHAR("\'u",			2,	"u",		1,	"",	0)
CHAR("\\",			1,	"\\",		1,	"",	0)
CHAR("^",			1,	"",		0,	"",	0)
CHAR("^A",			2,	"A",		1,	"",	0)
CHAR("^E",			2,	"E",		1,	"",	0)
CHAR("^I",			2,	"I",		1,	"",	0)
CHAR("^O",			2,	"O",		1,	"",	0)
CHAR("^U",			2,	"U",		1,	"",	0)
CHAR("^a",			2,	"a",		1,	"",	0)
CHAR("^e",			2,	"e",		1,	"",	0)
CHAR("^i",			2,	"i",		1,	"",	0)
CHAR("^o",			2,	"o",		1,	"",	0)
CHAR("^u",			2,	"u",		1,	"",	0)
a290 10
CHAR("`A",			2,	"A",		1,	"",	0)
CHAR("`E",			2,	"E",		1,	"",	0)
CHAR("`I",			2,	"I",		1,	"",	0)
CHAR("`O",			2,	"O",		1,	"",	0)
CHAR("`U",			2,	"U",		1,	"",	0)
CHAR("`a",			2,	"a",		1,	"",	0)
CHAR("`e",			2,	"e",		1,	"",	0)
CHAR("`i",			2,	"i",		1,	"",	0)
CHAR("`o",			2,	"o",		1,	"",	0)
CHAR("`u",			2,	"u",		1,	"",	0)
a300 1
CHAR("ap",			2,	"~",		1,	"",	0)
a307 1
CHAR("ca",			2,	"(^)",		3,	"",	0)
a310 1
CHAR("cu",			2,	"U",		1,	"",	0)
a315 1
CHAR("di",			2,	"-:-",		3,	"",	0)
a318 2
CHAR("eq",			2,	"=",		1,	"",	0)
CHAR("es",			2,	"{}",		2,	"",	0)
a319 1
CHAR("fa",			2,	"V",		1,	"",	0)
a325 1
CHAR("gr",			2,	"V",		1,	"",	0)
a328 1
CHAR("if",			2, 	"oo",		2,	"",	0)
a333 5
CHAR("mo",			2,	"E",		1,	"",	0)
CHAR("mu",			2,	"x",		1,	"",	0)
CHAR("na",			2, 	"NaN",		3,	"",	0)
CHAR("nm",			2,	"E",		1,	"",	0)
CHAR("no",			2,	"~",		1,	"",	0)
a337 2
CHAR("pd",			2,	"a",		1,	"",	0)
CHAR("pl",			2,	"+",		1,	"",	0)
a348 3
CHAR("st",			2,	"-)",		2,	"",	0)
CHAR("te",			2,	"3",		1,	"",	0)
CHAR("tf",			2,	".:.",		3,	"",	0)
a349 1
CHAR("ts",			2,	"s",		1,	"",	0)
a352 9
CHAR("~",			1,	" ",		1,	"",	0)
CHAR("~=",			2,	"~=",		2,	"",	0)
CHAR("~A",			2,	"A",		1,	"",	0)
CHAR("~N",			2,	"N",		1,	"",	0)
CHAR("~O",			2,	"O",		1,	"",	0)
CHAR("~a",			2,	"a",		1,	"",	0)
CHAR("~n",			2,	"n",		1,	"",	0)
CHAR("~o",			2,	"o",		1,	"",	0)
CHAR("~~",			2,	"~~",		2,	"",	0)
@


1.9
log
@Fixed some characters.
Initial push of mandoc_char showing the current character rendering (useful for testing, too).
@
text
@d1 1
a1 1
/*	$Id: chars.in,v 1.8 2009/09/22 10:07:01 kristaps Exp $ */
d47 1
a47 1
STRING("Tm",			2,	"tm",		2,	"&#8424;",	7)
d114 10
a123 10
CHAR("*q",			2,	"u",		1,	"",	0)
CHAR("*r",			2,	"p",		1,	"",	0)
CHAR("*s",			2,	"o",		1,	"",	0)
CHAR("*t",			2,	"t",		1,	"",	0)
CHAR("*u",			2,	"u",		1,	"",	0)
CHAR("*w",			2,	"w",		1,	"",	0)
CHAR("*x",			2,	"x",		1,	"",	0)
CHAR("*y",			2,	"n",		1,	"",	0)
CHAR("*z",			2,	"C",		1,	"",	0)
CHAR("+-",			2, 	"+-",		2,	"",	0)
d127 2
a128 2
CHAR(",C",			2,	"C",		1,	"",	0)
CHAR(",c",			2,	"c",		1,	"",	0)
@


1.8
log
@Many more characters for HMTL (mostly Greek).
@
text
@d1 1
a1 1
/*	$Id: chars.in,v 1.7 2009/09/21 23:12:08 kristaps Exp $ */
d99 15
a113 15
CHAR("*a",			2,	"a",		1,	"&#945;",	0)
CHAR("*b",			2,	"B",		1,	"&#946;",	0)
CHAR("*c",			2,	"E",		1,	"&#958;",	0)
CHAR("*d",			2,	"d",		1,	"&#948;",	0)
CHAR("*e",			2,	"e",		1,	"&#949;",	0)
CHAR("*f",			2,	"o",		1,	"&#981;",	0)
CHAR("*g",			2,	"y",		1,	"&#945;",	0)
CHAR("*h",			2,	"0",		1,	"&#952;",	0)
CHAR("*i",			2,	"i",		1,	"&#953;",	0)
CHAR("*k",			2,	"k",		1,	"&#954;",	0)
CHAR("*l",			2,	"\\",		1,	"&#955;",	0)
CHAR("*m",			2,	"u",		1,	"&#956;",	0)
CHAR("*n",			2,	"v",		1,	"&#957;",	0)
CHAR("*o",			2,	"o",		1,	"&#959;",	0)
CHAR("*p",			2,	"n",		1,	"&#960;",	0)
@


1.7
log
@A few more macros in -Thtml.
@
text
@d1 1
a1 1
/*	$Id: chars.in,v 1.6 2009/09/21 14:40:31 kristaps Exp $ */
d69 1
a69 1
CHAR("!=",			2, 	"!=",		2,	"",	0)
d72 2
a73 1
CHAR("(=",			2,	"(=",		2,	"",	0)
d75 39
a113 39
CHAR("*A",			2,	"A",		1,	"",	0)
CHAR("*B",			2,	"B",		1,	"",	0)
CHAR("*C",			2,	"H",		1,	"",	0)
CHAR("*D",			2,	"/\\",		2,	"",	0)
CHAR("*E",			2,	"E",		1,	"",	0)
CHAR("*F",			2,	"O_",		1,	"",	0)
CHAR("*G",			2,	"|",		1,	"",	0)
CHAR("*H",			2,	"O",		1,	"",	0)
CHAR("*I",			2,	"I",		1,	"",	0)
CHAR("*K",			2,	"K",		1,	"",	0)
CHAR("*L",			2,	"/\\",		2,	"",	0)
CHAR("*M",			2,	"M",		1,	"",	0)
CHAR("*N",			2,	"N",		1,	"",	0)
CHAR("*O",			2,	"O",		1,	"",	0)
CHAR("*P",			2,	"TT",		2,	"",	0)
CHAR("*Q",			2,	"Y",		1,	"",	0)
CHAR("*R",			2,	"P",		1,	"",	0)
CHAR("*S",			2,	">",		1,	"",	0)
CHAR("*T",			2,	"T",		1,	"",	0)
CHAR("*U",			2,	"Y",		1,	"",	0)
CHAR("*W",			2,	"O",		1,	"",	0)
CHAR("*X",			2,	"X",		1,	"",	0)
CHAR("*Y",			2,	"H",		1,	"",	0)
CHAR("*Z",			2,	"Z",		1,	"",	0)
CHAR("*a",			2,	"a",		1,	"",	0)
CHAR("*b",			2,	"B",		1,	"",	0)
CHAR("*c",			2,	"E",		1,	"",	0)
CHAR("*d",			2,	"d",		1,	"",	0)
CHAR("*e",			2,	"e",		1,	"",	0)
CHAR("*f",			2,	"o",		1,	"",	0)
CHAR("*g",			2,	"y",		1,	"",	0)
CHAR("*h",			2,	"0",		1,	"",	0)
CHAR("*i",			2,	"i",		1,	"",	0)
CHAR("*k",			2,	"k",		1,	"",	0)
CHAR("*l",			2,	"\\",		1,	"",	0)
CHAR("*m",			2,	"u",		1,	"",	0)
CHAR("*n",			2,	"v",		1,	"",	0)
CHAR("*o",			2,	"o",		1,	"",	0)
CHAR("*p",			2,	"n",		1,	"",	0)
d124 3
a126 3
CHAR("+f",			2,	"o",		1,	"",	0)
CHAR("+h",			2,	"0",		1,	"",	0)
CHAR("+p",			2,	"w",		1,	"",	0)
@


1.6
log
@Removed man handling in -Thtml (for now).
Added some UTF chars to chars.in.
@
text
@d1 1
a1 1
/*	$Id: chars.in,v 1.5 2009/09/20 19:25:06 kristaps Exp $ */
d259 1
a259 1
CHAR("lC",			2, 	"{",		1,	"",	0)
d278 1
a278 1
CHAR("rC",			2, 	"}",		1,	"",	0)
@


1.5
log
@Headers and footers in -Thtml.  Various minor additions.
@
text
@d1 1
a1 1
/*	$Id: chars.in,v 1.4 2009/09/20 17:24:57 kristaps Exp $ */
d35 1
a35 1
STRING("Ge",			2,	">=",		2,	"&#8804;",	7)
d43 9
a51 9
STRING("Pi",			2,	"pi",		2,	"",	0)
STRING("Pm",			2,	"+-",		2,	"",	0)
STRING("R",			1,	"(R)",		3,	"",	0)
STRING("Rq",			2,	"\'\'",		2,	"",	0)
STRING("Tm",			2,	"tm",		2,	"",	0)
STRING("left-bracket",		12,	"[",		1,	"",	0)
STRING("left-parenthesis",	16,	"(",		1,	"",	0)
STRING("left-singlequote",	16,	"`",		1,	"",	0)
STRING("lp",			2,	"(",		1,	"",	0)
d53 6
a58 6
STRING("quote-left",		10,	"`",		1,	"",	0)
STRING("quote-right",		11,	"\'",		1,	"",	0)
STRING("right-bracket",		13,	"]",		1,	"",	0)
STRING("right-parenthesis",	17,	")",		1,	"",	0)
STRING("right-singlequote",	17,	"\'",		1,	"",	0)
STRING("rp",			2,	")",		1,	"",	0)
d60 4
a63 4
BOTH("<=",			2,	"<=",		2,	"",	0)
BOTH(">=",			2,	">=",		2,	"",	0)
BOTH("aa",			2,	"\'",		1,	"",	0)
BOTH("ga",			2,	"`",		1,	"",	0)
@


1.4
log
@Some extra html tags and near-complete Bl: -tag is hopeless (synonym for -hang, now) and -column is still pending.
@
text
@d1 1
a1 1
/*	$Id: chars.in,v 1.3 2009/09/17 23:35:41 kristaps Exp $ */
d35 8
a42 8
STRING("Ge",			2,	">=",		2,	"",	0)
STRING("Gt",			2,	">",		1,	"",	0)
STRING("If",			2,	"infinity",	8,	"",	0)
STRING("Le",			2,	"<=",		2,	"",	0)
STRING("Lq",			2,	"``",		2,	"",	0)
STRING("Lt",			2,	"<",		1,	"",	0)
STRING("Na",			2,	"NaN",		3,	"",	0)
STRING("Ne",			2,	"!=",		2,	"",	0)
d52 1
a52 1
STRING("q",			1,	"\"",		1,	"",	0)
d131 1
a131 1
CHAR(".",			1,	".",		1,	"",	0)
@


1.3
log
@Consider html fixes, most importantly -tag and -hang (breaks in IE6, apparently).
@
text
@d1 1
a1 1
/*	$Id: chars.in,v 1.2 2009/09/17 08:21:42 kristaps Exp $ */
d226 1
a226 1
CHAR("bu",			2, 	"o",		1,	"",	0)
d260 1
a260 1
CHAR("la",			2, 	"<",		1,	"",	0)
d279 1
a279 1
CHAR("ra",			2, 	">",		1,	"",	0)
@


1.2
log
@More html.
Initial html encodings in chars.in.
@
text
@d1 1
a1 1
/*	$Id: chars.in,v 1.1 2009/09/17 07:41:28 kristaps Exp $ */
d64 2
a65 2
BOTH("lq",			2, 	"``",		2,	"",	0)
BOTH("rq",			2, 	"\'\'",		2,	"",	0)
d221 1
a221 1
CHAR("aq",			2, 	"\'",		1,	"",	0)
d239 1
a239 1
CHAR("e",			1,	"\\",		1,	"",	0)
d270 1
a270 1
CHAR("oq",			2, 	"`",		1,	"",	0)
@


1.1
log
@ascii_xxx -> chars_xxx (intended to hold more than just ascii encoding).
More html work.
@
text
@d1 1
a1 1
/*	$Id: ascii.in,v 1.17 2009/07/28 11:59:18 kristaps Exp $ */
d33 26
a58 26
STRING("Am",			2,	"&",		1)
STRING("Ba",			2,	"|",		1)
STRING("Ge",			2,	">=",		2)
STRING("Gt",			2,	">",		1)
STRING("If",			2,	"infinity",	8)
STRING("Le",			2,	"<=",		2)
STRING("Lq",			2,	"``",		2)
STRING("Lt",			2,	"<",		1)
STRING("Na",			2,	"NaN",		3)
STRING("Ne",			2,	"!=",		2)
STRING("Pi",			2,	"pi",		2)
STRING("Pm",			2,	"+-",		2)
STRING("R",			1,	"(R)",		3)
STRING("Rq",			2,	"\'\'",		2)
STRING("Tm",			2,	"tm",		2)
STRING("left-bracket",		12,	"[",		1)
STRING("left-parenthesis",	16,	"(",		1)
STRING("left-singlequote",	16,	"`",		1)
STRING("lp",			2,	"(",		1)
STRING("q",			1,	"\"",		1)
STRING("quote-left",		10,	"`",		1)
STRING("quote-right",		11,	"\'",		1)
STRING("right-bracket",		13,	"]",		1)
STRING("right-parenthesis",	17,	")",		1)
STRING("right-singlequote",	17,	"\'",		1)
STRING("rp",			2,	")",		1)
d60 7
a66 7
BOTH("<=",			2,	"<=",		2)
BOTH(">=",			2,	">=",		2)
BOTH("aa",			2,	"\'",		1)
BOTH("ga",			2,	"`",		1)
BOTH("lq",			2, 	"``",		2)
BOTH("rq",			2, 	"\'\'",		2)
BOTH("ua",			2,	"^",		1)
d68 233
a300 233
CHAR(" ",			1,	" ",		1)
CHAR("!=",			2, 	"!=",		2)
CHAR("%",			1,	"",		0)
CHAR("&",			1,	"",		0)
CHAR("(=",			2,	"(=",		2)
CHAR("**",			2, 	"*",		1)
CHAR("*A",			2,	"A",		1)
CHAR("*B",			2,	"B",		1)
CHAR("*C",			2,	"H",		1)
CHAR("*D",			2,	"/\\",		2)
CHAR("*E",			2,	"E",		1)
CHAR("*F",			2,	"O_",		1)
CHAR("*G",			2,	"|",		1)
CHAR("*H",			2,	"O",		1)
CHAR("*I",			2,	"I",		1)
CHAR("*K",			2,	"K",		1)
CHAR("*L",			2,	"/\\",		2)
CHAR("*M",			2,	"M",		1)
CHAR("*N",			2,	"N",		1)
CHAR("*O",			2,	"O",		1)
CHAR("*P",			2,	"TT",		2)
CHAR("*Q",			2,	"Y",		1)
CHAR("*R",			2,	"P",		1)
CHAR("*S",			2,	">",		1)
CHAR("*T",			2,	"T",		1)
CHAR("*U",			2,	"Y",		1)
CHAR("*W",			2,	"O",		1)
CHAR("*X",			2,	"X",		1)
CHAR("*Y",			2,	"H",		1)
CHAR("*Z",			2,	"Z",		1)
CHAR("*a",			2,	"a",		1)
CHAR("*b",			2,	"B",		1)
CHAR("*c",			2,	"E",		1)
CHAR("*d",			2,	"d",		1)
CHAR("*e",			2,	"e",		1)
CHAR("*f",			2,	"o",		1)
CHAR("*g",			2,	"y",		1)
CHAR("*h",			2,	"0",		1)
CHAR("*i",			2,	"i",		1)
CHAR("*k",			2,	"k",		1)
CHAR("*l",			2,	"\\",		1)
CHAR("*m",			2,	"u",		1)
CHAR("*n",			2,	"v",		1)
CHAR("*o",			2,	"o",		1)
CHAR("*p",			2,	"n",		1)
CHAR("*q",			2,	"u",		1)
CHAR("*r",			2,	"p",		1)
CHAR("*s",			2,	"o",		1)
CHAR("*t",			2,	"t",		1)
CHAR("*u",			2,	"u",		1)
CHAR("*w",			2,	"w",		1)
CHAR("*x",			2,	"x",		1)
CHAR("*y",			2,	"n",		1)
CHAR("*z",			2,	"C",		1)
CHAR("+-",			2, 	"+-",		2)
CHAR("+f",			2,	"o",		1)
CHAR("+h",			2,	"0",		1)
CHAR("+p",			2,	"w",		1)
CHAR(",C",			2,	"C",		1)
CHAR(",c",			2,	"c",		1)
CHAR("-",			1,	"-",		1)
CHAR("->",			2, 	"->",		2)
CHAR("-D",			2,	"D",		1)
CHAR(".",			1,	".",		1)
CHAR("/L",			2,	"L",		1)
CHAR("/O",			2,	"O",		1)
CHAR("/l",			2,	"l",		1)
CHAR("/o",			2,	"o",		1)
CHAR("0",			1,	" ",		1)
CHAR(":A",			2,	"A",		1)
CHAR(":E",			2,	"E",		1)
CHAR(":I",			2,	"I",		1)
CHAR(":O",			2,	"O",		1)
CHAR(":U",			2,	"U",		1)
CHAR(":a",			2,	"a",		1)
CHAR(":e",			2,	"e",		1)
CHAR(":i",			2,	"i",		1)
CHAR(":o",			2,	"o",		1)
CHAR(":u",			2,	"u",		1)
CHAR(":y",			2,	"y",		1)
CHAR("<-",			2, 	"<-",		2)
CHAR("<=",			2, 	"<=",		2)
CHAR("<>",			2, 	"<>",		2)
CHAR("=)",			2,	"=)",		2)
CHAR("==",			2, 	"==",		2)
CHAR("=~",			2,	"=~",		2)
CHAR(">=",			2, 	">=",		2)
CHAR("AE",			2,	"AE",		2)
CHAR("AN",			2,	"^",		1)
CHAR("Ah",			2,	"N",		1)
CHAR("Bq",			2, 	",,",		2)
CHAR("Cs",			2,	"x",		1)
CHAR("Do",			2,	"$",		1)
CHAR("Eu",			2,	"EUR",		3)
CHAR("Fc",			2,	">>",		2)
CHAR("Fi",			2,	"ffi",		3)
CHAR("Fl",			2,	"ffl",		3)
CHAR("Fn",			2,	"f",		1)
CHAR("Fo",			2,	"<<",		2)
CHAR("Im",			2,	"I",		1)
CHAR("OE",			2,	"OE",		2)
CHAR("OR",			2,	"v",		1)
CHAR("Po",			2,	"L",		1)
CHAR("Re",			2,	"R",		1)
CHAR("Sd",			2,	"o",		1)
CHAR("TP",			2,	"b",		1)
CHAR("Tp",			2,	"b",		1)
CHAR("Ye",			2,	"Y",		1)
CHAR("\'",			1,	"\'",		1)
CHAR("\'A",			2,	"A",		1)
CHAR("\'E",			2,	"E",		1)
CHAR("\'I",			2,	"I",		1)
CHAR("\'O",			2,	"O",		1)
CHAR("\'U",			2,	"U",		1)
CHAR("\'a",			2,	"a",		1)
CHAR("\'e",			2,	"e",		1)
CHAR("\'i",			2,	"i",		1)
CHAR("\'o",			2,	"o",		1)
CHAR("\'u",			2,	"u",		1)
CHAR("\\",			1,	"\\",		1)
CHAR("^",			1,	"",		0)
CHAR("^A",			2,	"A",		1)
CHAR("^E",			2,	"E",		1)
CHAR("^I",			2,	"I",		1)
CHAR("^O",			2,	"O",		1)
CHAR("^U",			2,	"U",		1)
CHAR("^a",			2,	"a",		1)
CHAR("^e",			2,	"e",		1)
CHAR("^i",			2,	"i",		1)
CHAR("^o",			2,	"o",		1)
CHAR("^u",			2,	"u",		1)
CHAR("`",			1,	"`",		1)
CHAR("`A",			2,	"A",		1)
CHAR("`E",			2,	"E",		1)
CHAR("`I",			2,	"I",		1)
CHAR("`O",			2,	"O",		1)
CHAR("`U",			2,	"U",		1)
CHAR("`a",			2,	"a",		1)
CHAR("`e",			2,	"e",		1)
CHAR("`i",			2,	"i",		1)
CHAR("`o",			2,	"o",		1)
CHAR("`u",			2,	"u",		1)
CHAR("a-",			2,	"-",		1)
CHAR("a\"",			2,	"\"",		1)
CHAR("a^",			2,	"^",		1)
CHAR("aa",			2, 	"\'",		1)
CHAR("ab",			2,	"`",		1)
CHAR("ac",			2,	",",		1)
CHAR("ad",			2,	"\"",		1)
CHAR("ae",			2,	"ae",		2)
CHAR("ah",			2,	"v",		1)
CHAR("ao",			2,	"o",		1)
CHAR("ap",			2,	"~",		1)
CHAR("aq",			2, 	"\'",		1)
CHAR("a~",			2, 	"~",		1)
CHAR("ba",			2, 	"|",		1)
CHAR("bb",			2, 	"|",		1)
CHAR("bq",			2, 	",",		1)
CHAR("bu",			2, 	"o",		1)
CHAR("c",			1,	"",		0)
CHAR("ca",			2,	"(^)",		3)
CHAR("ci",			2, 	"O",		1)
CHAR("co",			2, 	"(C)",		3)
CHAR("ct",			2,	"c",		1)
CHAR("cu",			2,	"U",		1)
CHAR("dA",			2, 	"v",		1)
CHAR("da",			2, 	"v",		1)
CHAR("dd",			2,	"=",		1)
CHAR("de",			2,	"o",		1)
CHAR("dg",			2,	"-",		1)
CHAR("di",			2,	"-:-",		3)
CHAR("e",			1,	"\\",		1)
CHAR("em",			2, 	"--",		2)
CHAR("en",			2, 	"-",		1)
CHAR("eq",			2,	"=",		1)
CHAR("es",			2,	"{}",		2)
CHAR("eu",			2,	"EUR",		3)
CHAR("fa",			2,	"V",		1)
CHAR("fc",			2,	">",		1)
CHAR("ff",			2,	"ff",		2)
CHAR("fi",			2,	"fi",		2)
CHAR("fl",			2,	"fl",		2)
CHAR("fo",			2,	"<",		1)
CHAR("ga",			2, 	"`",		1)
CHAR("gr",			2,	"V",		1)
CHAR("hA",			2, 	"<=>",		3)
CHAR("ho",			2,	",",		1)
CHAR("hy",			2, 	"-",		1)
CHAR("if",			2, 	"oo",		2)
CHAR("lA",			2, 	"<=",		2)
CHAR("lB",			2, 	"[",		1)
CHAR("lC",			2, 	"{",		1)
CHAR("la",			2, 	"<",		1)
CHAR("lh",			2,	"<=",		2)
CHAR("mo",			2,	"E",		1)
CHAR("mu",			2,	"x",		1)
CHAR("na",			2, 	"NaN",		3)
CHAR("nm",			2,	"E",		1)
CHAR("no",			2,	"~",		1)
CHAR("oA",			2,	"A",		1)
CHAR("oa",			2,	"a",		1)
CHAR("oe",			2,	"oe",		2)
CHAR("oq",			2, 	"`",		1)
CHAR("pd",			2,	"a",		1)
CHAR("pl",			2,	"+",		1)
CHAR("ps",			2,	"9|",		2)
CHAR("r!",			2,	"i",		1)
CHAR("r?",			2,	"c",		1)
CHAR("rA",			2, 	"=>",		2)
CHAR("rB",			2, 	"]",		1)
CHAR("rC",			2, 	"}",		1)
CHAR("ra",			2, 	">",		1)
CHAR("rg",			2, 	"(R)",		3)
CHAR("rh",			2,	"=>",		2)
CHAR("sc",			2,	"S",		1)
CHAR("ss",			2,	"ss",		2)
CHAR("st",			2,	"-)",		2)
CHAR("te",			2,	"3",		1)
CHAR("tf",			2,	".:.",		3)
CHAR("tm",			2, 	"tm",		2)
CHAR("ts",			2,	"s",		1)
CHAR("uA",			2, 	"^",		1)
CHAR("ua",			2, 	"^",		1)
CHAR("|",			1,	"",		0)
CHAR("~",			1,	" ",		1)
CHAR("~=",			2,	"~=",		2)
CHAR("~A",			2,	"A",		1)
CHAR("~N",			2,	"N",		1)
CHAR("~O",			2,	"O",		1)
CHAR("~a",			2,	"a",		1)
CHAR("~n",			2,	"n",		1)
CHAR("~o",			2,	"o",		1)
CHAR("~~",			2,	"~~",		2)
@
