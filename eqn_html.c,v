head	1.10;
access;
symbols
	VERSION_1_13_3:1.10
	VERSION_1_13_2:1.10
	VERSION_1_12_4:1.4
	VERSION_1_13_1:1.3
	VERSION_1_12_3:1.2
	VERSION_1_12_2:1.2
	VERSION_1_12:1.4.0.2
	VERSION_1_12_1:1.2
	VERSION_1_12_0:1.2
	VERSION_1_11_7:1.2
	VERSION_1_11_6:1.2
	VERSION_1_11_5:1.2;
locks; strict;
comment	@ * @;


1.10
date	2014.10.12.19.31.41;	author schwarze;	state Exp;
branches;
next	1.9;

1.9
date	2014.10.10.14.27.46;	author schwarze;	state Exp;
branches;
next	1.8;

1.8
date	2014.10.10.08.44.24;	author kristaps;	state Exp;
branches;
next	1.7;

1.7
date	2014.09.28.20.14.20;	author kristaps;	state Exp;
branches;
next	1.6;

1.6
date	2014.09.28.14.06.09;	author kristaps;	state Exp;
branches;
next	1.5;

1.5
date	2014.09.28.13.34.15;	author kristaps;	state Exp;
branches;
next	1.4;

1.4
date	2014.08.10.23.54.41;	author schwarze;	state Exp;
branches;
next	1.3;

1.3
date	2014.04.20.16.46.04;	author schwarze;	state Exp;
branches;
next	1.2;

1.2
date	2011.07.24.10.09.03;	author kristaps;	state Exp;
branches;
next	1.1;

1.1
date	2011.07.23.22.57.13;	author kristaps;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Improve error handling in the eqn(7) parser.
Get rid of the first fatal error, MANDOCERR_EQNSYNT.
In eqn(7), there is no need to be bug-compatible with groff, so there
is no need to abondon the whole equation in case of a syntax error.

In particular:
* Skip "back", "delim", "down", "fwd", "gfont", "gsize", "left",
  "right", "size", and "up" without arguments.
* Skip "gsize" and "size" with a non-numeric argument.
* Skip closing delimiters that are not open.
* Skip "above" outside piles.
* For diacritic marks and binary operators without a left operand,
  default to an empty box.
* Let piles and matrices take one argument rather than insisting
  on a braced list.  Let HTML output handle that, too.
* When rewinding, if the root box is guaranteed to match
  the termination condition, no error handling is needed.
@
text
@/*	$Id: eqn_html.c,v 1.9 2014/10/10 14:27:46 schwarze Exp $ */
/*
 * Copyright (c) 2011, 2014 Kristaps Dzonsons <kristaps@@bsd.lv>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */
#include "config.h"

#include <sys/types.h>

#include <assert.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "mandoc.h"
#include "out.h"
#include "html.h"

static void
eqn_box(struct html *p, const struct eqn_box *bp)
{
	struct tag	*post, *row, *cell, *t;
	struct htmlpair	 tag[2];
	const struct eqn_box *child, *parent;
	size_t		 i, j, rows;

	if (NULL == bp)
		return;

	post = NULL;

	/*
	 * Special handling for a matrix, which is presented to us in
	 * column order, but must be printed in row-order.
	 */
	if (EQN_MATRIX == bp->type) {
		if (NULL == bp->first)
			goto out;
		if (EQN_LIST != bp->first->type) {
			eqn_box(p, bp->first);
			goto out;
		}
		if (NULL == (parent = bp->first->first))
			goto out;
		/* Estimate the number of rows, first. */
		if (NULL == (child = parent->first))
			goto out;
		for (rows = 0; NULL != child; rows++)
			child = child->next;
		/* Print row-by-row. */
		post = print_otag(p, TAG_MTABLE, 0, NULL);
		for (i = 0; i < rows; i++) {
			parent = bp->first->first;
			row = print_otag(p, TAG_MTR, 0, NULL);
			while (NULL != parent) {
				child = parent->first;
				for (j = 0; j < i; j++) {
					if (NULL == child)
						break;
					child = child->next;
				}
				cell = print_otag
					(p, TAG_MTD, 0, NULL);
				/*
				 * If we have no data for this
				 * particular cell, then print a
				 * placeholder and continue--don't puke.
				 */
				if (NULL != child)
					eqn_box(p, child->first);
				print_tagq(p, cell);
				parent = parent->next;
			}
			print_tagq(p, row);
		}
		goto out;
	}

	switch (bp->pos) {
	case (EQNPOS_TO):
		post = print_otag(p, TAG_MOVER, 0, NULL);
		break;
	case (EQNPOS_SUP):
		post = print_otag(p, TAG_MSUP, 0, NULL);
		break;
	case (EQNPOS_FROM):
		post = print_otag(p, TAG_MUNDER, 0, NULL);
		break;
	case (EQNPOS_SUB):
		post = print_otag(p, TAG_MSUB, 0, NULL);
		break;
	case (EQNPOS_OVER):
		post = print_otag(p, TAG_MFRAC, 0, NULL);
		break;
	case (EQNPOS_FROMTO):
		post = print_otag(p, TAG_MUNDEROVER, 0, NULL);
		break;
	case (EQNPOS_SUBSUP):
		post = print_otag(p, TAG_MSUBSUP, 0, NULL);
		break;
	case (EQNPOS_SQRT):
		post = print_otag(p, TAG_MSQRT, 0, NULL);
		break;
	default:
		break;
	}

	if (bp->top || bp->bottom) {
		assert(NULL == post);
		if (bp->top && NULL == bp->bottom)
			post = print_otag(p, TAG_MOVER, 0, NULL);
		else if (bp->top && bp->bottom)
			post = print_otag(p, TAG_MUNDEROVER, 0, NULL);
		else if (bp->bottom)
			post = print_otag(p, TAG_MUNDER, 0, NULL);
	}

	if (EQN_PILE == bp->type) {
		assert(NULL == post);
		if (bp->first != NULL && bp->first->type == EQN_LIST)
			post = print_otag(p, TAG_MTABLE, 0, NULL);
	} else if (bp->type == EQN_LIST &&
	    bp->parent && bp->parent->type == EQN_PILE) {
		assert(NULL == post);
		post = print_otag(p, TAG_MTR, 0, NULL);
		print_otag(p, TAG_MTD, 0, NULL);
	}

	if (NULL != bp->text) {
		assert(NULL == post);
		post = print_otag(p, TAG_MI, 0, NULL);
		print_text(p, bp->text);
	} else if (NULL == post) {
		if (NULL != bp->left || NULL != bp->right) {
			PAIR_INIT(&tag[0], ATTR_OPEN,
			    NULL == bp->left ? "" : bp->left);
			PAIR_INIT(&tag[1], ATTR_CLOSE,
			    NULL == bp->right ? "" : bp->right);
			post = print_otag(p, TAG_MFENCED, 2, tag);
		}
		if (NULL == post)
			post = print_otag(p, TAG_MROW, 0, NULL);
		else
			print_otag(p, TAG_MROW, 0, NULL);
	}

	eqn_box(p, bp->first);

out:
	if (NULL != bp->bottom) {
		t = print_otag(p, TAG_MO, 0, NULL);
		print_text(p, bp->bottom);
		print_tagq(p, t);
	}
	if (NULL != bp->top) {
		t = print_otag(p, TAG_MO, 0, NULL);
		print_text(p, bp->top);
		print_tagq(p, t);
	}

	if (NULL != post)
		print_tagq(p, post);

	eqn_box(p, bp->next);
}

void
print_eqn(struct html *p, const struct eqn *ep)
{
	struct htmlpair	 tag;
	struct tag	*t;

	PAIR_CLASS_INIT(&tag, "eqn");
	t = print_otag(p, TAG_MATH, 1, &tag);

	p->flags |= HTML_NONOSPACE;
	eqn_box(p, ep->root);
	p->flags &= ~HTML_NONOSPACE;

	print_tagq(p, t);
}
@


1.9
log
@Drop trailing whitespace, adjust a few indentations,
and update Copyright year while here; no code change.
@
text
@d1 1
a1 1
/*	$Id: eqn_html.c,v 1.8 2014/10/10 08:44:24 kristaps Exp $ */
d50 4
a53 1
		assert(EQN_LIST == bp->first->type);
a55 1
		assert(EQN_PILE == parent->type);
d131 4
a134 2
		post = print_otag(p, TAG_MTABLE, 0, NULL);
	} else if (bp->parent && EQN_PILE == bp->parent->type) {
@


1.8
log
@Re-write of eqn(7) parser and MathML output.
This adds parser-level support for the grammar described by the eqn
second-edition technical paper, "Typesetting Mathematics â€” User's Guide"
(Kernighan, Cherry).
The reason for this re-write is the grouping rules, which were not
possible given the existing implementation.
The re-write has also considerably simplified the HTML (and, if it ever
is completed, terminal) front-end.
@
text
@d1 1
a1 1
/*	$Id: eqn_html.c,v 1.7 2014/09/28 20:14:20 kristaps Exp $ */
d3 1
a3 1
 * Copyright (c) 2011 Kristaps Dzonsons <kristaps@@bsd.lv>
d57 1
a57 1
		for (rows = 0; NULL != child; rows++) 
d73 1
a73 1
				/* 
d78 1
a78 1
				if (NULL != child) 
d140 1
a140 1
	} else if (NULL == post) { 
d143 1
a143 1
				NULL == bp->left ? "" : bp->left);
d145 1
a145 1
				NULL == bp->right ? "" : bp->right);
d147 1
a147 1
		} 
d161 1
a161 1
	} 
@


1.7
log
@Change "to" and "from" commands to use munder, mover, and munderover.
@
text
@d1 1
a1 1
/*	$Id: eqn_html.c,v 1.6 2014/09/28 14:06:09 kristaps Exp $ */
d30 2
a31 14
static	const enum htmltag fontmap[EQNFONT__MAX] = {
	TAG_SPAN, /* EQNFONT_NONE */
	TAG_SPAN, /* EQNFONT_ROMAN */
	TAG_B, /* EQNFONT_BOLD */
	TAG_B, /* EQNFONT_FAT */
	TAG_I /* EQNFONT_ITALIC */
};

static const struct eqn_box *
	eqn_box(struct html *, const struct eqn_box *, int);


void
print_eqn(struct html *p, const struct eqn *ep)
d33 1
a33 27
	struct htmlpair	 tag;
	struct tag	*t;

	PAIR_CLASS_INIT(&tag, "eqn");
	t = print_otag(p, TAG_MATH, 1, &tag);

	p->flags |= HTML_NONOSPACE;
	eqn_box(p, ep->root, 1);
	p->flags &= ~HTML_NONOSPACE;

	print_tagq(p, t);
}

/*
 * This function is fairly brittle.
 * This is because the eqn syntax doesn't play so nicely with recusive
 * formats, e.g.,
 *     foo sub bar sub baz
 * ...needs to resolve into
 *     <msub> foo <msub> bar, baz </msub> </msub>
 * In other words, we need to embed some recursive work.
 * FIXME: this does NOT handle right-left associativity or precedence!
 */
static const struct eqn_box *
eqn_box(struct html *p, const struct eqn_box *bp, int next)
{
	struct tag	*post, *pilet, *tmp;
d35 2
a36 1
	int		 skiptwo;
d39 1
a39 1
		return(NULL);
d41 1
a41 2
	post = pilet = NULL;
	skiptwo = 0;
d44 2
a45 4
	 * If we're a "row" under a pile, then open up the piling
	 * context here.
	 * We do this first because the pile surrounds the content of
	 * the contained expression.
d47 39
a85 8
	if (NULL != bp->parent && bp->parent->pile != EQNPILE_NONE) {
		pilet = print_otag(p, TAG_MTR, 0, NULL);
		print_otag(p, TAG_MTD, 0, NULL);
	}
	if (NULL != bp->parent && bp->parent->type == EQN_MATRIX) {
		pilet = print_otag(p, TAG_MTABLE, 0, NULL);
		print_otag(p, TAG_MTR, 0, NULL);
		print_otag(p, TAG_MTD, 0, NULL);
a87 17
	/*
	 * If we're establishing a pile, start the table mode now.
	 * If we've already in a pile row, then don't override "pilet",
	 * because we'll be closed out anyway.
	 */
	if (bp->pile != EQNPILE_NONE) {
		tmp = print_otag(p, TAG_MTABLE, 0, NULL);
		pilet = (NULL == pilet) ? tmp : pilet;
	}

	/*
	 * Positioning.
	 * This is the most complicated part, and actually doesn't quite
	 * work (FIXME) because it doesn't account for associativity.
	 * Setting "post" will mean that we're only going to process a
	 * single or double following expression.
	 */
a105 1
		skiptwo = 1;
d109 3
a111 1
		skiptwo = 1;
d117 18
a134 2
	/*t = EQNFONT_NONE == bp->font ? NULL :
	    print_otag(p, fontmap[(int)bp->font], 0, NULL);*/
d137 4
a140 36
		assert(NULL == bp->first);
		/*
		 * We have text.
		 * This can be a number, a function, a variable, or
		 * pretty much anything else.
		 * First, check for some known functions.
		 * If we're going to create a structural node (e.g.,
		 * sqrt), then set the "post" variable only if it's not
		 * already set.
		 */
		if (0 == strcmp(bp->text, "sqrt")) {
			tmp = print_otag(p, TAG_MSQRT, 0, NULL);
			post = (NULL == post) ? tmp : post;
		} else if (0 == strcmp(bp->text, "+") ||
			   0 == strcmp(bp->text, "-") ||
			   0 == strcmp(bp->text, "=") ||
			   0 == strcmp(bp->text, "(") ||
			   0 == strcmp(bp->text, ")") ||
			   0 == strcmp(bp->text, "/")) {
			tmp = print_otag(p, TAG_MO, 0, NULL);
			print_text(p, bp->text);
			print_tagq(p, tmp);
		} else {
			tmp = print_otag(p, TAG_MI, 0, NULL);
			print_text(p, bp->text);
			print_tagq(p, tmp);
		}
	} else if (NULL != bp->first) {
		assert(NULL == bp->text);
		/* 
		 * If we're a "fenced" component (i.e., having
		 * brackets), then process those brackets now.
		 * Otherwise, introduce a dummy row (if we're not
		 * already in a table context).
		 */
		tmp = NULL;
d143 1
a143 1
				NULL != bp->left ? bp->left : "");
d145 6
a150 2
				NULL != bp->right ? bp->right : "");
			tmp = print_otag(p, TAG_MFENCED, 2, tag);
a151 5
		} else if (NULL == pilet)
			tmp = print_otag(p, TAG_MROW, 0, NULL);
		eqn_box(p, bp->first, 1);
		if (NULL != tmp)
			print_tagq(p, tmp);
d154 15
a168 9
	/*
	 * If a positional context, invoke the "next" context.
	 * This is recursive and will return the end of the recursive
	 * chain of "next" contexts.
	 */
	if (NULL != post) {
		bp = eqn_box(p, bp->next, 0);
		if (skiptwo)
			bp = eqn_box(p, bp->next, 0);
a169 1
	}
d171 15
a185 6
	/* 
	 * If we're being piled (either directly, in the table, or
	 * indirectly in a table row), then close that out.
	 */
	if (NULL != pilet)
		print_tagq(p, pilet);
d187 1
a187 6
	/*
	 * If we're normally processing, then grab the next node.
	 * If we're in a recursive context, then don't seek to the next
	 * node; further recursion has already been handled.
	 */
	return(next ? eqn_box(p, bp->next, 1) : bp);
@


1.6
log
@Crudely accomodate for matrices by way of adjacent tables.  We don't do this
nicely right now because eqn uses column ordering.
Also add from/to support and to support.
@
text
@d1 1
a1 1
/*	$Id: eqn_html.c,v 1.5 2014/09/28 13:34:15 kristaps Exp $ */
d116 2
a117 1
		/* FALLTHROUGH */
d122 2
a123 1
		/* FALLTHROUGH */
d131 3
a133 1
		/* FALLTHROUGH */
a134 1
		/* This requires two elements. */
@


1.5
log
@Support a decent subset of eqn(7) in MathML.
This has basic support for positions (under, sup, sub, sub/sup) and piles.
It *does not* support right-left grouping (among many other things), e.g.,

  a sub b over c sub d

Which it will interpret, for the time being, as

  a sub { b over { c sub d } }

instead of

  { a sub b } over { c sub d }

However, left-right grouping works fine.
@
text
@d1 1
a1 1
/*	$Id: eqn_html.c,v 1.4 2014/08/10 23:54:41 schwarze Exp $ */
d91 5
d115 2
d128 2
@


1.4
log
@Get rid of HAVE_CONFIG_H, it is always defined; idea from libnbcompat.
Include <sys/types.h> where needed, it does not belong in config.h.
Remove <stdio.h> from config.h; if it is missing somewhere, it should
be added, but i cannot find a *.c file where it is missing.
@
text
@d1 1
a1 1
/*	$Id: eqn_html.c,v 1.3 2014/04/20 16:46:04 schwarze Exp $ */
d38 2
a39 1
static void	eqn_box(struct html *, const struct eqn_box *);
d49 1
a49 1
	t = print_otag(p, TAG_SPAN, 1, &tag);
d52 1
a52 1
	eqn_box(p, ep->root);
d58 12
a69 2
static void
eqn_box(struct html *p, const struct eqn_box *bp)
d71 138
a208 21
	struct tag	*t;

	t = EQNFONT_NONE == bp->font ? NULL :
	    print_otag(p, fontmap[(int)bp->font], 0, NULL);

	if (bp->left)
		print_text(p, bp->left);

	if (bp->text)
		print_text(p, bp->text);

	if (bp->first)
		eqn_box(p, bp->first);

	if (NULL != t)
		print_tagq(p, t);
	if (bp->right)
		print_text(p, bp->right);

	if (bp->next)
		eqn_box(p, bp->next);
@


1.3
log
@KNF: case (FOO):  ->  case FOO:, remove /* LINTED */ and /* ARGSUSED */,
remove trailing whitespace and blanks before tabs, improve some indenting;
no functional change
@
text
@d1 1
a1 1
/*	$Id: eqn_html.c,v 1.2 2011/07/24 10:09:03 kristaps Exp $ */
a16 1
#ifdef HAVE_CONFIG_H
d18 2
a19 1
#endif
@


1.2
log
@Tuned the initial eqn output, making it completely simple.  This
completes a full initial eqn system, so I'm tagging a release on it.
@
text
@d1 1
a1 1
/*	$Id: eqn_html.c,v 1.1 2011/07/23 22:57:13 kristaps Exp $ */
d38 1
a39 1
static void	eqn_box(struct html *, const struct eqn_box *);
d62 2
a63 2
	t = EQNFONT_NONE == bp->font ? NULL : 
		print_otag(p, fontmap[(int)bp->font], 0, NULL);
d67 1
a67 1
	
@


1.1
log
@Flip on equation printing for -T[x]html.
@
text
@d1 1
a1 1
/*	$Id: eqn_term.c,v 1.2 2011/07/23 12:01:54 kristaps Exp $ */
d30 9
a39 3
static void	eqn_box_post(struct html *, const struct eqn_box *);
static void	eqn_box_pre(struct html *, const struct eqn_box *);
static void	eqn_text(struct html *, const struct eqn_box *);
d60 1
d62 2
a63 15
	eqn_box_pre(p, bp);
	eqn_text(p, bp);

	if (bp->first)
		eqn_box(p, bp->first);

	eqn_box_post(p, bp);

	if (bp->next)
		eqn_box(p, bp->next);
}

static void
eqn_box_pre(struct html *p, const struct eqn_box *bp)
{
d67 3
a69 1
}
d71 2
a72 3
static void
eqn_box_post(struct html *p, const struct eqn_box *bp)
{
d74 2
a77 1
}
d79 2
a80 6
static void
eqn_text(struct html *p, const struct eqn_box *bp)
{

	if (bp->text)
		print_text(p, bp->text);
@
